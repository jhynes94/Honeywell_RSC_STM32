
Honeywell_RSC_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d08  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fd0  08004fd0  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08004fd0  08004fd0  00014fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fd8  08004fd8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd8  08004fd8  00014fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fdc  08004fdc  00014fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08004fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000004  08004fe4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004fe4  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081e4  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016a3  00000000  00000000  00028210  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000898  00000000  00000000  000298b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d0  00000000  00000000  0002a150  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010ca4  00000000  00000000  0002a920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000074a1  00000000  00000000  0003b5c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00066587  00000000  00000000  00042a65  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a8fec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002004  00000000  00000000  000a9068  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004db0 	.word	0x08004db0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08004db0 	.word	0x08004db0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f001 fa4b 	bl	8001718 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f001 fa46 	bl	8001718 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__aeabi_fadd>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	4647      	mov	r7, r8
 80003e8:	46ce      	mov	lr, r9
 80003ea:	0243      	lsls	r3, r0, #9
 80003ec:	0a5b      	lsrs	r3, r3, #9
 80003ee:	0044      	lsls	r4, r0, #1
 80003f0:	0fc2      	lsrs	r2, r0, #31
 80003f2:	469c      	mov	ip, r3
 80003f4:	0048      	lsls	r0, r1, #1
 80003f6:	00dd      	lsls	r5, r3, #3
 80003f8:	024b      	lsls	r3, r1, #9
 80003fa:	0e24      	lsrs	r4, r4, #24
 80003fc:	0a5b      	lsrs	r3, r3, #9
 80003fe:	0e00      	lsrs	r0, r0, #24
 8000400:	b580      	push	{r7, lr}
 8000402:	4698      	mov	r8, r3
 8000404:	0026      	movs	r6, r4
 8000406:	4691      	mov	r9, r2
 8000408:	0fc9      	lsrs	r1, r1, #31
 800040a:	00db      	lsls	r3, r3, #3
 800040c:	1a27      	subs	r7, r4, r0
 800040e:	428a      	cmp	r2, r1
 8000410:	d029      	beq.n	8000466 <__aeabi_fadd+0x82>
 8000412:	2f00      	cmp	r7, #0
 8000414:	dd15      	ble.n	8000442 <__aeabi_fadd+0x5e>
 8000416:	2800      	cmp	r0, #0
 8000418:	d14a      	bne.n	80004b0 <__aeabi_fadd+0xcc>
 800041a:	2b00      	cmp	r3, #0
 800041c:	d000      	beq.n	8000420 <__aeabi_fadd+0x3c>
 800041e:	e095      	b.n	800054c <__aeabi_fadd+0x168>
 8000420:	08ed      	lsrs	r5, r5, #3
 8000422:	2cff      	cmp	r4, #255	; 0xff
 8000424:	d100      	bne.n	8000428 <__aeabi_fadd+0x44>
 8000426:	e088      	b.n	800053a <__aeabi_fadd+0x156>
 8000428:	026b      	lsls	r3, r5, #9
 800042a:	0a5b      	lsrs	r3, r3, #9
 800042c:	b2e6      	uxtb	r6, r4
 800042e:	025b      	lsls	r3, r3, #9
 8000430:	05f6      	lsls	r6, r6, #23
 8000432:	0a58      	lsrs	r0, r3, #9
 8000434:	4330      	orrs	r0, r6
 8000436:	07d2      	lsls	r2, r2, #31
 8000438:	4310      	orrs	r0, r2
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4690      	mov	r8, r2
 800043e:	4699      	mov	r9, r3
 8000440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000442:	2f00      	cmp	r7, #0
 8000444:	d000      	beq.n	8000448 <__aeabi_fadd+0x64>
 8000446:	e087      	b.n	8000558 <__aeabi_fadd+0x174>
 8000448:	1c60      	adds	r0, r4, #1
 800044a:	b2c0      	uxtb	r0, r0
 800044c:	2801      	cmp	r0, #1
 800044e:	dc00      	bgt.n	8000452 <__aeabi_fadd+0x6e>
 8000450:	e0b6      	b.n	80005c0 <__aeabi_fadd+0x1dc>
 8000452:	1aee      	subs	r6, r5, r3
 8000454:	0172      	lsls	r2, r6, #5
 8000456:	d500      	bpl.n	800045a <__aeabi_fadd+0x76>
 8000458:	e0c5      	b.n	80005e6 <__aeabi_fadd+0x202>
 800045a:	2e00      	cmp	r6, #0
 800045c:	d13d      	bne.n	80004da <__aeabi_fadd+0xf6>
 800045e:	2200      	movs	r2, #0
 8000460:	2600      	movs	r6, #0
 8000462:	2300      	movs	r3, #0
 8000464:	e7e3      	b.n	800042e <__aeabi_fadd+0x4a>
 8000466:	2f00      	cmp	r7, #0
 8000468:	dc00      	bgt.n	800046c <__aeabi_fadd+0x88>
 800046a:	e096      	b.n	800059a <__aeabi_fadd+0x1b6>
 800046c:	2800      	cmp	r0, #0
 800046e:	d05d      	beq.n	800052c <__aeabi_fadd+0x148>
 8000470:	2cff      	cmp	r4, #255	; 0xff
 8000472:	d060      	beq.n	8000536 <__aeabi_fadd+0x152>
 8000474:	2280      	movs	r2, #128	; 0x80
 8000476:	04d2      	lsls	r2, r2, #19
 8000478:	4313      	orrs	r3, r2
 800047a:	2f1b      	cmp	r7, #27
 800047c:	dd00      	ble.n	8000480 <__aeabi_fadd+0x9c>
 800047e:	e0ec      	b.n	800065a <__aeabi_fadd+0x276>
 8000480:	2220      	movs	r2, #32
 8000482:	1bd2      	subs	r2, r2, r7
 8000484:	0018      	movs	r0, r3
 8000486:	4093      	lsls	r3, r2
 8000488:	40f8      	lsrs	r0, r7
 800048a:	1e5a      	subs	r2, r3, #1
 800048c:	4193      	sbcs	r3, r2
 800048e:	4303      	orrs	r3, r0
 8000490:	18ed      	adds	r5, r5, r3
 8000492:	016b      	lsls	r3, r5, #5
 8000494:	d57b      	bpl.n	800058e <__aeabi_fadd+0x1aa>
 8000496:	3401      	adds	r4, #1
 8000498:	2cff      	cmp	r4, #255	; 0xff
 800049a:	d100      	bne.n	800049e <__aeabi_fadd+0xba>
 800049c:	e0b7      	b.n	800060e <__aeabi_fadd+0x22a>
 800049e:	2201      	movs	r2, #1
 80004a0:	2607      	movs	r6, #7
 80004a2:	402a      	ands	r2, r5
 80004a4:	086b      	lsrs	r3, r5, #1
 80004a6:	4d9a      	ldr	r5, [pc, #616]	; (8000710 <__aeabi_fadd+0x32c>)
 80004a8:	401d      	ands	r5, r3
 80004aa:	4315      	orrs	r5, r2
 80004ac:	402e      	ands	r6, r5
 80004ae:	e029      	b.n	8000504 <__aeabi_fadd+0x120>
 80004b0:	2cff      	cmp	r4, #255	; 0xff
 80004b2:	d0b5      	beq.n	8000420 <__aeabi_fadd+0x3c>
 80004b4:	2280      	movs	r2, #128	; 0x80
 80004b6:	04d2      	lsls	r2, r2, #19
 80004b8:	4313      	orrs	r3, r2
 80004ba:	2f1b      	cmp	r7, #27
 80004bc:	dd00      	ble.n	80004c0 <__aeabi_fadd+0xdc>
 80004be:	e0b2      	b.n	8000626 <__aeabi_fadd+0x242>
 80004c0:	2220      	movs	r2, #32
 80004c2:	1bd2      	subs	r2, r2, r7
 80004c4:	0019      	movs	r1, r3
 80004c6:	4093      	lsls	r3, r2
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	1e5a      	subs	r2, r3, #1
 80004cc:	4193      	sbcs	r3, r2
 80004ce:	430b      	orrs	r3, r1
 80004d0:	1aed      	subs	r5, r5, r3
 80004d2:	016b      	lsls	r3, r5, #5
 80004d4:	d55b      	bpl.n	800058e <__aeabi_fadd+0x1aa>
 80004d6:	01ad      	lsls	r5, r5, #6
 80004d8:	09ae      	lsrs	r6, r5, #6
 80004da:	0030      	movs	r0, r6
 80004dc:	f001 f8fe 	bl	80016dc <__clzsi2>
 80004e0:	3805      	subs	r0, #5
 80004e2:	4086      	lsls	r6, r0
 80004e4:	4284      	cmp	r4, r0
 80004e6:	dc65      	bgt.n	80005b4 <__aeabi_fadd+0x1d0>
 80004e8:	1b04      	subs	r4, r0, r4
 80004ea:	0033      	movs	r3, r6
 80004ec:	2020      	movs	r0, #32
 80004ee:	3401      	adds	r4, #1
 80004f0:	40e3      	lsrs	r3, r4
 80004f2:	1b04      	subs	r4, r0, r4
 80004f4:	40a6      	lsls	r6, r4
 80004f6:	1e75      	subs	r5, r6, #1
 80004f8:	41ae      	sbcs	r6, r5
 80004fa:	4333      	orrs	r3, r6
 80004fc:	2607      	movs	r6, #7
 80004fe:	001d      	movs	r5, r3
 8000500:	2400      	movs	r4, #0
 8000502:	401e      	ands	r6, r3
 8000504:	2201      	movs	r2, #1
 8000506:	464b      	mov	r3, r9
 8000508:	401a      	ands	r2, r3
 800050a:	2e00      	cmp	r6, #0
 800050c:	d004      	beq.n	8000518 <__aeabi_fadd+0x134>
 800050e:	230f      	movs	r3, #15
 8000510:	402b      	ands	r3, r5
 8000512:	2b04      	cmp	r3, #4
 8000514:	d000      	beq.n	8000518 <__aeabi_fadd+0x134>
 8000516:	3504      	adds	r5, #4
 8000518:	016b      	lsls	r3, r5, #5
 800051a:	d400      	bmi.n	800051e <__aeabi_fadd+0x13a>
 800051c:	e780      	b.n	8000420 <__aeabi_fadd+0x3c>
 800051e:	3401      	adds	r4, #1
 8000520:	b2e6      	uxtb	r6, r4
 8000522:	2cff      	cmp	r4, #255	; 0xff
 8000524:	d12f      	bne.n	8000586 <__aeabi_fadd+0x1a2>
 8000526:	26ff      	movs	r6, #255	; 0xff
 8000528:	2300      	movs	r3, #0
 800052a:	e780      	b.n	800042e <__aeabi_fadd+0x4a>
 800052c:	2b00      	cmp	r3, #0
 800052e:	d152      	bne.n	80005d6 <__aeabi_fadd+0x1f2>
 8000530:	2cff      	cmp	r4, #255	; 0xff
 8000532:	d000      	beq.n	8000536 <__aeabi_fadd+0x152>
 8000534:	e774      	b.n	8000420 <__aeabi_fadd+0x3c>
 8000536:	000a      	movs	r2, r1
 8000538:	08ed      	lsrs	r5, r5, #3
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0f3      	beq.n	8000526 <__aeabi_fadd+0x142>
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	03db      	lsls	r3, r3, #15
 8000542:	432b      	orrs	r3, r5
 8000544:	025b      	lsls	r3, r3, #9
 8000546:	0a5b      	lsrs	r3, r3, #9
 8000548:	26ff      	movs	r6, #255	; 0xff
 800054a:	e770      	b.n	800042e <__aeabi_fadd+0x4a>
 800054c:	3f01      	subs	r7, #1
 800054e:	2f00      	cmp	r7, #0
 8000550:	d0be      	beq.n	80004d0 <__aeabi_fadd+0xec>
 8000552:	2cff      	cmp	r4, #255	; 0xff
 8000554:	d1b1      	bne.n	80004ba <__aeabi_fadd+0xd6>
 8000556:	e763      	b.n	8000420 <__aeabi_fadd+0x3c>
 8000558:	2c00      	cmp	r4, #0
 800055a:	d047      	beq.n	80005ec <__aeabi_fadd+0x208>
 800055c:	28ff      	cmp	r0, #255	; 0xff
 800055e:	d069      	beq.n	8000634 <__aeabi_fadd+0x250>
 8000560:	2480      	movs	r4, #128	; 0x80
 8000562:	04e4      	lsls	r4, r4, #19
 8000564:	427a      	negs	r2, r7
 8000566:	4325      	orrs	r5, r4
 8000568:	2a1b      	cmp	r2, #27
 800056a:	dd00      	ble.n	800056e <__aeabi_fadd+0x18a>
 800056c:	e0c5      	b.n	80006fa <__aeabi_fadd+0x316>
 800056e:	002c      	movs	r4, r5
 8000570:	2620      	movs	r6, #32
 8000572:	40d4      	lsrs	r4, r2
 8000574:	1ab2      	subs	r2, r6, r2
 8000576:	4095      	lsls	r5, r2
 8000578:	1e6a      	subs	r2, r5, #1
 800057a:	4195      	sbcs	r5, r2
 800057c:	4325      	orrs	r5, r4
 800057e:	1b5d      	subs	r5, r3, r5
 8000580:	0004      	movs	r4, r0
 8000582:	4689      	mov	r9, r1
 8000584:	e7a5      	b.n	80004d2 <__aeabi_fadd+0xee>
 8000586:	01ab      	lsls	r3, r5, #6
 8000588:	0a5b      	lsrs	r3, r3, #9
 800058a:	e750      	b.n	800042e <__aeabi_fadd+0x4a>
 800058c:	2400      	movs	r4, #0
 800058e:	2201      	movs	r2, #1
 8000590:	464b      	mov	r3, r9
 8000592:	401a      	ands	r2, r3
 8000594:	076b      	lsls	r3, r5, #29
 8000596:	d1ba      	bne.n	800050e <__aeabi_fadd+0x12a>
 8000598:	e742      	b.n	8000420 <__aeabi_fadd+0x3c>
 800059a:	2f00      	cmp	r7, #0
 800059c:	d13b      	bne.n	8000616 <__aeabi_fadd+0x232>
 800059e:	3401      	adds	r4, #1
 80005a0:	b2e0      	uxtb	r0, r4
 80005a2:	2801      	cmp	r0, #1
 80005a4:	dd4a      	ble.n	800063c <__aeabi_fadd+0x258>
 80005a6:	2cff      	cmp	r4, #255	; 0xff
 80005a8:	d0bd      	beq.n	8000526 <__aeabi_fadd+0x142>
 80005aa:	2607      	movs	r6, #7
 80005ac:	18ed      	adds	r5, r5, r3
 80005ae:	086d      	lsrs	r5, r5, #1
 80005b0:	402e      	ands	r6, r5
 80005b2:	e7a7      	b.n	8000504 <__aeabi_fadd+0x120>
 80005b4:	2307      	movs	r3, #7
 80005b6:	4d57      	ldr	r5, [pc, #348]	; (8000714 <__aeabi_fadd+0x330>)
 80005b8:	1a24      	subs	r4, r4, r0
 80005ba:	4035      	ands	r5, r6
 80005bc:	401e      	ands	r6, r3
 80005be:	e7a1      	b.n	8000504 <__aeabi_fadd+0x120>
 80005c0:	2c00      	cmp	r4, #0
 80005c2:	d11b      	bne.n	80005fc <__aeabi_fadd+0x218>
 80005c4:	2d00      	cmp	r5, #0
 80005c6:	d16e      	bne.n	80006a6 <__aeabi_fadd+0x2c2>
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d100      	bne.n	80005ce <__aeabi_fadd+0x1ea>
 80005cc:	e09a      	b.n	8000704 <__aeabi_fadd+0x320>
 80005ce:	000a      	movs	r2, r1
 80005d0:	001d      	movs	r5, r3
 80005d2:	003c      	movs	r4, r7
 80005d4:	e724      	b.n	8000420 <__aeabi_fadd+0x3c>
 80005d6:	3f01      	subs	r7, #1
 80005d8:	2f00      	cmp	r7, #0
 80005da:	d100      	bne.n	80005de <__aeabi_fadd+0x1fa>
 80005dc:	e758      	b.n	8000490 <__aeabi_fadd+0xac>
 80005de:	2cff      	cmp	r4, #255	; 0xff
 80005e0:	d000      	beq.n	80005e4 <__aeabi_fadd+0x200>
 80005e2:	e74a      	b.n	800047a <__aeabi_fadd+0x96>
 80005e4:	e7a7      	b.n	8000536 <__aeabi_fadd+0x152>
 80005e6:	1b5e      	subs	r6, r3, r5
 80005e8:	4689      	mov	r9, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fadd+0xf6>
 80005ec:	2d00      	cmp	r5, #0
 80005ee:	d11c      	bne.n	800062a <__aeabi_fadd+0x246>
 80005f0:	000a      	movs	r2, r1
 80005f2:	28ff      	cmp	r0, #255	; 0xff
 80005f4:	d01f      	beq.n	8000636 <__aeabi_fadd+0x252>
 80005f6:	0004      	movs	r4, r0
 80005f8:	001d      	movs	r5, r3
 80005fa:	e711      	b.n	8000420 <__aeabi_fadd+0x3c>
 80005fc:	2d00      	cmp	r5, #0
 80005fe:	d15d      	bne.n	80006bc <__aeabi_fadd+0x2d8>
 8000600:	2b00      	cmp	r3, #0
 8000602:	d117      	bne.n	8000634 <__aeabi_fadd+0x250>
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	2200      	movs	r2, #0
 8000608:	03db      	lsls	r3, r3, #15
 800060a:	26ff      	movs	r6, #255	; 0xff
 800060c:	e70f      	b.n	800042e <__aeabi_fadd+0x4a>
 800060e:	000a      	movs	r2, r1
 8000610:	26ff      	movs	r6, #255	; 0xff
 8000612:	2300      	movs	r3, #0
 8000614:	e70b      	b.n	800042e <__aeabi_fadd+0x4a>
 8000616:	2c00      	cmp	r4, #0
 8000618:	d121      	bne.n	800065e <__aeabi_fadd+0x27a>
 800061a:	2d00      	cmp	r5, #0
 800061c:	d166      	bne.n	80006ec <__aeabi_fadd+0x308>
 800061e:	28ff      	cmp	r0, #255	; 0xff
 8000620:	d1e9      	bne.n	80005f6 <__aeabi_fadd+0x212>
 8000622:	001d      	movs	r5, r3
 8000624:	e787      	b.n	8000536 <__aeabi_fadd+0x152>
 8000626:	2301      	movs	r3, #1
 8000628:	e752      	b.n	80004d0 <__aeabi_fadd+0xec>
 800062a:	1c7a      	adds	r2, r7, #1
 800062c:	d0a7      	beq.n	800057e <__aeabi_fadd+0x19a>
 800062e:	43fa      	mvns	r2, r7
 8000630:	28ff      	cmp	r0, #255	; 0xff
 8000632:	d199      	bne.n	8000568 <__aeabi_fadd+0x184>
 8000634:	000a      	movs	r2, r1
 8000636:	001d      	movs	r5, r3
 8000638:	24ff      	movs	r4, #255	; 0xff
 800063a:	e6f1      	b.n	8000420 <__aeabi_fadd+0x3c>
 800063c:	2e00      	cmp	r6, #0
 800063e:	d121      	bne.n	8000684 <__aeabi_fadd+0x2a0>
 8000640:	2d00      	cmp	r5, #0
 8000642:	d04f      	beq.n	80006e4 <__aeabi_fadd+0x300>
 8000644:	2b00      	cmp	r3, #0
 8000646:	d04c      	beq.n	80006e2 <__aeabi_fadd+0x2fe>
 8000648:	18ed      	adds	r5, r5, r3
 800064a:	016b      	lsls	r3, r5, #5
 800064c:	d59e      	bpl.n	800058c <__aeabi_fadd+0x1a8>
 800064e:	4b31      	ldr	r3, [pc, #196]	; (8000714 <__aeabi_fadd+0x330>)
 8000650:	3607      	adds	r6, #7
 8000652:	402e      	ands	r6, r5
 8000654:	2401      	movs	r4, #1
 8000656:	401d      	ands	r5, r3
 8000658:	e754      	b.n	8000504 <__aeabi_fadd+0x120>
 800065a:	2301      	movs	r3, #1
 800065c:	e718      	b.n	8000490 <__aeabi_fadd+0xac>
 800065e:	28ff      	cmp	r0, #255	; 0xff
 8000660:	d0df      	beq.n	8000622 <__aeabi_fadd+0x23e>
 8000662:	2480      	movs	r4, #128	; 0x80
 8000664:	04e4      	lsls	r4, r4, #19
 8000666:	427f      	negs	r7, r7
 8000668:	4325      	orrs	r5, r4
 800066a:	2f1b      	cmp	r7, #27
 800066c:	dc4d      	bgt.n	800070a <__aeabi_fadd+0x326>
 800066e:	2620      	movs	r6, #32
 8000670:	1bf6      	subs	r6, r6, r7
 8000672:	002c      	movs	r4, r5
 8000674:	40b5      	lsls	r5, r6
 8000676:	40fc      	lsrs	r4, r7
 8000678:	1e6a      	subs	r2, r5, #1
 800067a:	4195      	sbcs	r5, r2
 800067c:	4325      	orrs	r5, r4
 800067e:	18ed      	adds	r5, r5, r3
 8000680:	0004      	movs	r4, r0
 8000682:	e706      	b.n	8000492 <__aeabi_fadd+0xae>
 8000684:	2d00      	cmp	r5, #0
 8000686:	d0cc      	beq.n	8000622 <__aeabi_fadd+0x23e>
 8000688:	2b00      	cmp	r3, #0
 800068a:	d100      	bne.n	800068e <__aeabi_fadd+0x2aa>
 800068c:	e753      	b.n	8000536 <__aeabi_fadd+0x152>
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	4660      	mov	r0, ip
 8000692:	03c9      	lsls	r1, r1, #15
 8000694:	4208      	tst	r0, r1
 8000696:	d003      	beq.n	80006a0 <__aeabi_fadd+0x2bc>
 8000698:	4640      	mov	r0, r8
 800069a:	4208      	tst	r0, r1
 800069c:	d100      	bne.n	80006a0 <__aeabi_fadd+0x2bc>
 800069e:	001d      	movs	r5, r3
 80006a0:	2101      	movs	r1, #1
 80006a2:	4011      	ands	r1, r2
 80006a4:	e747      	b.n	8000536 <__aeabi_fadd+0x152>
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d100      	bne.n	80006ac <__aeabi_fadd+0x2c8>
 80006aa:	e6b9      	b.n	8000420 <__aeabi_fadd+0x3c>
 80006ac:	1aea      	subs	r2, r5, r3
 80006ae:	0150      	lsls	r0, r2, #5
 80006b0:	d525      	bpl.n	80006fe <__aeabi_fadd+0x31a>
 80006b2:	2607      	movs	r6, #7
 80006b4:	1b5d      	subs	r5, r3, r5
 80006b6:	402e      	ands	r6, r5
 80006b8:	4689      	mov	r9, r1
 80006ba:	e723      	b.n	8000504 <__aeabi_fadd+0x120>
 80006bc:	24ff      	movs	r4, #255	; 0xff
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fadd+0x2e0>
 80006c2:	e6ad      	b.n	8000420 <__aeabi_fadd+0x3c>
 80006c4:	2280      	movs	r2, #128	; 0x80
 80006c6:	4660      	mov	r0, ip
 80006c8:	03d2      	lsls	r2, r2, #15
 80006ca:	4210      	tst	r0, r2
 80006cc:	d004      	beq.n	80006d8 <__aeabi_fadd+0x2f4>
 80006ce:	4640      	mov	r0, r8
 80006d0:	4210      	tst	r0, r2
 80006d2:	d101      	bne.n	80006d8 <__aeabi_fadd+0x2f4>
 80006d4:	001d      	movs	r5, r3
 80006d6:	4689      	mov	r9, r1
 80006d8:	2201      	movs	r2, #1
 80006da:	464b      	mov	r3, r9
 80006dc:	24ff      	movs	r4, #255	; 0xff
 80006de:	401a      	ands	r2, r3
 80006e0:	e69e      	b.n	8000420 <__aeabi_fadd+0x3c>
 80006e2:	002b      	movs	r3, r5
 80006e4:	08dd      	lsrs	r5, r3, #3
 80006e6:	000a      	movs	r2, r1
 80006e8:	2400      	movs	r4, #0
 80006ea:	e69d      	b.n	8000428 <__aeabi_fadd+0x44>
 80006ec:	1c7a      	adds	r2, r7, #1
 80006ee:	d0c6      	beq.n	800067e <__aeabi_fadd+0x29a>
 80006f0:	43ff      	mvns	r7, r7
 80006f2:	28ff      	cmp	r0, #255	; 0xff
 80006f4:	d1b9      	bne.n	800066a <__aeabi_fadd+0x286>
 80006f6:	001d      	movs	r5, r3
 80006f8:	e71d      	b.n	8000536 <__aeabi_fadd+0x152>
 80006fa:	2501      	movs	r5, #1
 80006fc:	e73f      	b.n	800057e <__aeabi_fadd+0x19a>
 80006fe:	1e15      	subs	r5, r2, #0
 8000700:	d000      	beq.n	8000704 <__aeabi_fadd+0x320>
 8000702:	e744      	b.n	800058e <__aeabi_fadd+0x1aa>
 8000704:	2200      	movs	r2, #0
 8000706:	2300      	movs	r3, #0
 8000708:	e691      	b.n	800042e <__aeabi_fadd+0x4a>
 800070a:	2501      	movs	r5, #1
 800070c:	e7b7      	b.n	800067e <__aeabi_fadd+0x29a>
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	7dffffff 	.word	0x7dffffff
 8000714:	fbffffff 	.word	0xfbffffff

08000718 <__aeabi_fdiv>:
 8000718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800071a:	4657      	mov	r7, sl
 800071c:	464e      	mov	r6, r9
 800071e:	4645      	mov	r5, r8
 8000720:	46de      	mov	lr, fp
 8000722:	0244      	lsls	r4, r0, #9
 8000724:	b5e0      	push	{r5, r6, r7, lr}
 8000726:	0046      	lsls	r6, r0, #1
 8000728:	4688      	mov	r8, r1
 800072a:	0a64      	lsrs	r4, r4, #9
 800072c:	0e36      	lsrs	r6, r6, #24
 800072e:	0fc7      	lsrs	r7, r0, #31
 8000730:	2e00      	cmp	r6, #0
 8000732:	d063      	beq.n	80007fc <__aeabi_fdiv+0xe4>
 8000734:	2eff      	cmp	r6, #255	; 0xff
 8000736:	d024      	beq.n	8000782 <__aeabi_fdiv+0x6a>
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	00e4      	lsls	r4, r4, #3
 800073c:	04db      	lsls	r3, r3, #19
 800073e:	431c      	orrs	r4, r3
 8000740:	2300      	movs	r3, #0
 8000742:	4699      	mov	r9, r3
 8000744:	469b      	mov	fp, r3
 8000746:	3e7f      	subs	r6, #127	; 0x7f
 8000748:	4643      	mov	r3, r8
 800074a:	4642      	mov	r2, r8
 800074c:	025d      	lsls	r5, r3, #9
 800074e:	0fd2      	lsrs	r2, r2, #31
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	0a6d      	lsrs	r5, r5, #9
 8000754:	0e1b      	lsrs	r3, r3, #24
 8000756:	4690      	mov	r8, r2
 8000758:	4692      	mov	sl, r2
 800075a:	d065      	beq.n	8000828 <__aeabi_fdiv+0x110>
 800075c:	2bff      	cmp	r3, #255	; 0xff
 800075e:	d055      	beq.n	800080c <__aeabi_fdiv+0xf4>
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	2100      	movs	r1, #0
 8000764:	00ed      	lsls	r5, r5, #3
 8000766:	04d2      	lsls	r2, r2, #19
 8000768:	3b7f      	subs	r3, #127	; 0x7f
 800076a:	4315      	orrs	r5, r2
 800076c:	1af6      	subs	r6, r6, r3
 800076e:	4643      	mov	r3, r8
 8000770:	464a      	mov	r2, r9
 8000772:	407b      	eors	r3, r7
 8000774:	2a0f      	cmp	r2, #15
 8000776:	d900      	bls.n	800077a <__aeabi_fdiv+0x62>
 8000778:	e08d      	b.n	8000896 <__aeabi_fdiv+0x17e>
 800077a:	486d      	ldr	r0, [pc, #436]	; (8000930 <__aeabi_fdiv+0x218>)
 800077c:	0092      	lsls	r2, r2, #2
 800077e:	5882      	ldr	r2, [r0, r2]
 8000780:	4697      	mov	pc, r2
 8000782:	2c00      	cmp	r4, #0
 8000784:	d154      	bne.n	8000830 <__aeabi_fdiv+0x118>
 8000786:	2308      	movs	r3, #8
 8000788:	4699      	mov	r9, r3
 800078a:	3b06      	subs	r3, #6
 800078c:	26ff      	movs	r6, #255	; 0xff
 800078e:	469b      	mov	fp, r3
 8000790:	e7da      	b.n	8000748 <__aeabi_fdiv+0x30>
 8000792:	2500      	movs	r5, #0
 8000794:	4653      	mov	r3, sl
 8000796:	2902      	cmp	r1, #2
 8000798:	d01b      	beq.n	80007d2 <__aeabi_fdiv+0xba>
 800079a:	2903      	cmp	r1, #3
 800079c:	d100      	bne.n	80007a0 <__aeabi_fdiv+0x88>
 800079e:	e0bf      	b.n	8000920 <__aeabi_fdiv+0x208>
 80007a0:	2901      	cmp	r1, #1
 80007a2:	d028      	beq.n	80007f6 <__aeabi_fdiv+0xde>
 80007a4:	0030      	movs	r0, r6
 80007a6:	307f      	adds	r0, #127	; 0x7f
 80007a8:	2800      	cmp	r0, #0
 80007aa:	dd20      	ble.n	80007ee <__aeabi_fdiv+0xd6>
 80007ac:	076a      	lsls	r2, r5, #29
 80007ae:	d004      	beq.n	80007ba <__aeabi_fdiv+0xa2>
 80007b0:	220f      	movs	r2, #15
 80007b2:	402a      	ands	r2, r5
 80007b4:	2a04      	cmp	r2, #4
 80007b6:	d000      	beq.n	80007ba <__aeabi_fdiv+0xa2>
 80007b8:	3504      	adds	r5, #4
 80007ba:	012a      	lsls	r2, r5, #4
 80007bc:	d503      	bpl.n	80007c6 <__aeabi_fdiv+0xae>
 80007be:	0030      	movs	r0, r6
 80007c0:	4a5c      	ldr	r2, [pc, #368]	; (8000934 <__aeabi_fdiv+0x21c>)
 80007c2:	3080      	adds	r0, #128	; 0x80
 80007c4:	4015      	ands	r5, r2
 80007c6:	28fe      	cmp	r0, #254	; 0xfe
 80007c8:	dc03      	bgt.n	80007d2 <__aeabi_fdiv+0xba>
 80007ca:	01ac      	lsls	r4, r5, #6
 80007cc:	0a64      	lsrs	r4, r4, #9
 80007ce:	b2c2      	uxtb	r2, r0
 80007d0:	e001      	b.n	80007d6 <__aeabi_fdiv+0xbe>
 80007d2:	22ff      	movs	r2, #255	; 0xff
 80007d4:	2400      	movs	r4, #0
 80007d6:	0264      	lsls	r4, r4, #9
 80007d8:	05d2      	lsls	r2, r2, #23
 80007da:	0a60      	lsrs	r0, r4, #9
 80007dc:	07db      	lsls	r3, r3, #31
 80007de:	4310      	orrs	r0, r2
 80007e0:	4318      	orrs	r0, r3
 80007e2:	bc3c      	pop	{r2, r3, r4, r5}
 80007e4:	4690      	mov	r8, r2
 80007e6:	4699      	mov	r9, r3
 80007e8:	46a2      	mov	sl, r4
 80007ea:	46ab      	mov	fp, r5
 80007ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ee:	2201      	movs	r2, #1
 80007f0:	1a10      	subs	r0, r2, r0
 80007f2:	281b      	cmp	r0, #27
 80007f4:	dd7c      	ble.n	80008f0 <__aeabi_fdiv+0x1d8>
 80007f6:	2200      	movs	r2, #0
 80007f8:	2400      	movs	r4, #0
 80007fa:	e7ec      	b.n	80007d6 <__aeabi_fdiv+0xbe>
 80007fc:	2c00      	cmp	r4, #0
 80007fe:	d11d      	bne.n	800083c <__aeabi_fdiv+0x124>
 8000800:	2304      	movs	r3, #4
 8000802:	4699      	mov	r9, r3
 8000804:	3b03      	subs	r3, #3
 8000806:	2600      	movs	r6, #0
 8000808:	469b      	mov	fp, r3
 800080a:	e79d      	b.n	8000748 <__aeabi_fdiv+0x30>
 800080c:	3eff      	subs	r6, #255	; 0xff
 800080e:	2d00      	cmp	r5, #0
 8000810:	d120      	bne.n	8000854 <__aeabi_fdiv+0x13c>
 8000812:	2102      	movs	r1, #2
 8000814:	4643      	mov	r3, r8
 8000816:	464a      	mov	r2, r9
 8000818:	407b      	eors	r3, r7
 800081a:	430a      	orrs	r2, r1
 800081c:	2a0f      	cmp	r2, #15
 800081e:	d8d8      	bhi.n	80007d2 <__aeabi_fdiv+0xba>
 8000820:	4845      	ldr	r0, [pc, #276]	; (8000938 <__aeabi_fdiv+0x220>)
 8000822:	0092      	lsls	r2, r2, #2
 8000824:	5882      	ldr	r2, [r0, r2]
 8000826:	4697      	mov	pc, r2
 8000828:	2d00      	cmp	r5, #0
 800082a:	d119      	bne.n	8000860 <__aeabi_fdiv+0x148>
 800082c:	2101      	movs	r1, #1
 800082e:	e7f1      	b.n	8000814 <__aeabi_fdiv+0xfc>
 8000830:	230c      	movs	r3, #12
 8000832:	4699      	mov	r9, r3
 8000834:	3b09      	subs	r3, #9
 8000836:	26ff      	movs	r6, #255	; 0xff
 8000838:	469b      	mov	fp, r3
 800083a:	e785      	b.n	8000748 <__aeabi_fdiv+0x30>
 800083c:	0020      	movs	r0, r4
 800083e:	f000 ff4d 	bl	80016dc <__clzsi2>
 8000842:	2676      	movs	r6, #118	; 0x76
 8000844:	1f43      	subs	r3, r0, #5
 8000846:	409c      	lsls	r4, r3
 8000848:	2300      	movs	r3, #0
 800084a:	4276      	negs	r6, r6
 800084c:	1a36      	subs	r6, r6, r0
 800084e:	4699      	mov	r9, r3
 8000850:	469b      	mov	fp, r3
 8000852:	e779      	b.n	8000748 <__aeabi_fdiv+0x30>
 8000854:	464a      	mov	r2, r9
 8000856:	2303      	movs	r3, #3
 8000858:	431a      	orrs	r2, r3
 800085a:	4691      	mov	r9, r2
 800085c:	2103      	movs	r1, #3
 800085e:	e786      	b.n	800076e <__aeabi_fdiv+0x56>
 8000860:	0028      	movs	r0, r5
 8000862:	f000 ff3b 	bl	80016dc <__clzsi2>
 8000866:	1f43      	subs	r3, r0, #5
 8000868:	1836      	adds	r6, r6, r0
 800086a:	409d      	lsls	r5, r3
 800086c:	3676      	adds	r6, #118	; 0x76
 800086e:	2100      	movs	r1, #0
 8000870:	e77d      	b.n	800076e <__aeabi_fdiv+0x56>
 8000872:	2480      	movs	r4, #128	; 0x80
 8000874:	2300      	movs	r3, #0
 8000876:	03e4      	lsls	r4, r4, #15
 8000878:	22ff      	movs	r2, #255	; 0xff
 800087a:	e7ac      	b.n	80007d6 <__aeabi_fdiv+0xbe>
 800087c:	2500      	movs	r5, #0
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	03db      	lsls	r3, r3, #15
 8000882:	421c      	tst	r4, r3
 8000884:	d028      	beq.n	80008d8 <__aeabi_fdiv+0x1c0>
 8000886:	421d      	tst	r5, r3
 8000888:	d126      	bne.n	80008d8 <__aeabi_fdiv+0x1c0>
 800088a:	432b      	orrs	r3, r5
 800088c:	025c      	lsls	r4, r3, #9
 800088e:	0a64      	lsrs	r4, r4, #9
 8000890:	4643      	mov	r3, r8
 8000892:	22ff      	movs	r2, #255	; 0xff
 8000894:	e79f      	b.n	80007d6 <__aeabi_fdiv+0xbe>
 8000896:	0162      	lsls	r2, r4, #5
 8000898:	016c      	lsls	r4, r5, #5
 800089a:	42a2      	cmp	r2, r4
 800089c:	d224      	bcs.n	80008e8 <__aeabi_fdiv+0x1d0>
 800089e:	211b      	movs	r1, #27
 80008a0:	2500      	movs	r5, #0
 80008a2:	3e01      	subs	r6, #1
 80008a4:	2701      	movs	r7, #1
 80008a6:	0010      	movs	r0, r2
 80008a8:	006d      	lsls	r5, r5, #1
 80008aa:	0052      	lsls	r2, r2, #1
 80008ac:	2800      	cmp	r0, #0
 80008ae:	db01      	blt.n	80008b4 <__aeabi_fdiv+0x19c>
 80008b0:	4294      	cmp	r4, r2
 80008b2:	d801      	bhi.n	80008b8 <__aeabi_fdiv+0x1a0>
 80008b4:	1b12      	subs	r2, r2, r4
 80008b6:	433d      	orrs	r5, r7
 80008b8:	3901      	subs	r1, #1
 80008ba:	2900      	cmp	r1, #0
 80008bc:	d1f3      	bne.n	80008a6 <__aeabi_fdiv+0x18e>
 80008be:	0014      	movs	r4, r2
 80008c0:	1e62      	subs	r2, r4, #1
 80008c2:	4194      	sbcs	r4, r2
 80008c4:	4325      	orrs	r5, r4
 80008c6:	e76d      	b.n	80007a4 <__aeabi_fdiv+0x8c>
 80008c8:	46ba      	mov	sl, r7
 80008ca:	4659      	mov	r1, fp
 80008cc:	0025      	movs	r5, r4
 80008ce:	4653      	mov	r3, sl
 80008d0:	2902      	cmp	r1, #2
 80008d2:	d000      	beq.n	80008d6 <__aeabi_fdiv+0x1be>
 80008d4:	e761      	b.n	800079a <__aeabi_fdiv+0x82>
 80008d6:	e77c      	b.n	80007d2 <__aeabi_fdiv+0xba>
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	03db      	lsls	r3, r3, #15
 80008dc:	431c      	orrs	r4, r3
 80008de:	0264      	lsls	r4, r4, #9
 80008e0:	0a64      	lsrs	r4, r4, #9
 80008e2:	003b      	movs	r3, r7
 80008e4:	22ff      	movs	r2, #255	; 0xff
 80008e6:	e776      	b.n	80007d6 <__aeabi_fdiv+0xbe>
 80008e8:	1b12      	subs	r2, r2, r4
 80008ea:	211a      	movs	r1, #26
 80008ec:	2501      	movs	r5, #1
 80008ee:	e7d9      	b.n	80008a4 <__aeabi_fdiv+0x18c>
 80008f0:	369e      	adds	r6, #158	; 0x9e
 80008f2:	002a      	movs	r2, r5
 80008f4:	40b5      	lsls	r5, r6
 80008f6:	002c      	movs	r4, r5
 80008f8:	40c2      	lsrs	r2, r0
 80008fa:	1e65      	subs	r5, r4, #1
 80008fc:	41ac      	sbcs	r4, r5
 80008fe:	4314      	orrs	r4, r2
 8000900:	0762      	lsls	r2, r4, #29
 8000902:	d004      	beq.n	800090e <__aeabi_fdiv+0x1f6>
 8000904:	220f      	movs	r2, #15
 8000906:	4022      	ands	r2, r4
 8000908:	2a04      	cmp	r2, #4
 800090a:	d000      	beq.n	800090e <__aeabi_fdiv+0x1f6>
 800090c:	3404      	adds	r4, #4
 800090e:	0162      	lsls	r2, r4, #5
 8000910:	d403      	bmi.n	800091a <__aeabi_fdiv+0x202>
 8000912:	01a4      	lsls	r4, r4, #6
 8000914:	0a64      	lsrs	r4, r4, #9
 8000916:	2200      	movs	r2, #0
 8000918:	e75d      	b.n	80007d6 <__aeabi_fdiv+0xbe>
 800091a:	2201      	movs	r2, #1
 800091c:	2400      	movs	r4, #0
 800091e:	e75a      	b.n	80007d6 <__aeabi_fdiv+0xbe>
 8000920:	2480      	movs	r4, #128	; 0x80
 8000922:	03e4      	lsls	r4, r4, #15
 8000924:	432c      	orrs	r4, r5
 8000926:	0264      	lsls	r4, r4, #9
 8000928:	0a64      	lsrs	r4, r4, #9
 800092a:	22ff      	movs	r2, #255	; 0xff
 800092c:	e753      	b.n	80007d6 <__aeabi_fdiv+0xbe>
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	08004e28 	.word	0x08004e28
 8000934:	f7ffffff 	.word	0xf7ffffff
 8000938:	08004e68 	.word	0x08004e68

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f000 fe07 	bl	80016dc <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f000 fdf3 	bl	80016dc <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	08004ea8 	.word	0x08004ea8
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f000 fd6b 	bl	80016dc <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_i2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	d03d      	beq.n	8000fea <__aeabi_i2f+0x82>
 8000f6e:	17c3      	asrs	r3, r0, #31
 8000f70:	18c5      	adds	r5, r0, r3
 8000f72:	405d      	eors	r5, r3
 8000f74:	0fc4      	lsrs	r4, r0, #31
 8000f76:	0028      	movs	r0, r5
 8000f78:	f000 fbb0 	bl	80016dc <__clzsi2>
 8000f7c:	229e      	movs	r2, #158	; 0x9e
 8000f7e:	1a12      	subs	r2, r2, r0
 8000f80:	2a96      	cmp	r2, #150	; 0x96
 8000f82:	dc07      	bgt.n	8000f94 <__aeabi_i2f+0x2c>
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	2808      	cmp	r0, #8
 8000f88:	dd33      	ble.n	8000ff2 <__aeabi_i2f+0x8a>
 8000f8a:	3808      	subs	r0, #8
 8000f8c:	4085      	lsls	r5, r0
 8000f8e:	0268      	lsls	r0, r5, #9
 8000f90:	0a40      	lsrs	r0, r0, #9
 8000f92:	e023      	b.n	8000fdc <__aeabi_i2f+0x74>
 8000f94:	2a99      	cmp	r2, #153	; 0x99
 8000f96:	dd0b      	ble.n	8000fb0 <__aeabi_i2f+0x48>
 8000f98:	2305      	movs	r3, #5
 8000f9a:	0029      	movs	r1, r5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40d9      	lsrs	r1, r3
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	331b      	adds	r3, #27
 8000fa4:	409d      	lsls	r5, r3
 8000fa6:	002b      	movs	r3, r5
 8000fa8:	1e5d      	subs	r5, r3, #1
 8000faa:	41ab      	sbcs	r3, r5
 8000fac:	4319      	orrs	r1, r3
 8000fae:	000d      	movs	r5, r1
 8000fb0:	2805      	cmp	r0, #5
 8000fb2:	dd01      	ble.n	8000fb8 <__aeabi_i2f+0x50>
 8000fb4:	1f43      	subs	r3, r0, #5
 8000fb6:	409d      	lsls	r5, r3
 8000fb8:	002b      	movs	r3, r5
 8000fba:	490f      	ldr	r1, [pc, #60]	; (8000ff8 <__aeabi_i2f+0x90>)
 8000fbc:	400b      	ands	r3, r1
 8000fbe:	076e      	lsls	r6, r5, #29
 8000fc0:	d009      	beq.n	8000fd6 <__aeabi_i2f+0x6e>
 8000fc2:	260f      	movs	r6, #15
 8000fc4:	4035      	ands	r5, r6
 8000fc6:	2d04      	cmp	r5, #4
 8000fc8:	d005      	beq.n	8000fd6 <__aeabi_i2f+0x6e>
 8000fca:	3304      	adds	r3, #4
 8000fcc:	015d      	lsls	r5, r3, #5
 8000fce:	d502      	bpl.n	8000fd6 <__aeabi_i2f+0x6e>
 8000fd0:	229f      	movs	r2, #159	; 0x9f
 8000fd2:	400b      	ands	r3, r1
 8000fd4:	1a12      	subs	r2, r2, r0
 8000fd6:	019b      	lsls	r3, r3, #6
 8000fd8:	0a58      	lsrs	r0, r3, #9
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	0240      	lsls	r0, r0, #9
 8000fde:	05d2      	lsls	r2, r2, #23
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	07e4      	lsls	r4, r4, #31
 8000fe4:	4310      	orrs	r0, r2
 8000fe6:	4320      	orrs	r0, r4
 8000fe8:	bd70      	pop	{r4, r5, r6, pc}
 8000fea:	2400      	movs	r4, #0
 8000fec:	2200      	movs	r2, #0
 8000fee:	2000      	movs	r0, #0
 8000ff0:	e7f4      	b.n	8000fdc <__aeabi_i2f+0x74>
 8000ff2:	0268      	lsls	r0, r5, #9
 8000ff4:	0a40      	lsrs	r0, r0, #9
 8000ff6:	e7f1      	b.n	8000fdc <__aeabi_i2f+0x74>
 8000ff8:	fbffffff 	.word	0xfbffffff

08000ffc <__aeabi_ui2f>:
 8000ffc:	b570      	push	{r4, r5, r6, lr}
 8000ffe:	1e04      	subs	r4, r0, #0
 8001000:	d034      	beq.n	800106c <__aeabi_ui2f+0x70>
 8001002:	f000 fb6b 	bl	80016dc <__clzsi2>
 8001006:	229e      	movs	r2, #158	; 0x9e
 8001008:	1a12      	subs	r2, r2, r0
 800100a:	2a96      	cmp	r2, #150	; 0x96
 800100c:	dc07      	bgt.n	800101e <__aeabi_ui2f+0x22>
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	2808      	cmp	r0, #8
 8001012:	dd2e      	ble.n	8001072 <__aeabi_ui2f+0x76>
 8001014:	3808      	subs	r0, #8
 8001016:	4084      	lsls	r4, r0
 8001018:	0260      	lsls	r0, r4, #9
 800101a:	0a40      	lsrs	r0, r0, #9
 800101c:	e021      	b.n	8001062 <__aeabi_ui2f+0x66>
 800101e:	2a99      	cmp	r2, #153	; 0x99
 8001020:	dd09      	ble.n	8001036 <__aeabi_ui2f+0x3a>
 8001022:	0003      	movs	r3, r0
 8001024:	0021      	movs	r1, r4
 8001026:	331b      	adds	r3, #27
 8001028:	4099      	lsls	r1, r3
 800102a:	1e4b      	subs	r3, r1, #1
 800102c:	4199      	sbcs	r1, r3
 800102e:	2305      	movs	r3, #5
 8001030:	1a1b      	subs	r3, r3, r0
 8001032:	40dc      	lsrs	r4, r3
 8001034:	430c      	orrs	r4, r1
 8001036:	2805      	cmp	r0, #5
 8001038:	dd01      	ble.n	800103e <__aeabi_ui2f+0x42>
 800103a:	1f43      	subs	r3, r0, #5
 800103c:	409c      	lsls	r4, r3
 800103e:	0023      	movs	r3, r4
 8001040:	490d      	ldr	r1, [pc, #52]	; (8001078 <__aeabi_ui2f+0x7c>)
 8001042:	400b      	ands	r3, r1
 8001044:	0765      	lsls	r5, r4, #29
 8001046:	d009      	beq.n	800105c <__aeabi_ui2f+0x60>
 8001048:	250f      	movs	r5, #15
 800104a:	402c      	ands	r4, r5
 800104c:	2c04      	cmp	r4, #4
 800104e:	d005      	beq.n	800105c <__aeabi_ui2f+0x60>
 8001050:	3304      	adds	r3, #4
 8001052:	015c      	lsls	r4, r3, #5
 8001054:	d502      	bpl.n	800105c <__aeabi_ui2f+0x60>
 8001056:	229f      	movs	r2, #159	; 0x9f
 8001058:	400b      	ands	r3, r1
 800105a:	1a12      	subs	r2, r2, r0
 800105c:	019b      	lsls	r3, r3, #6
 800105e:	0a58      	lsrs	r0, r3, #9
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	0240      	lsls	r0, r0, #9
 8001064:	05d2      	lsls	r2, r2, #23
 8001066:	0a40      	lsrs	r0, r0, #9
 8001068:	4310      	orrs	r0, r2
 800106a:	bd70      	pop	{r4, r5, r6, pc}
 800106c:	2200      	movs	r2, #0
 800106e:	2000      	movs	r0, #0
 8001070:	e7f7      	b.n	8001062 <__aeabi_ui2f+0x66>
 8001072:	0260      	lsls	r0, r4, #9
 8001074:	0a40      	lsrs	r0, r0, #9
 8001076:	e7f4      	b.n	8001062 <__aeabi_ui2f+0x66>
 8001078:	fbffffff 	.word	0xfbffffff

0800107c <__aeabi_dmul>:
 800107c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107e:	4657      	mov	r7, sl
 8001080:	46de      	mov	lr, fp
 8001082:	464e      	mov	r6, r9
 8001084:	4645      	mov	r5, r8
 8001086:	b5e0      	push	{r5, r6, r7, lr}
 8001088:	4683      	mov	fp, r0
 800108a:	0006      	movs	r6, r0
 800108c:	030f      	lsls	r7, r1, #12
 800108e:	0048      	lsls	r0, r1, #1
 8001090:	b087      	sub	sp, #28
 8001092:	4692      	mov	sl, r2
 8001094:	001d      	movs	r5, r3
 8001096:	0b3f      	lsrs	r7, r7, #12
 8001098:	0d40      	lsrs	r0, r0, #21
 800109a:	0fcc      	lsrs	r4, r1, #31
 800109c:	2800      	cmp	r0, #0
 800109e:	d100      	bne.n	80010a2 <__aeabi_dmul+0x26>
 80010a0:	e06f      	b.n	8001182 <__aeabi_dmul+0x106>
 80010a2:	4bde      	ldr	r3, [pc, #888]	; (800141c <__aeabi_dmul+0x3a0>)
 80010a4:	4298      	cmp	r0, r3
 80010a6:	d038      	beq.n	800111a <__aeabi_dmul+0x9e>
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	00ff      	lsls	r7, r7, #3
 80010ac:	041b      	lsls	r3, r3, #16
 80010ae:	431f      	orrs	r7, r3
 80010b0:	0f73      	lsrs	r3, r6, #29
 80010b2:	433b      	orrs	r3, r7
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	4bda      	ldr	r3, [pc, #872]	; (8001420 <__aeabi_dmul+0x3a4>)
 80010b8:	2700      	movs	r7, #0
 80010ba:	4699      	mov	r9, r3
 80010bc:	2300      	movs	r3, #0
 80010be:	469b      	mov	fp, r3
 80010c0:	00f6      	lsls	r6, r6, #3
 80010c2:	4481      	add	r9, r0
 80010c4:	032b      	lsls	r3, r5, #12
 80010c6:	0069      	lsls	r1, r5, #1
 80010c8:	0b1b      	lsrs	r3, r3, #12
 80010ca:	4652      	mov	r2, sl
 80010cc:	4698      	mov	r8, r3
 80010ce:	0d49      	lsrs	r1, r1, #21
 80010d0:	0fed      	lsrs	r5, r5, #31
 80010d2:	2900      	cmp	r1, #0
 80010d4:	d100      	bne.n	80010d8 <__aeabi_dmul+0x5c>
 80010d6:	e085      	b.n	80011e4 <__aeabi_dmul+0x168>
 80010d8:	4bd0      	ldr	r3, [pc, #832]	; (800141c <__aeabi_dmul+0x3a0>)
 80010da:	4299      	cmp	r1, r3
 80010dc:	d100      	bne.n	80010e0 <__aeabi_dmul+0x64>
 80010de:	e073      	b.n	80011c8 <__aeabi_dmul+0x14c>
 80010e0:	4643      	mov	r3, r8
 80010e2:	00da      	lsls	r2, r3, #3
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	041b      	lsls	r3, r3, #16
 80010e8:	4313      	orrs	r3, r2
 80010ea:	4652      	mov	r2, sl
 80010ec:	48cc      	ldr	r0, [pc, #816]	; (8001420 <__aeabi_dmul+0x3a4>)
 80010ee:	0f52      	lsrs	r2, r2, #29
 80010f0:	4684      	mov	ip, r0
 80010f2:	4313      	orrs	r3, r2
 80010f4:	4652      	mov	r2, sl
 80010f6:	2000      	movs	r0, #0
 80010f8:	4461      	add	r1, ip
 80010fa:	00d2      	lsls	r2, r2, #3
 80010fc:	4489      	add	r9, r1
 80010fe:	0021      	movs	r1, r4
 8001100:	4069      	eors	r1, r5
 8001102:	9100      	str	r1, [sp, #0]
 8001104:	468c      	mov	ip, r1
 8001106:	2101      	movs	r1, #1
 8001108:	4449      	add	r1, r9
 800110a:	468a      	mov	sl, r1
 800110c:	2f0f      	cmp	r7, #15
 800110e:	d900      	bls.n	8001112 <__aeabi_dmul+0x96>
 8001110:	e090      	b.n	8001234 <__aeabi_dmul+0x1b8>
 8001112:	49c4      	ldr	r1, [pc, #784]	; (8001424 <__aeabi_dmul+0x3a8>)
 8001114:	00bf      	lsls	r7, r7, #2
 8001116:	59cf      	ldr	r7, [r1, r7]
 8001118:	46bf      	mov	pc, r7
 800111a:	465b      	mov	r3, fp
 800111c:	433b      	orrs	r3, r7
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	d000      	beq.n	8001124 <__aeabi_dmul+0xa8>
 8001122:	e16a      	b.n	80013fa <__aeabi_dmul+0x37e>
 8001124:	2302      	movs	r3, #2
 8001126:	2708      	movs	r7, #8
 8001128:	2600      	movs	r6, #0
 800112a:	4681      	mov	r9, r0
 800112c:	469b      	mov	fp, r3
 800112e:	e7c9      	b.n	80010c4 <__aeabi_dmul+0x48>
 8001130:	0032      	movs	r2, r6
 8001132:	4658      	mov	r0, fp
 8001134:	9b01      	ldr	r3, [sp, #4]
 8001136:	4661      	mov	r1, ip
 8001138:	9100      	str	r1, [sp, #0]
 800113a:	2802      	cmp	r0, #2
 800113c:	d100      	bne.n	8001140 <__aeabi_dmul+0xc4>
 800113e:	e075      	b.n	800122c <__aeabi_dmul+0x1b0>
 8001140:	2803      	cmp	r0, #3
 8001142:	d100      	bne.n	8001146 <__aeabi_dmul+0xca>
 8001144:	e1fe      	b.n	8001544 <__aeabi_dmul+0x4c8>
 8001146:	2801      	cmp	r0, #1
 8001148:	d000      	beq.n	800114c <__aeabi_dmul+0xd0>
 800114a:	e12c      	b.n	80013a6 <__aeabi_dmul+0x32a>
 800114c:	2300      	movs	r3, #0
 800114e:	2700      	movs	r7, #0
 8001150:	2600      	movs	r6, #0
 8001152:	2500      	movs	r5, #0
 8001154:	033f      	lsls	r7, r7, #12
 8001156:	0d2a      	lsrs	r2, r5, #20
 8001158:	0b3f      	lsrs	r7, r7, #12
 800115a:	48b3      	ldr	r0, [pc, #716]	; (8001428 <__aeabi_dmul+0x3ac>)
 800115c:	0512      	lsls	r2, r2, #20
 800115e:	433a      	orrs	r2, r7
 8001160:	4002      	ands	r2, r0
 8001162:	051b      	lsls	r3, r3, #20
 8001164:	4313      	orrs	r3, r2
 8001166:	9a00      	ldr	r2, [sp, #0]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	07d1      	lsls	r1, r2, #31
 800116c:	085b      	lsrs	r3, r3, #1
 800116e:	430b      	orrs	r3, r1
 8001170:	0030      	movs	r0, r6
 8001172:	0019      	movs	r1, r3
 8001174:	b007      	add	sp, #28
 8001176:	bc3c      	pop	{r2, r3, r4, r5}
 8001178:	4690      	mov	r8, r2
 800117a:	4699      	mov	r9, r3
 800117c:	46a2      	mov	sl, r4
 800117e:	46ab      	mov	fp, r5
 8001180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001182:	465b      	mov	r3, fp
 8001184:	433b      	orrs	r3, r7
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	d100      	bne.n	800118c <__aeabi_dmul+0x110>
 800118a:	e12f      	b.n	80013ec <__aeabi_dmul+0x370>
 800118c:	2f00      	cmp	r7, #0
 800118e:	d100      	bne.n	8001192 <__aeabi_dmul+0x116>
 8001190:	e1a5      	b.n	80014de <__aeabi_dmul+0x462>
 8001192:	0038      	movs	r0, r7
 8001194:	f000 faa2 	bl	80016dc <__clzsi2>
 8001198:	0003      	movs	r3, r0
 800119a:	3b0b      	subs	r3, #11
 800119c:	2b1c      	cmp	r3, #28
 800119e:	dd00      	ble.n	80011a2 <__aeabi_dmul+0x126>
 80011a0:	e196      	b.n	80014d0 <__aeabi_dmul+0x454>
 80011a2:	221d      	movs	r2, #29
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	465a      	mov	r2, fp
 80011a8:	0001      	movs	r1, r0
 80011aa:	40da      	lsrs	r2, r3
 80011ac:	465e      	mov	r6, fp
 80011ae:	3908      	subs	r1, #8
 80011b0:	408f      	lsls	r7, r1
 80011b2:	0013      	movs	r3, r2
 80011b4:	408e      	lsls	r6, r1
 80011b6:	433b      	orrs	r3, r7
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	4b9c      	ldr	r3, [pc, #624]	; (800142c <__aeabi_dmul+0x3b0>)
 80011bc:	2700      	movs	r7, #0
 80011be:	1a1b      	subs	r3, r3, r0
 80011c0:	4699      	mov	r9, r3
 80011c2:	2300      	movs	r3, #0
 80011c4:	469b      	mov	fp, r3
 80011c6:	e77d      	b.n	80010c4 <__aeabi_dmul+0x48>
 80011c8:	4641      	mov	r1, r8
 80011ca:	4653      	mov	r3, sl
 80011cc:	430b      	orrs	r3, r1
 80011ce:	4993      	ldr	r1, [pc, #588]	; (800141c <__aeabi_dmul+0x3a0>)
 80011d0:	468c      	mov	ip, r1
 80011d2:	44e1      	add	r9, ip
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d000      	beq.n	80011da <__aeabi_dmul+0x15e>
 80011d8:	e11a      	b.n	8001410 <__aeabi_dmul+0x394>
 80011da:	2202      	movs	r2, #2
 80011dc:	2002      	movs	r0, #2
 80011de:	4317      	orrs	r7, r2
 80011e0:	2200      	movs	r2, #0
 80011e2:	e78c      	b.n	80010fe <__aeabi_dmul+0x82>
 80011e4:	4313      	orrs	r3, r2
 80011e6:	d100      	bne.n	80011ea <__aeabi_dmul+0x16e>
 80011e8:	e10d      	b.n	8001406 <__aeabi_dmul+0x38a>
 80011ea:	4643      	mov	r3, r8
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d100      	bne.n	80011f2 <__aeabi_dmul+0x176>
 80011f0:	e181      	b.n	80014f6 <__aeabi_dmul+0x47a>
 80011f2:	4640      	mov	r0, r8
 80011f4:	f000 fa72 	bl	80016dc <__clzsi2>
 80011f8:	0002      	movs	r2, r0
 80011fa:	3a0b      	subs	r2, #11
 80011fc:	2a1c      	cmp	r2, #28
 80011fe:	dd00      	ble.n	8001202 <__aeabi_dmul+0x186>
 8001200:	e172      	b.n	80014e8 <__aeabi_dmul+0x46c>
 8001202:	0001      	movs	r1, r0
 8001204:	4643      	mov	r3, r8
 8001206:	3908      	subs	r1, #8
 8001208:	408b      	lsls	r3, r1
 800120a:	4698      	mov	r8, r3
 800120c:	231d      	movs	r3, #29
 800120e:	1a9a      	subs	r2, r3, r2
 8001210:	4653      	mov	r3, sl
 8001212:	40d3      	lsrs	r3, r2
 8001214:	001a      	movs	r2, r3
 8001216:	4643      	mov	r3, r8
 8001218:	4313      	orrs	r3, r2
 800121a:	4652      	mov	r2, sl
 800121c:	408a      	lsls	r2, r1
 800121e:	4649      	mov	r1, r9
 8001220:	1a08      	subs	r0, r1, r0
 8001222:	4982      	ldr	r1, [pc, #520]	; (800142c <__aeabi_dmul+0x3b0>)
 8001224:	4689      	mov	r9, r1
 8001226:	4481      	add	r9, r0
 8001228:	2000      	movs	r0, #0
 800122a:	e768      	b.n	80010fe <__aeabi_dmul+0x82>
 800122c:	4b7b      	ldr	r3, [pc, #492]	; (800141c <__aeabi_dmul+0x3a0>)
 800122e:	2700      	movs	r7, #0
 8001230:	2600      	movs	r6, #0
 8001232:	e78e      	b.n	8001152 <__aeabi_dmul+0xd6>
 8001234:	0c14      	lsrs	r4, r2, #16
 8001236:	0412      	lsls	r2, r2, #16
 8001238:	0c12      	lsrs	r2, r2, #16
 800123a:	0011      	movs	r1, r2
 800123c:	0c37      	lsrs	r7, r6, #16
 800123e:	0436      	lsls	r6, r6, #16
 8001240:	0c35      	lsrs	r5, r6, #16
 8001242:	4379      	muls	r1, r7
 8001244:	0028      	movs	r0, r5
 8001246:	468c      	mov	ip, r1
 8001248:	002e      	movs	r6, r5
 800124a:	4360      	muls	r0, r4
 800124c:	4460      	add	r0, ip
 800124e:	4683      	mov	fp, r0
 8001250:	4356      	muls	r6, r2
 8001252:	0021      	movs	r1, r4
 8001254:	0c30      	lsrs	r0, r6, #16
 8001256:	4680      	mov	r8, r0
 8001258:	4658      	mov	r0, fp
 800125a:	4379      	muls	r1, r7
 800125c:	4440      	add	r0, r8
 800125e:	9102      	str	r1, [sp, #8]
 8001260:	4584      	cmp	ip, r0
 8001262:	d906      	bls.n	8001272 <__aeabi_dmul+0x1f6>
 8001264:	4688      	mov	r8, r1
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	0249      	lsls	r1, r1, #9
 800126a:	468c      	mov	ip, r1
 800126c:	44e0      	add	r8, ip
 800126e:	4641      	mov	r1, r8
 8001270:	9102      	str	r1, [sp, #8]
 8001272:	0436      	lsls	r6, r6, #16
 8001274:	0c01      	lsrs	r1, r0, #16
 8001276:	0c36      	lsrs	r6, r6, #16
 8001278:	0400      	lsls	r0, r0, #16
 800127a:	468b      	mov	fp, r1
 800127c:	1981      	adds	r1, r0, r6
 800127e:	0c1e      	lsrs	r6, r3, #16
 8001280:	041b      	lsls	r3, r3, #16
 8001282:	0c1b      	lsrs	r3, r3, #16
 8001284:	9103      	str	r1, [sp, #12]
 8001286:	0019      	movs	r1, r3
 8001288:	4379      	muls	r1, r7
 800128a:	468c      	mov	ip, r1
 800128c:	0028      	movs	r0, r5
 800128e:	4375      	muls	r5, r6
 8001290:	4465      	add	r5, ip
 8001292:	46a8      	mov	r8, r5
 8001294:	4358      	muls	r0, r3
 8001296:	0c05      	lsrs	r5, r0, #16
 8001298:	4445      	add	r5, r8
 800129a:	4377      	muls	r7, r6
 800129c:	42a9      	cmp	r1, r5
 800129e:	d903      	bls.n	80012a8 <__aeabi_dmul+0x22c>
 80012a0:	2180      	movs	r1, #128	; 0x80
 80012a2:	0249      	lsls	r1, r1, #9
 80012a4:	468c      	mov	ip, r1
 80012a6:	4467      	add	r7, ip
 80012a8:	0c29      	lsrs	r1, r5, #16
 80012aa:	468c      	mov	ip, r1
 80012ac:	0039      	movs	r1, r7
 80012ae:	0400      	lsls	r0, r0, #16
 80012b0:	0c00      	lsrs	r0, r0, #16
 80012b2:	042d      	lsls	r5, r5, #16
 80012b4:	182d      	adds	r5, r5, r0
 80012b6:	4461      	add	r1, ip
 80012b8:	44ab      	add	fp, r5
 80012ba:	9105      	str	r1, [sp, #20]
 80012bc:	4659      	mov	r1, fp
 80012be:	9104      	str	r1, [sp, #16]
 80012c0:	9901      	ldr	r1, [sp, #4]
 80012c2:	040f      	lsls	r7, r1, #16
 80012c4:	0c3f      	lsrs	r7, r7, #16
 80012c6:	0c08      	lsrs	r0, r1, #16
 80012c8:	0039      	movs	r1, r7
 80012ca:	4351      	muls	r1, r2
 80012cc:	4342      	muls	r2, r0
 80012ce:	4690      	mov	r8, r2
 80012d0:	0002      	movs	r2, r0
 80012d2:	468c      	mov	ip, r1
 80012d4:	0c09      	lsrs	r1, r1, #16
 80012d6:	468b      	mov	fp, r1
 80012d8:	4362      	muls	r2, r4
 80012da:	437c      	muls	r4, r7
 80012dc:	4444      	add	r4, r8
 80012de:	445c      	add	r4, fp
 80012e0:	45a0      	cmp	r8, r4
 80012e2:	d903      	bls.n	80012ec <__aeabi_dmul+0x270>
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	0249      	lsls	r1, r1, #9
 80012e8:	4688      	mov	r8, r1
 80012ea:	4442      	add	r2, r8
 80012ec:	0c21      	lsrs	r1, r4, #16
 80012ee:	4688      	mov	r8, r1
 80012f0:	4661      	mov	r1, ip
 80012f2:	0409      	lsls	r1, r1, #16
 80012f4:	0c09      	lsrs	r1, r1, #16
 80012f6:	468c      	mov	ip, r1
 80012f8:	0039      	movs	r1, r7
 80012fa:	4359      	muls	r1, r3
 80012fc:	4343      	muls	r3, r0
 80012fe:	4370      	muls	r0, r6
 8001300:	437e      	muls	r6, r7
 8001302:	0c0f      	lsrs	r7, r1, #16
 8001304:	18f6      	adds	r6, r6, r3
 8001306:	0424      	lsls	r4, r4, #16
 8001308:	19be      	adds	r6, r7, r6
 800130a:	4464      	add	r4, ip
 800130c:	4442      	add	r2, r8
 800130e:	468c      	mov	ip, r1
 8001310:	42b3      	cmp	r3, r6
 8001312:	d903      	bls.n	800131c <__aeabi_dmul+0x2a0>
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	025b      	lsls	r3, r3, #9
 8001318:	4698      	mov	r8, r3
 800131a:	4440      	add	r0, r8
 800131c:	9b02      	ldr	r3, [sp, #8]
 800131e:	4661      	mov	r1, ip
 8001320:	4698      	mov	r8, r3
 8001322:	9b04      	ldr	r3, [sp, #16]
 8001324:	0437      	lsls	r7, r6, #16
 8001326:	4443      	add	r3, r8
 8001328:	469b      	mov	fp, r3
 800132a:	45ab      	cmp	fp, r5
 800132c:	41ad      	sbcs	r5, r5
 800132e:	426b      	negs	r3, r5
 8001330:	040d      	lsls	r5, r1, #16
 8001332:	9905      	ldr	r1, [sp, #20]
 8001334:	0c2d      	lsrs	r5, r5, #16
 8001336:	468c      	mov	ip, r1
 8001338:	197f      	adds	r7, r7, r5
 800133a:	4467      	add	r7, ip
 800133c:	18fd      	adds	r5, r7, r3
 800133e:	46a8      	mov	r8, r5
 8001340:	465d      	mov	r5, fp
 8001342:	192d      	adds	r5, r5, r4
 8001344:	42a5      	cmp	r5, r4
 8001346:	41a4      	sbcs	r4, r4
 8001348:	4693      	mov	fp, r2
 800134a:	4264      	negs	r4, r4
 800134c:	46a4      	mov	ip, r4
 800134e:	44c3      	add	fp, r8
 8001350:	44dc      	add	ip, fp
 8001352:	428f      	cmp	r7, r1
 8001354:	41bf      	sbcs	r7, r7
 8001356:	4598      	cmp	r8, r3
 8001358:	419b      	sbcs	r3, r3
 800135a:	4593      	cmp	fp, r2
 800135c:	4192      	sbcs	r2, r2
 800135e:	45a4      	cmp	ip, r4
 8001360:	41a4      	sbcs	r4, r4
 8001362:	425b      	negs	r3, r3
 8001364:	427f      	negs	r7, r7
 8001366:	431f      	orrs	r7, r3
 8001368:	0c36      	lsrs	r6, r6, #16
 800136a:	4252      	negs	r2, r2
 800136c:	4264      	negs	r4, r4
 800136e:	19bf      	adds	r7, r7, r6
 8001370:	4322      	orrs	r2, r4
 8001372:	18bf      	adds	r7, r7, r2
 8001374:	4662      	mov	r2, ip
 8001376:	1838      	adds	r0, r7, r0
 8001378:	0243      	lsls	r3, r0, #9
 800137a:	0dd2      	lsrs	r2, r2, #23
 800137c:	9903      	ldr	r1, [sp, #12]
 800137e:	4313      	orrs	r3, r2
 8001380:	026a      	lsls	r2, r5, #9
 8001382:	430a      	orrs	r2, r1
 8001384:	1e50      	subs	r0, r2, #1
 8001386:	4182      	sbcs	r2, r0
 8001388:	4661      	mov	r1, ip
 800138a:	0ded      	lsrs	r5, r5, #23
 800138c:	432a      	orrs	r2, r5
 800138e:	024e      	lsls	r6, r1, #9
 8001390:	4332      	orrs	r2, r6
 8001392:	01d9      	lsls	r1, r3, #7
 8001394:	d400      	bmi.n	8001398 <__aeabi_dmul+0x31c>
 8001396:	e0b3      	b.n	8001500 <__aeabi_dmul+0x484>
 8001398:	2601      	movs	r6, #1
 800139a:	0850      	lsrs	r0, r2, #1
 800139c:	4032      	ands	r2, r6
 800139e:	4302      	orrs	r2, r0
 80013a0:	07de      	lsls	r6, r3, #31
 80013a2:	4332      	orrs	r2, r6
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	4c22      	ldr	r4, [pc, #136]	; (8001430 <__aeabi_dmul+0x3b4>)
 80013a8:	4454      	add	r4, sl
 80013aa:	2c00      	cmp	r4, #0
 80013ac:	dd62      	ble.n	8001474 <__aeabi_dmul+0x3f8>
 80013ae:	0751      	lsls	r1, r2, #29
 80013b0:	d009      	beq.n	80013c6 <__aeabi_dmul+0x34a>
 80013b2:	200f      	movs	r0, #15
 80013b4:	4010      	ands	r0, r2
 80013b6:	2804      	cmp	r0, #4
 80013b8:	d005      	beq.n	80013c6 <__aeabi_dmul+0x34a>
 80013ba:	1d10      	adds	r0, r2, #4
 80013bc:	4290      	cmp	r0, r2
 80013be:	4192      	sbcs	r2, r2
 80013c0:	4252      	negs	r2, r2
 80013c2:	189b      	adds	r3, r3, r2
 80013c4:	0002      	movs	r2, r0
 80013c6:	01d9      	lsls	r1, r3, #7
 80013c8:	d504      	bpl.n	80013d4 <__aeabi_dmul+0x358>
 80013ca:	2480      	movs	r4, #128	; 0x80
 80013cc:	4819      	ldr	r0, [pc, #100]	; (8001434 <__aeabi_dmul+0x3b8>)
 80013ce:	00e4      	lsls	r4, r4, #3
 80013d0:	4003      	ands	r3, r0
 80013d2:	4454      	add	r4, sl
 80013d4:	4818      	ldr	r0, [pc, #96]	; (8001438 <__aeabi_dmul+0x3bc>)
 80013d6:	4284      	cmp	r4, r0
 80013d8:	dd00      	ble.n	80013dc <__aeabi_dmul+0x360>
 80013da:	e727      	b.n	800122c <__aeabi_dmul+0x1b0>
 80013dc:	075e      	lsls	r6, r3, #29
 80013de:	025b      	lsls	r3, r3, #9
 80013e0:	08d2      	lsrs	r2, r2, #3
 80013e2:	0b1f      	lsrs	r7, r3, #12
 80013e4:	0563      	lsls	r3, r4, #21
 80013e6:	4316      	orrs	r6, r2
 80013e8:	0d5b      	lsrs	r3, r3, #21
 80013ea:	e6b2      	b.n	8001152 <__aeabi_dmul+0xd6>
 80013ec:	2300      	movs	r3, #0
 80013ee:	4699      	mov	r9, r3
 80013f0:	3301      	adds	r3, #1
 80013f2:	2704      	movs	r7, #4
 80013f4:	2600      	movs	r6, #0
 80013f6:	469b      	mov	fp, r3
 80013f8:	e664      	b.n	80010c4 <__aeabi_dmul+0x48>
 80013fa:	2303      	movs	r3, #3
 80013fc:	9701      	str	r7, [sp, #4]
 80013fe:	4681      	mov	r9, r0
 8001400:	270c      	movs	r7, #12
 8001402:	469b      	mov	fp, r3
 8001404:	e65e      	b.n	80010c4 <__aeabi_dmul+0x48>
 8001406:	2201      	movs	r2, #1
 8001408:	2001      	movs	r0, #1
 800140a:	4317      	orrs	r7, r2
 800140c:	2200      	movs	r2, #0
 800140e:	e676      	b.n	80010fe <__aeabi_dmul+0x82>
 8001410:	2303      	movs	r3, #3
 8001412:	2003      	movs	r0, #3
 8001414:	431f      	orrs	r7, r3
 8001416:	4643      	mov	r3, r8
 8001418:	e671      	b.n	80010fe <__aeabi_dmul+0x82>
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	000007ff 	.word	0x000007ff
 8001420:	fffffc01 	.word	0xfffffc01
 8001424:	08004ee8 	.word	0x08004ee8
 8001428:	800fffff 	.word	0x800fffff
 800142c:	fffffc0d 	.word	0xfffffc0d
 8001430:	000003ff 	.word	0x000003ff
 8001434:	feffffff 	.word	0xfeffffff
 8001438:	000007fe 	.word	0x000007fe
 800143c:	2300      	movs	r3, #0
 800143e:	2780      	movs	r7, #128	; 0x80
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	033f      	lsls	r7, r7, #12
 8001444:	2600      	movs	r6, #0
 8001446:	4b43      	ldr	r3, [pc, #268]	; (8001554 <__aeabi_dmul+0x4d8>)
 8001448:	e683      	b.n	8001152 <__aeabi_dmul+0xd6>
 800144a:	9b01      	ldr	r3, [sp, #4]
 800144c:	0032      	movs	r2, r6
 800144e:	46a4      	mov	ip, r4
 8001450:	4658      	mov	r0, fp
 8001452:	e670      	b.n	8001136 <__aeabi_dmul+0xba>
 8001454:	46ac      	mov	ip, r5
 8001456:	e66e      	b.n	8001136 <__aeabi_dmul+0xba>
 8001458:	2780      	movs	r7, #128	; 0x80
 800145a:	9901      	ldr	r1, [sp, #4]
 800145c:	033f      	lsls	r7, r7, #12
 800145e:	4239      	tst	r1, r7
 8001460:	d02d      	beq.n	80014be <__aeabi_dmul+0x442>
 8001462:	423b      	tst	r3, r7
 8001464:	d12b      	bne.n	80014be <__aeabi_dmul+0x442>
 8001466:	431f      	orrs	r7, r3
 8001468:	033f      	lsls	r7, r7, #12
 800146a:	0b3f      	lsrs	r7, r7, #12
 800146c:	9500      	str	r5, [sp, #0]
 800146e:	0016      	movs	r6, r2
 8001470:	4b38      	ldr	r3, [pc, #224]	; (8001554 <__aeabi_dmul+0x4d8>)
 8001472:	e66e      	b.n	8001152 <__aeabi_dmul+0xd6>
 8001474:	2501      	movs	r5, #1
 8001476:	1b2d      	subs	r5, r5, r4
 8001478:	2d38      	cmp	r5, #56	; 0x38
 800147a:	dd00      	ble.n	800147e <__aeabi_dmul+0x402>
 800147c:	e666      	b.n	800114c <__aeabi_dmul+0xd0>
 800147e:	2d1f      	cmp	r5, #31
 8001480:	dc40      	bgt.n	8001504 <__aeabi_dmul+0x488>
 8001482:	4835      	ldr	r0, [pc, #212]	; (8001558 <__aeabi_dmul+0x4dc>)
 8001484:	001c      	movs	r4, r3
 8001486:	4450      	add	r0, sl
 8001488:	0016      	movs	r6, r2
 800148a:	4082      	lsls	r2, r0
 800148c:	4084      	lsls	r4, r0
 800148e:	40ee      	lsrs	r6, r5
 8001490:	1e50      	subs	r0, r2, #1
 8001492:	4182      	sbcs	r2, r0
 8001494:	4334      	orrs	r4, r6
 8001496:	4314      	orrs	r4, r2
 8001498:	40eb      	lsrs	r3, r5
 800149a:	0762      	lsls	r2, r4, #29
 800149c:	d009      	beq.n	80014b2 <__aeabi_dmul+0x436>
 800149e:	220f      	movs	r2, #15
 80014a0:	4022      	ands	r2, r4
 80014a2:	2a04      	cmp	r2, #4
 80014a4:	d005      	beq.n	80014b2 <__aeabi_dmul+0x436>
 80014a6:	0022      	movs	r2, r4
 80014a8:	1d14      	adds	r4, r2, #4
 80014aa:	4294      	cmp	r4, r2
 80014ac:	4180      	sbcs	r0, r0
 80014ae:	4240      	negs	r0, r0
 80014b0:	181b      	adds	r3, r3, r0
 80014b2:	021a      	lsls	r2, r3, #8
 80014b4:	d53e      	bpl.n	8001534 <__aeabi_dmul+0x4b8>
 80014b6:	2301      	movs	r3, #1
 80014b8:	2700      	movs	r7, #0
 80014ba:	2600      	movs	r6, #0
 80014bc:	e649      	b.n	8001152 <__aeabi_dmul+0xd6>
 80014be:	2780      	movs	r7, #128	; 0x80
 80014c0:	9b01      	ldr	r3, [sp, #4]
 80014c2:	033f      	lsls	r7, r7, #12
 80014c4:	431f      	orrs	r7, r3
 80014c6:	033f      	lsls	r7, r7, #12
 80014c8:	0b3f      	lsrs	r7, r7, #12
 80014ca:	9400      	str	r4, [sp, #0]
 80014cc:	4b21      	ldr	r3, [pc, #132]	; (8001554 <__aeabi_dmul+0x4d8>)
 80014ce:	e640      	b.n	8001152 <__aeabi_dmul+0xd6>
 80014d0:	0003      	movs	r3, r0
 80014d2:	465a      	mov	r2, fp
 80014d4:	3b28      	subs	r3, #40	; 0x28
 80014d6:	409a      	lsls	r2, r3
 80014d8:	2600      	movs	r6, #0
 80014da:	9201      	str	r2, [sp, #4]
 80014dc:	e66d      	b.n	80011ba <__aeabi_dmul+0x13e>
 80014de:	4658      	mov	r0, fp
 80014e0:	f000 f8fc 	bl	80016dc <__clzsi2>
 80014e4:	3020      	adds	r0, #32
 80014e6:	e657      	b.n	8001198 <__aeabi_dmul+0x11c>
 80014e8:	0003      	movs	r3, r0
 80014ea:	4652      	mov	r2, sl
 80014ec:	3b28      	subs	r3, #40	; 0x28
 80014ee:	409a      	lsls	r2, r3
 80014f0:	0013      	movs	r3, r2
 80014f2:	2200      	movs	r2, #0
 80014f4:	e693      	b.n	800121e <__aeabi_dmul+0x1a2>
 80014f6:	4650      	mov	r0, sl
 80014f8:	f000 f8f0 	bl	80016dc <__clzsi2>
 80014fc:	3020      	adds	r0, #32
 80014fe:	e67b      	b.n	80011f8 <__aeabi_dmul+0x17c>
 8001500:	46ca      	mov	sl, r9
 8001502:	e750      	b.n	80013a6 <__aeabi_dmul+0x32a>
 8001504:	201f      	movs	r0, #31
 8001506:	001e      	movs	r6, r3
 8001508:	4240      	negs	r0, r0
 800150a:	1b04      	subs	r4, r0, r4
 800150c:	40e6      	lsrs	r6, r4
 800150e:	2d20      	cmp	r5, #32
 8001510:	d003      	beq.n	800151a <__aeabi_dmul+0x49e>
 8001512:	4c12      	ldr	r4, [pc, #72]	; (800155c <__aeabi_dmul+0x4e0>)
 8001514:	4454      	add	r4, sl
 8001516:	40a3      	lsls	r3, r4
 8001518:	431a      	orrs	r2, r3
 800151a:	1e50      	subs	r0, r2, #1
 800151c:	4182      	sbcs	r2, r0
 800151e:	4332      	orrs	r2, r6
 8001520:	2607      	movs	r6, #7
 8001522:	2700      	movs	r7, #0
 8001524:	4016      	ands	r6, r2
 8001526:	d009      	beq.n	800153c <__aeabi_dmul+0x4c0>
 8001528:	200f      	movs	r0, #15
 800152a:	2300      	movs	r3, #0
 800152c:	4010      	ands	r0, r2
 800152e:	0014      	movs	r4, r2
 8001530:	2804      	cmp	r0, #4
 8001532:	d1b9      	bne.n	80014a8 <__aeabi_dmul+0x42c>
 8001534:	0022      	movs	r2, r4
 8001536:	075e      	lsls	r6, r3, #29
 8001538:	025b      	lsls	r3, r3, #9
 800153a:	0b1f      	lsrs	r7, r3, #12
 800153c:	08d2      	lsrs	r2, r2, #3
 800153e:	4316      	orrs	r6, r2
 8001540:	2300      	movs	r3, #0
 8001542:	e606      	b.n	8001152 <__aeabi_dmul+0xd6>
 8001544:	2780      	movs	r7, #128	; 0x80
 8001546:	033f      	lsls	r7, r7, #12
 8001548:	431f      	orrs	r7, r3
 800154a:	033f      	lsls	r7, r7, #12
 800154c:	0b3f      	lsrs	r7, r7, #12
 800154e:	0016      	movs	r6, r2
 8001550:	4b00      	ldr	r3, [pc, #0]	; (8001554 <__aeabi_dmul+0x4d8>)
 8001552:	e5fe      	b.n	8001152 <__aeabi_dmul+0xd6>
 8001554:	000007ff 	.word	0x000007ff
 8001558:	0000041e 	.word	0x0000041e
 800155c:	0000043e 	.word	0x0000043e

08001560 <__aeabi_i2d>:
 8001560:	b570      	push	{r4, r5, r6, lr}
 8001562:	2800      	cmp	r0, #0
 8001564:	d02d      	beq.n	80015c2 <__aeabi_i2d+0x62>
 8001566:	17c3      	asrs	r3, r0, #31
 8001568:	18c5      	adds	r5, r0, r3
 800156a:	405d      	eors	r5, r3
 800156c:	0fc4      	lsrs	r4, r0, #31
 800156e:	0028      	movs	r0, r5
 8001570:	f000 f8b4 	bl	80016dc <__clzsi2>
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <__aeabi_i2d+0x6c>)
 8001576:	1a1b      	subs	r3, r3, r0
 8001578:	055b      	lsls	r3, r3, #21
 800157a:	0d5b      	lsrs	r3, r3, #21
 800157c:	280a      	cmp	r0, #10
 800157e:	dd15      	ble.n	80015ac <__aeabi_i2d+0x4c>
 8001580:	380b      	subs	r0, #11
 8001582:	4085      	lsls	r5, r0
 8001584:	2200      	movs	r2, #0
 8001586:	032d      	lsls	r5, r5, #12
 8001588:	0b2d      	lsrs	r5, r5, #12
 800158a:	2100      	movs	r1, #0
 800158c:	0010      	movs	r0, r2
 800158e:	032d      	lsls	r5, r5, #12
 8001590:	0d0a      	lsrs	r2, r1, #20
 8001592:	0b2d      	lsrs	r5, r5, #12
 8001594:	0512      	lsls	r2, r2, #20
 8001596:	432a      	orrs	r2, r5
 8001598:	4d0d      	ldr	r5, [pc, #52]	; (80015d0 <__aeabi_i2d+0x70>)
 800159a:	051b      	lsls	r3, r3, #20
 800159c:	402a      	ands	r2, r5
 800159e:	4313      	orrs	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	07e4      	lsls	r4, r4, #31
 80015a4:	085b      	lsrs	r3, r3, #1
 80015a6:	4323      	orrs	r3, r4
 80015a8:	0019      	movs	r1, r3
 80015aa:	bd70      	pop	{r4, r5, r6, pc}
 80015ac:	0002      	movs	r2, r0
 80015ae:	0029      	movs	r1, r5
 80015b0:	3215      	adds	r2, #21
 80015b2:	4091      	lsls	r1, r2
 80015b4:	000a      	movs	r2, r1
 80015b6:	210b      	movs	r1, #11
 80015b8:	1a08      	subs	r0, r1, r0
 80015ba:	40c5      	lsrs	r5, r0
 80015bc:	032d      	lsls	r5, r5, #12
 80015be:	0b2d      	lsrs	r5, r5, #12
 80015c0:	e7e3      	b.n	800158a <__aeabi_i2d+0x2a>
 80015c2:	2400      	movs	r4, #0
 80015c4:	2300      	movs	r3, #0
 80015c6:	2500      	movs	r5, #0
 80015c8:	2200      	movs	r2, #0
 80015ca:	e7de      	b.n	800158a <__aeabi_i2d+0x2a>
 80015cc:	0000041e 	.word	0x0000041e
 80015d0:	800fffff 	.word	0x800fffff

080015d4 <__aeabi_d2f>:
 80015d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d6:	004c      	lsls	r4, r1, #1
 80015d8:	0d64      	lsrs	r4, r4, #21
 80015da:	030b      	lsls	r3, r1, #12
 80015dc:	1c62      	adds	r2, r4, #1
 80015de:	0a5b      	lsrs	r3, r3, #9
 80015e0:	0f46      	lsrs	r6, r0, #29
 80015e2:	0552      	lsls	r2, r2, #21
 80015e4:	0fc9      	lsrs	r1, r1, #31
 80015e6:	431e      	orrs	r6, r3
 80015e8:	00c5      	lsls	r5, r0, #3
 80015ea:	0d52      	lsrs	r2, r2, #21
 80015ec:	2a01      	cmp	r2, #1
 80015ee:	dd29      	ble.n	8001644 <__aeabi_d2f+0x70>
 80015f0:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <__aeabi_d2f+0xfc>)
 80015f2:	18e7      	adds	r7, r4, r3
 80015f4:	2ffe      	cmp	r7, #254	; 0xfe
 80015f6:	dc1c      	bgt.n	8001632 <__aeabi_d2f+0x5e>
 80015f8:	2f00      	cmp	r7, #0
 80015fa:	dd3b      	ble.n	8001674 <__aeabi_d2f+0xa0>
 80015fc:	0180      	lsls	r0, r0, #6
 80015fe:	1e43      	subs	r3, r0, #1
 8001600:	4198      	sbcs	r0, r3
 8001602:	2207      	movs	r2, #7
 8001604:	00f3      	lsls	r3, r6, #3
 8001606:	0f6d      	lsrs	r5, r5, #29
 8001608:	4303      	orrs	r3, r0
 800160a:	432b      	orrs	r3, r5
 800160c:	401a      	ands	r2, r3
 800160e:	2a00      	cmp	r2, #0
 8001610:	d004      	beq.n	800161c <__aeabi_d2f+0x48>
 8001612:	220f      	movs	r2, #15
 8001614:	401a      	ands	r2, r3
 8001616:	2a04      	cmp	r2, #4
 8001618:	d000      	beq.n	800161c <__aeabi_d2f+0x48>
 800161a:	3304      	adds	r3, #4
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	04d2      	lsls	r2, r2, #19
 8001620:	401a      	ands	r2, r3
 8001622:	d024      	beq.n	800166e <__aeabi_d2f+0x9a>
 8001624:	3701      	adds	r7, #1
 8001626:	b2fa      	uxtb	r2, r7
 8001628:	2fff      	cmp	r7, #255	; 0xff
 800162a:	d002      	beq.n	8001632 <__aeabi_d2f+0x5e>
 800162c:	019b      	lsls	r3, r3, #6
 800162e:	0a58      	lsrs	r0, r3, #9
 8001630:	e001      	b.n	8001636 <__aeabi_d2f+0x62>
 8001632:	22ff      	movs	r2, #255	; 0xff
 8001634:	2000      	movs	r0, #0
 8001636:	0240      	lsls	r0, r0, #9
 8001638:	05d2      	lsls	r2, r2, #23
 800163a:	0a40      	lsrs	r0, r0, #9
 800163c:	07c9      	lsls	r1, r1, #31
 800163e:	4310      	orrs	r0, r2
 8001640:	4308      	orrs	r0, r1
 8001642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001644:	4335      	orrs	r5, r6
 8001646:	2c00      	cmp	r4, #0
 8001648:	d104      	bne.n	8001654 <__aeabi_d2f+0x80>
 800164a:	2d00      	cmp	r5, #0
 800164c:	d10a      	bne.n	8001664 <__aeabi_d2f+0x90>
 800164e:	2200      	movs	r2, #0
 8001650:	2000      	movs	r0, #0
 8001652:	e7f0      	b.n	8001636 <__aeabi_d2f+0x62>
 8001654:	2d00      	cmp	r5, #0
 8001656:	d0ec      	beq.n	8001632 <__aeabi_d2f+0x5e>
 8001658:	2080      	movs	r0, #128	; 0x80
 800165a:	03c0      	lsls	r0, r0, #15
 800165c:	4330      	orrs	r0, r6
 800165e:	22ff      	movs	r2, #255	; 0xff
 8001660:	e7e9      	b.n	8001636 <__aeabi_d2f+0x62>
 8001662:	2400      	movs	r4, #0
 8001664:	2300      	movs	r3, #0
 8001666:	025b      	lsls	r3, r3, #9
 8001668:	0a58      	lsrs	r0, r3, #9
 800166a:	b2e2      	uxtb	r2, r4
 800166c:	e7e3      	b.n	8001636 <__aeabi_d2f+0x62>
 800166e:	08db      	lsrs	r3, r3, #3
 8001670:	003c      	movs	r4, r7
 8001672:	e7f8      	b.n	8001666 <__aeabi_d2f+0x92>
 8001674:	003b      	movs	r3, r7
 8001676:	3317      	adds	r3, #23
 8001678:	dbf3      	blt.n	8001662 <__aeabi_d2f+0x8e>
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	4333      	orrs	r3, r6
 8001680:	261e      	movs	r6, #30
 8001682:	1bf6      	subs	r6, r6, r7
 8001684:	2e1f      	cmp	r6, #31
 8001686:	dd14      	ble.n	80016b2 <__aeabi_d2f+0xde>
 8001688:	2202      	movs	r2, #2
 800168a:	4252      	negs	r2, r2
 800168c:	1bd7      	subs	r7, r2, r7
 800168e:	001a      	movs	r2, r3
 8001690:	40fa      	lsrs	r2, r7
 8001692:	0017      	movs	r7, r2
 8001694:	2e20      	cmp	r6, #32
 8001696:	d004      	beq.n	80016a2 <__aeabi_d2f+0xce>
 8001698:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <__aeabi_d2f+0x100>)
 800169a:	4694      	mov	ip, r2
 800169c:	4464      	add	r4, ip
 800169e:	40a3      	lsls	r3, r4
 80016a0:	431d      	orrs	r5, r3
 80016a2:	002b      	movs	r3, r5
 80016a4:	1e5d      	subs	r5, r3, #1
 80016a6:	41ab      	sbcs	r3, r5
 80016a8:	2207      	movs	r2, #7
 80016aa:	433b      	orrs	r3, r7
 80016ac:	401a      	ands	r2, r3
 80016ae:	2700      	movs	r7, #0
 80016b0:	e7ad      	b.n	800160e <__aeabi_d2f+0x3a>
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <__aeabi_d2f+0x104>)
 80016b4:	0028      	movs	r0, r5
 80016b6:	18a2      	adds	r2, r4, r2
 80016b8:	4095      	lsls	r5, r2
 80016ba:	4093      	lsls	r3, r2
 80016bc:	1e6c      	subs	r4, r5, #1
 80016be:	41a5      	sbcs	r5, r4
 80016c0:	40f0      	lsrs	r0, r6
 80016c2:	2207      	movs	r2, #7
 80016c4:	432b      	orrs	r3, r5
 80016c6:	4303      	orrs	r3, r0
 80016c8:	401a      	ands	r2, r3
 80016ca:	2700      	movs	r7, #0
 80016cc:	e79f      	b.n	800160e <__aeabi_d2f+0x3a>
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	fffffc80 	.word	0xfffffc80
 80016d4:	fffffca2 	.word	0xfffffca2
 80016d8:	fffffc82 	.word	0xfffffc82

080016dc <__clzsi2>:
 80016dc:	211c      	movs	r1, #28
 80016de:	2301      	movs	r3, #1
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	4298      	cmp	r0, r3
 80016e4:	d301      	bcc.n	80016ea <__clzsi2+0xe>
 80016e6:	0c00      	lsrs	r0, r0, #16
 80016e8:	3910      	subs	r1, #16
 80016ea:	0a1b      	lsrs	r3, r3, #8
 80016ec:	4298      	cmp	r0, r3
 80016ee:	d301      	bcc.n	80016f4 <__clzsi2+0x18>
 80016f0:	0a00      	lsrs	r0, r0, #8
 80016f2:	3908      	subs	r1, #8
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	4298      	cmp	r0, r3
 80016f8:	d301      	bcc.n	80016fe <__clzsi2+0x22>
 80016fa:	0900      	lsrs	r0, r0, #4
 80016fc:	3904      	subs	r1, #4
 80016fe:	a202      	add	r2, pc, #8	; (adr r2, 8001708 <__clzsi2+0x2c>)
 8001700:	5c10      	ldrb	r0, [r2, r0]
 8001702:	1840      	adds	r0, r0, r1
 8001704:	4770      	bx	lr
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	02020304 	.word	0x02020304
 800170c:	01010101 	.word	0x01010101
	...

08001718 <__clzdi2>:
 8001718:	b510      	push	{r4, lr}
 800171a:	2900      	cmp	r1, #0
 800171c:	d103      	bne.n	8001726 <__clzdi2+0xe>
 800171e:	f7ff ffdd 	bl	80016dc <__clzsi2>
 8001722:	3020      	adds	r0, #32
 8001724:	e002      	b.n	800172c <__clzdi2+0x14>
 8001726:	1c08      	adds	r0, r1, #0
 8001728:	f7ff ffd8 	bl	80016dc <__clzsi2>
 800172c:	bd10      	pop	{r4, pc}
 800172e:	46c0      	nop			; (mov r8, r8)

08001730 <DrvSPIInit>:
//#include "vfu.h"

#include "DrvSPI.h"
#include "RegMap.h"

void DrvSPIInit() {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
  // read and store constants from EEPROM
  get_catalog_listing();
 8001736:	f000 fb81 	bl	8001e3c <get_catalog_listing>
  get_serial_number();
 800173a:	f000 fb71 	bl	8001e20 <get_serial_number>
  get_pressure_range();
 800173e:	f000 fb59 	bl	8001df4 <get_pressure_range>
  get_pressure_minimum();
 8001742:	f000 fb41 	bl	8001dc8 <get_pressure_minimum>
  get_pressure_unit();
 8001746:	f000 fac9 	bl	8001cdc <get_pressure_unit>
  get_pressure_type();
 800174a:	f000 fa8b 	bl	8001c64 <get_pressure_type>

  // setup ADC
  uint8_t adc_init_values[4];
  get_initial_adc_values(adc_init_values);
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	0018      	movs	r0, r3
 8001752:	f000 fa57 	bl	8001c04 <get_initial_adc_values>
  setup_adc(adc_init_values);
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	0018      	movs	r0, r3
 800175a:	f000 fa0d 	bl	8001b78 <setup_adc>

  get_coefficients();
 800175e:	f000 f9cb 	bl	8001af8 <get_coefficients>

  set_data_rate(N_DR_20_SPS);
 8001762:	2000      	movs	r0, #0
 8001764:	f000 f964 	bl	8001a30 <set_data_rate>
  set_mode(NORMAL_MODE);
 8001768:	2000      	movs	r0, #0
 800176a:	f000 f987 	bl	8001a7c <set_mode>
  HAL_Delay(5);
 800176e:	2005      	movs	r0, #5
 8001770:	f001 f880 	bl	8002874 <HAL_Delay>

}
 8001774:	46c0      	nop			; (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	b002      	add	sp, #8
 800177a:	bd80      	pop	{r7, pc}

0800177c <get_pressure>:

float get_pressure() {
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b08d      	sub	sp, #52	; 0x34
 8001780:	af00      	add	r7, sp, #0
  // reads uncompensated pressure from ADC, then use temperature reading to convert it to compensated pressure
  // refer to datasheet section 3.6 ADC Programming and Read Sequence – Pressure Reading

  // read the 24 bits uncompensated pressure
  uint8_t sec_arr[4]={0};
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
  adc_read(PRESSURE, sec_arr);
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	0019      	movs	r1, r3
 800178c:	2000      	movs	r0, #0
 800178e:	f000 fbf7 	bl	8001f80 <adc_read>


  uint32_t Justins_raw_Pressure = (sec_arr[1]<<8)|(sec_arr[2]);
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	785b      	ldrb	r3, [r3, #1]
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	1d3a      	adds	r2, r7, #4
 800179a:	7892      	ldrb	r2, [r2, #2]
 800179c:	4313      	orrs	r3, r2
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t p_raw = (sec_arr[1]<<16)|(sec_arr[2]<<8)|sec_arr[3];
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	785b      	ldrb	r3, [r3, #1]
 80017a4:	041a      	lsls	r2, r3, #16
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	789b      	ldrb	r3, [r3, #2]
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	4313      	orrs	r3, r2
 80017ae:	1d3a      	adds	r2, r7, #4
 80017b0:	78d2      	ldrb	r2, [r2, #3]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t t_raw = 25;
 80017b6:	2319      	movs	r3, #25
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  float x = (_coeff_matrix[0][3]*t_raw*t_raw*t_raw);
 80017ba:	4b83      	ldr	r3, [pc, #524]	; (80019c8 <get_pressure+0x24c>)
 80017bc:	68dc      	ldr	r4, [r3, #12]
 80017be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017c0:	f7ff fc1c 	bl	8000ffc <__aeabi_ui2f>
 80017c4:	1c03      	adds	r3, r0, #0
 80017c6:	1c19      	adds	r1, r3, #0
 80017c8:	1c20      	adds	r0, r4, #0
 80017ca:	f7ff f8b7 	bl	800093c <__aeabi_fmul>
 80017ce:	1c03      	adds	r3, r0, #0
 80017d0:	1c1c      	adds	r4, r3, #0
 80017d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017d4:	f7ff fc12 	bl	8000ffc <__aeabi_ui2f>
 80017d8:	1c03      	adds	r3, r0, #0
 80017da:	1c19      	adds	r1, r3, #0
 80017dc:	1c20      	adds	r0, r4, #0
 80017de:	f7ff f8ad 	bl	800093c <__aeabi_fmul>
 80017e2:	1c03      	adds	r3, r0, #0
 80017e4:	1c1c      	adds	r4, r3, #0
 80017e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017e8:	f7ff fc08 	bl	8000ffc <__aeabi_ui2f>
 80017ec:	1c03      	adds	r3, r0, #0
 80017ee:	1c19      	adds	r1, r3, #0
 80017f0:	1c20      	adds	r0, r4, #0
 80017f2:	f7ff f8a3 	bl	800093c <__aeabi_fmul>
 80017f6:	1c03      	adds	r3, r0, #0
 80017f8:	623b      	str	r3, [r7, #32]
  float y = (_coeff_matrix[0][2]*t_raw*t_raw);
 80017fa:	4b73      	ldr	r3, [pc, #460]	; (80019c8 <get_pressure+0x24c>)
 80017fc:	689c      	ldr	r4, [r3, #8]
 80017fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001800:	f7ff fbfc 	bl	8000ffc <__aeabi_ui2f>
 8001804:	1c03      	adds	r3, r0, #0
 8001806:	1c19      	adds	r1, r3, #0
 8001808:	1c20      	adds	r0, r4, #0
 800180a:	f7ff f897 	bl	800093c <__aeabi_fmul>
 800180e:	1c03      	adds	r3, r0, #0
 8001810:	1c1c      	adds	r4, r3, #0
 8001812:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001814:	f7ff fbf2 	bl	8000ffc <__aeabi_ui2f>
 8001818:	1c03      	adds	r3, r0, #0
 800181a:	1c19      	adds	r1, r3, #0
 800181c:	1c20      	adds	r0, r4, #0
 800181e:	f7ff f88d 	bl	800093c <__aeabi_fmul>
 8001822:	1c03      	adds	r3, r0, #0
 8001824:	61fb      	str	r3, [r7, #28]
  float z = (_coeff_matrix[0][1]*t_raw);
 8001826:	4b68      	ldr	r3, [pc, #416]	; (80019c8 <get_pressure+0x24c>)
 8001828:	685c      	ldr	r4, [r3, #4]
 800182a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800182c:	f7ff fbe6 	bl	8000ffc <__aeabi_ui2f>
 8001830:	1c03      	adds	r3, r0, #0
 8001832:	1c19      	adds	r1, r3, #0
 8001834:	1c20      	adds	r0, r4, #0
 8001836:	f7ff f881 	bl	800093c <__aeabi_fmul>
 800183a:	1c03      	adds	r3, r0, #0
 800183c:	61bb      	str	r3, [r7, #24]
  float p_int1 = p_raw - (x + y + z + _coeff_matrix[0][0]);
 800183e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001840:	f7ff fbdc 	bl	8000ffc <__aeabi_ui2f>
 8001844:	1c04      	adds	r4, r0, #0
 8001846:	69f9      	ldr	r1, [r7, #28]
 8001848:	6a38      	ldr	r0, [r7, #32]
 800184a:	f7fe fdcb 	bl	80003e4 <__aeabi_fadd>
 800184e:	1c03      	adds	r3, r0, #0
 8001850:	69b9      	ldr	r1, [r7, #24]
 8001852:	1c18      	adds	r0, r3, #0
 8001854:	f7fe fdc6 	bl	80003e4 <__aeabi_fadd>
 8001858:	1c03      	adds	r3, r0, #0
 800185a:	1c1a      	adds	r2, r3, #0
 800185c:	4b5a      	ldr	r3, [pc, #360]	; (80019c8 <get_pressure+0x24c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	1c19      	adds	r1, r3, #0
 8001862:	1c10      	adds	r0, r2, #0
 8001864:	f7fe fdbe 	bl	80003e4 <__aeabi_fadd>
 8001868:	1c03      	adds	r3, r0, #0
 800186a:	1c19      	adds	r1, r3, #0
 800186c:	1c20      	adds	r0, r4, #0
 800186e:	f7ff f997 	bl	8000ba0 <__aeabi_fsub>
 8001872:	1c03      	adds	r3, r0, #0
 8001874:	617b      	str	r3, [r7, #20]

  x = (_coeff_matrix[1][3]*t_raw*t_raw*t_raw);
 8001876:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <get_pressure+0x24c>)
 8001878:	69dc      	ldr	r4, [r3, #28]
 800187a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800187c:	f7ff fbbe 	bl	8000ffc <__aeabi_ui2f>
 8001880:	1c03      	adds	r3, r0, #0
 8001882:	1c19      	adds	r1, r3, #0
 8001884:	1c20      	adds	r0, r4, #0
 8001886:	f7ff f859 	bl	800093c <__aeabi_fmul>
 800188a:	1c03      	adds	r3, r0, #0
 800188c:	1c1c      	adds	r4, r3, #0
 800188e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001890:	f7ff fbb4 	bl	8000ffc <__aeabi_ui2f>
 8001894:	1c03      	adds	r3, r0, #0
 8001896:	1c19      	adds	r1, r3, #0
 8001898:	1c20      	adds	r0, r4, #0
 800189a:	f7ff f84f 	bl	800093c <__aeabi_fmul>
 800189e:	1c03      	adds	r3, r0, #0
 80018a0:	1c1c      	adds	r4, r3, #0
 80018a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018a4:	f7ff fbaa 	bl	8000ffc <__aeabi_ui2f>
 80018a8:	1c03      	adds	r3, r0, #0
 80018aa:	1c19      	adds	r1, r3, #0
 80018ac:	1c20      	adds	r0, r4, #0
 80018ae:	f7ff f845 	bl	800093c <__aeabi_fmul>
 80018b2:	1c03      	adds	r3, r0, #0
 80018b4:	623b      	str	r3, [r7, #32]
  y = (_coeff_matrix[1][2]*t_raw*t_raw);
 80018b6:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <get_pressure+0x24c>)
 80018b8:	699c      	ldr	r4, [r3, #24]
 80018ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018bc:	f7ff fb9e 	bl	8000ffc <__aeabi_ui2f>
 80018c0:	1c03      	adds	r3, r0, #0
 80018c2:	1c19      	adds	r1, r3, #0
 80018c4:	1c20      	adds	r0, r4, #0
 80018c6:	f7ff f839 	bl	800093c <__aeabi_fmul>
 80018ca:	1c03      	adds	r3, r0, #0
 80018cc:	1c1c      	adds	r4, r3, #0
 80018ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018d0:	f7ff fb94 	bl	8000ffc <__aeabi_ui2f>
 80018d4:	1c03      	adds	r3, r0, #0
 80018d6:	1c19      	adds	r1, r3, #0
 80018d8:	1c20      	adds	r0, r4, #0
 80018da:	f7ff f82f 	bl	800093c <__aeabi_fmul>
 80018de:	1c03      	adds	r3, r0, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  z = (_coeff_matrix[1][1]*t_raw);
 80018e2:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <get_pressure+0x24c>)
 80018e4:	695c      	ldr	r4, [r3, #20]
 80018e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018e8:	f7ff fb88 	bl	8000ffc <__aeabi_ui2f>
 80018ec:	1c03      	adds	r3, r0, #0
 80018ee:	1c19      	adds	r1, r3, #0
 80018f0:	1c20      	adds	r0, r4, #0
 80018f2:	f7ff f823 	bl	800093c <__aeabi_fmul>
 80018f6:	1c03      	adds	r3, r0, #0
 80018f8:	61bb      	str	r3, [r7, #24]
  float p_int2 = p_int1/(x + y + z + _coeff_matrix[1][0]);
 80018fa:	69f9      	ldr	r1, [r7, #28]
 80018fc:	6a38      	ldr	r0, [r7, #32]
 80018fe:	f7fe fd71 	bl	80003e4 <__aeabi_fadd>
 8001902:	1c03      	adds	r3, r0, #0
 8001904:	69b9      	ldr	r1, [r7, #24]
 8001906:	1c18      	adds	r0, r3, #0
 8001908:	f7fe fd6c 	bl	80003e4 <__aeabi_fadd>
 800190c:	1c03      	adds	r3, r0, #0
 800190e:	1c1a      	adds	r2, r3, #0
 8001910:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <get_pressure+0x24c>)
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	1c19      	adds	r1, r3, #0
 8001916:	1c10      	adds	r0, r2, #0
 8001918:	f7fe fd64 	bl	80003e4 <__aeabi_fadd>
 800191c:	1c03      	adds	r3, r0, #0
 800191e:	1c19      	adds	r1, r3, #0
 8001920:	6978      	ldr	r0, [r7, #20]
 8001922:	f7fe fef9 	bl	8000718 <__aeabi_fdiv>
 8001926:	1c03      	adds	r3, r0, #0
 8001928:	613b      	str	r3, [r7, #16]

  x = (_coeff_matrix[2][3]*p_int2*p_int2*p_int2);
 800192a:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <get_pressure+0x24c>)
 800192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192e:	6939      	ldr	r1, [r7, #16]
 8001930:	1c18      	adds	r0, r3, #0
 8001932:	f7ff f803 	bl	800093c <__aeabi_fmul>
 8001936:	1c03      	adds	r3, r0, #0
 8001938:	6939      	ldr	r1, [r7, #16]
 800193a:	1c18      	adds	r0, r3, #0
 800193c:	f7fe fffe 	bl	800093c <__aeabi_fmul>
 8001940:	1c03      	adds	r3, r0, #0
 8001942:	1c19      	adds	r1, r3, #0
 8001944:	6938      	ldr	r0, [r7, #16]
 8001946:	f7fe fff9 	bl	800093c <__aeabi_fmul>
 800194a:	1c03      	adds	r3, r0, #0
 800194c:	623b      	str	r3, [r7, #32]
  y = (_coeff_matrix[2][2]*p_int2*p_int2);
 800194e:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <get_pressure+0x24c>)
 8001950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001952:	6939      	ldr	r1, [r7, #16]
 8001954:	1c18      	adds	r0, r3, #0
 8001956:	f7fe fff1 	bl	800093c <__aeabi_fmul>
 800195a:	1c03      	adds	r3, r0, #0
 800195c:	1c19      	adds	r1, r3, #0
 800195e:	6938      	ldr	r0, [r7, #16]
 8001960:	f7fe ffec 	bl	800093c <__aeabi_fmul>
 8001964:	1c03      	adds	r3, r0, #0
 8001966:	61fb      	str	r3, [r7, #28]
  z = (_coeff_matrix[2][1]*p_int2);
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <get_pressure+0x24c>)
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	1c19      	adds	r1, r3, #0
 800196e:	6938      	ldr	r0, [r7, #16]
 8001970:	f7fe ffe4 	bl	800093c <__aeabi_fmul>
 8001974:	1c03      	adds	r3, r0, #0
 8001976:	61bb      	str	r3, [r7, #24]
  float p_comp_fs = x + y + z + _coeff_matrix[2][0];
 8001978:	69f9      	ldr	r1, [r7, #28]
 800197a:	6a38      	ldr	r0, [r7, #32]
 800197c:	f7fe fd32 	bl	80003e4 <__aeabi_fadd>
 8001980:	1c03      	adds	r3, r0, #0
 8001982:	69b9      	ldr	r1, [r7, #24]
 8001984:	1c18      	adds	r0, r3, #0
 8001986:	f7fe fd2d 	bl	80003e4 <__aeabi_fadd>
 800198a:	1c03      	adds	r3, r0, #0
 800198c:	1c1a      	adds	r2, r3, #0
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <get_pressure+0x24c>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	1c19      	adds	r1, r3, #0
 8001994:	1c10      	adds	r0, r2, #0
 8001996:	f7fe fd25 	bl	80003e4 <__aeabi_fadd>
 800199a:	1c03      	adds	r3, r0, #0
 800199c:	60fb      	str	r3, [r7, #12]

  float p_comp = (p_comp_fs*_pressure_range) + _pressure_minimum;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <get_pressure+0x250>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68f9      	ldr	r1, [r7, #12]
 80019a4:	1c18      	adds	r0, r3, #0
 80019a6:	f7fe ffc9 	bl	800093c <__aeabi_fmul>
 80019aa:	1c03      	adds	r3, r0, #0
 80019ac:	1c1a      	adds	r2, r3, #0
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <get_pressure+0x254>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	1c19      	adds	r1, r3, #0
 80019b4:	1c10      	adds	r0, r2, #0
 80019b6:	f7fe fd15 	bl	80003e4 <__aeabi_fadd>
 80019ba:	1c03      	adds	r3, r0, #0
 80019bc:	60bb      	str	r3, [r7, #8]

  return p_comp;
 80019be:	68bb      	ldr	r3, [r7, #8]
}
 80019c0:	1c18      	adds	r0, r3, #0
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b00d      	add	sp, #52	; 0x34
 80019c6:	bd90      	pop	{r4, r7, pc}
 80019c8:	20000030 	.word	0x20000030
 80019cc:	2000008c 	.word	0x2000008c
 80019d0:	20000078 	.word	0x20000078

080019d4 <get_temperature>:

float get_temperature() {
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
  // reads temperature from ADC, stores raw value in sensor object, but returns the temperature in Celsius
  // refer to datasheet section 3.5 ADC Programming and Read Sequence – Temperature Reading

  uint8_t sec_arr[4] = {0};
 80019da:	003b      	movs	r3, r7
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

  adc_read(TEMPERATURE, sec_arr);
 80019e0:	003b      	movs	r3, r7
 80019e2:	0019      	movs	r1, r3
 80019e4:	2001      	movs	r0, #1
 80019e6:	f000 facb 	bl	8001f80 <adc_read>

  // first 14 bits represent temperature
  // following 10 bits are random thus discarded
  _t_raw = (((int32_t)sec_arr[1] << 8) | (int32_t)sec_arr[2]) >> 2;
 80019ea:	003b      	movs	r3, r7
 80019ec:	785b      	ldrb	r3, [r3, #1]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	003a      	movs	r2, r7
 80019f2:	7892      	ldrb	r2, [r2, #2]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	109a      	asrs	r2, r3, #2
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <get_temperature+0x54>)
 80019fa:	601a      	str	r2, [r3, #0]
  float temp = _t_raw * 0.03125;
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <get_temperature+0x54>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff fdad 	bl	8001560 <__aeabi_i2d>
 8001a06:	2200      	movs	r2, #0
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <get_temperature+0x58>)
 8001a0a:	f7ff fb37 	bl	800107c <__aeabi_dmul>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	000c      	movs	r4, r1
 8001a12:	0018      	movs	r0, r3
 8001a14:	0021      	movs	r1, r4
 8001a16:	f7ff fddd 	bl	80015d4 <__aeabi_d2f>
 8001a1a:	1c03      	adds	r3, r0, #0
 8001a1c:	607b      	str	r3, [r7, #4]

  return temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
}
 8001a20:	1c18      	adds	r0, r3, #0
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b003      	add	sp, #12
 8001a26:	bd90      	pop	{r4, r7, pc}
 8001a28:	20000074 	.word	0x20000074
 8001a2c:	3fa00000 	.word	0x3fa00000

08001a30 <set_data_rate>:

void set_data_rate(RSC_DATA_RATE dr) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	0002      	movs	r2, r0
 8001a38:	1dfb      	adds	r3, r7, #7
 8001a3a:	701a      	strb	r2, [r3, #0]
  _data_rate = dr;
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <set_data_rate+0x48>)
 8001a3e:	1dfa      	adds	r2, r7, #7
 8001a40:	7812      	ldrb	r2, [r2, #0]
 8001a42:	701a      	strb	r2, [r3, #0]
  switch (dr) {
 8001a44:	1dfb      	adds	r3, r7, #7
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0d      	blt.n	8001a68 <set_data_rate+0x38>
 8001a4c:	2b06      	cmp	r3, #6
 8001a4e:	dd03      	ble.n	8001a58 <set_data_rate+0x28>
 8001a50:	3b08      	subs	r3, #8
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d808      	bhi.n	8001a68 <set_data_rate+0x38>
 8001a56:	e003      	b.n	8001a60 <set_data_rate+0x30>
    case N_DR_90_SPS:
    case N_DR_175_SPS:
    case N_DR_330_SPS:
    case N_DR_600_SPS:
    case N_DR_1000_SPS:
      set_mode(NORMAL_MODE);
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f000 f80f 	bl	8001a7c <set_mode>
      break;
 8001a5e:	e006      	b.n	8001a6e <set_data_rate+0x3e>
    case F_DR_180_SPS:
    case F_DR_350_SPS:
    case F_DR_660_SPS:
    case F_DR_1200_SPS:
    case F_DR_2000_SPS:
      set_mode(FAST_MODE);
 8001a60:	2002      	movs	r0, #2
 8001a62:	f000 f80b 	bl	8001a7c <set_mode>
      break;
 8001a66:	e002      	b.n	8001a6e <set_data_rate+0x3e>
    default:
      set_mode(NA_MODE);
 8001a68:	2001      	movs	r0, #1
 8001a6a:	f000 f807 	bl	8001a7c <set_mode>
  }
}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b002      	add	sp, #8
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	20000088 	.word	0x20000088

08001a7c <set_mode>:

void set_mode(RSC_MODE mode) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	0002      	movs	r2, r0
 8001a84:	1dfb      	adds	r3, r7, #7
 8001a86:	701a      	strb	r2, [r3, #0]
  RSC_MODE l_mode;

  switch (mode) {
 8001a88:	1dfb      	adds	r3, r7, #7
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <set_mode+0x1a>
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d00e      	beq.n	8001ab2 <set_mode+0x36>
 8001a94:	e01f      	b.n	8001ad6 <set_mode+0x5a>
    case NORMAL_MODE:
      if (_data_rate < N_DR_20_SPS || _data_rate > N_DR_1000_SPS) {
 8001a96:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <set_mode+0x74>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d904      	bls.n	8001aa8 <set_mode+0x2c>
        //Serial.println("RSC: Normal mode not supported with the current selection of data rate\n");
        //Serial.println("RSC: You will see erronous readings\n");
        l_mode = NA_MODE;
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	18fb      	adds	r3, r7, r3
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
      } else
        l_mode = NORMAL_MODE;
      break;
 8001aa6:	e01a      	b.n	8001ade <set_mode+0x62>
        l_mode = NORMAL_MODE;
 8001aa8:	230f      	movs	r3, #15
 8001aaa:	18fb      	adds	r3, r7, r3
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
      break;
 8001ab0:	e015      	b.n	8001ade <set_mode+0x62>
    case FAST_MODE:
      if (_data_rate < F_DR_40_SPS || _data_rate > F_DR_2000_SPS) {
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <set_mode+0x74>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b07      	cmp	r3, #7
 8001ab8:	d903      	bls.n	8001ac2 <set_mode+0x46>
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <set_mode+0x74>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b0e      	cmp	r3, #14
 8001ac0:	d904      	bls.n	8001acc <set_mode+0x50>
        //Serial.println("RSC: Fast mode not supported with the current selection of data rate\n");
        //Serial.println("RSC: You will see erronous readings\n");
        l_mode = NA_MODE;
 8001ac2:	230f      	movs	r3, #15
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
      } else
        l_mode = FAST_MODE;
      break;
 8001aca:	e008      	b.n	8001ade <set_mode+0x62>
        l_mode = FAST_MODE;
 8001acc:	230f      	movs	r3, #15
 8001ace:	18fb      	adds	r3, r7, r3
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	701a      	strb	r2, [r3, #0]
      break;
 8001ad4:	e003      	b.n	8001ade <set_mode+0x62>
    default:
      l_mode = NA_MODE;
 8001ad6:	230f      	movs	r3, #15
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	2201      	movs	r2, #1
 8001adc:	701a      	strb	r2, [r3, #0]
  }
  _mode = l_mode;
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <set_mode+0x78>)
 8001ae0:	220f      	movs	r2, #15
 8001ae2:	18ba      	adds	r2, r7, r2
 8001ae4:	7812      	ldrb	r2, [r2, #0]
 8001ae6:	701a      	strb	r2, [r3, #0]
}
 8001ae8:	46c0      	nop			; (mov r8, r8)
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b004      	add	sp, #16
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000088 	.word	0x20000088
 8001af4:	20000080 	.word	0x20000080

08001af8 <get_coefficients>:

void get_coefficients() {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
  int base_address = RSC_OFFSET_COEFFICIENT_0_LSB;
 8001afe:	2382      	movs	r3, #130	; 0x82
 8001b00:	607b      	str	r3, [r7, #4]
  uint8_t buf[4] = {0};
 8001b02:	003b      	movs	r3, r7
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
  int i, j = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  //  0   OffsetCoefficient0    OffsetCoefficient1    OffsetCoefficient2    OffsetCoefficient3
  //  1   SpanCoefficient0      SpanCoefficient1      SpanCoefficient2      SpanCoefficient3
  //  2   ShapeCoefficient0     ShapeCoefficient1     ShapeCoefficient2     ShapeCoefficient3

  // storing all the coefficients
  for (i = 0; i < RSC_COEFF_T_ROW_NO; i++) {
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	e029      	b.n	8001b66 <get_coefficients+0x6e>
    for (j = 0; j < RSC_COEFF_T_COL_NO; j++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	e020      	b.n	8001b5a <get_coefficients+0x62>
      // 80 is the number of bytes that separate the beginning
      // of the address spaces of all the 3 coefficient groups
      // refer the datasheet for more info
      base_address = RSC_OFFSET_COEFFICIENT_0_LSB + i * 80 + j * 4;
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	0013      	movs	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	189b      	adds	r3, r3, r2
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	3382      	adds	r3, #130	; 0x82
 8001b24:	001a      	movs	r2, r3
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	18d3      	adds	r3, r2, r3
 8001b2c:	607b      	str	r3, [r7, #4]
      eeprom_read(base_address, 4, buf);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	003a      	movs	r2, r7
 8001b34:	2104      	movs	r1, #4
 8001b36:	0018      	movs	r0, r3
 8001b38:	f000 f98e 	bl	8001e58 <eeprom_read>
      memcpy(&_coeff_matrix[i][j], (&buf), sizeof(_coeff_matrix[i][j]));
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	009a      	lsls	r2, r3, #2
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	18d3      	adds	r3, r2, r3
 8001b44:	009a      	lsls	r2, r3, #2
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <get_coefficients+0x7c>)
 8001b48:	18d3      	adds	r3, r2, r3
 8001b4a:	0039      	movs	r1, r7
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f003 f91c 	bl	8004d8c <memcpy>
    for (j = 0; j < RSC_COEFF_T_COL_NO; j++) {
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	3301      	adds	r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	dddb      	ble.n	8001b18 <get_coefficients+0x20>
  for (i = 0; i < RSC_COEFF_T_ROW_NO; i++) {
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3301      	adds	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	ddd2      	ble.n	8001b12 <get_coefficients+0x1a>
    }
  }
}
 8001b6c:	46c0      	nop			; (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b004      	add	sp, #16
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000030 	.word	0x20000030

08001b78 <setup_adc>:

void setup_adc(uint8_t* adc_init_values) {
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  // refer to datasheet section 3.4 ADC Programming Sequence – Power Up
  uint8_t command[6] = {RSC_ADC_RESET_COMMAND, 0x43, adc_init_values[0], adc_init_values[1], adc_init_values[2], adc_init_values[3]};
 8001b80:	2108      	movs	r1, #8
 8001b82:	187b      	adds	r3, r7, r1
 8001b84:	2206      	movs	r2, #6
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	187b      	adds	r3, r7, r1
 8001b8a:	2243      	movs	r2, #67	; 0x43
 8001b8c:	705a      	strb	r2, [r3, #1]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	187b      	adds	r3, r7, r1
 8001b94:	709a      	strb	r2, [r3, #2]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	785a      	ldrb	r2, [r3, #1]
 8001b9a:	187b      	adds	r3, r7, r1
 8001b9c:	70da      	strb	r2, [r3, #3]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	789a      	ldrb	r2, [r3, #2]
 8001ba2:	187b      	adds	r3, r7, r1
 8001ba4:	711a      	strb	r2, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	78da      	ldrb	r2, [r3, #3]
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	715a      	strb	r2, [r3, #5]
  select_adc();
 8001bae:	f000 fa6b 	bl	8002088 <select_adc>
  HAL_StatusTypeDef SPI_Status;
  for (int i = 0; i < 6; i++) {
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	e010      	b.n	8001bda <setup_adc+0x62>
	  SPI_Status = HAL_SPI_Transmit(&hspi1, &command[i], 1, HAL_MAX_DELAY); //SPI.transfer(command[0]);
 8001bb8:	2308      	movs	r3, #8
 8001bba:	18fa      	adds	r2, r7, r3
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	18d1      	adds	r1, r2, r3
 8001bc0:	2317      	movs	r3, #23
 8001bc2:	18fc      	adds	r4, r7, r3
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	425b      	negs	r3, r3
 8001bc8:	480d      	ldr	r0, [pc, #52]	; (8001c00 <setup_adc+0x88>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f002 f890 	bl	8003cf0 <HAL_SPI_Transmit>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < 6; i++) {
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b05      	cmp	r3, #5
 8001bde:	ddeb      	ble.n	8001bb8 <setup_adc+0x40>
  }
  if (SPI_Status != HAL_OK)
 8001be0:	2317      	movs	r3, #23
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <setup_adc+0x76>
  {
    Error_Handler();
 8001bea:	f000 fc9d 	bl	8002528 <Error_Handler>
  }
  deselect_adc();
 8001bee:	f000 fa61 	bl	80020b4 <deselect_adc>

  HAL_Delay(5);
 8001bf2:	2005      	movs	r0, #5
 8001bf4:	f000 fe3e 	bl	8002874 <HAL_Delay>
}
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b007      	add	sp, #28
 8001bfe:	bd90      	pop	{r4, r7, pc}
 8001c00:	20000090 	.word	0x20000090

08001c04 <get_initial_adc_values>:

void get_initial_adc_values(uint8_t* adc_init_values) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  eeprom_read(RSC_ADC_CONFIG_00, 1, &adc_init_values[0]);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	001a      	movs	r2, r3
 8001c10:	2101      	movs	r1, #1
 8001c12:	203d      	movs	r0, #61	; 0x3d
 8001c14:	f000 f920 	bl	8001e58 <eeprom_read>
  HAL_Delay(2);
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f000 fe2b 	bl	8002874 <HAL_Delay>
  eeprom_read(RSC_ADC_CONFIG_01, 1, &adc_init_values[1]);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3301      	adds	r3, #1
 8001c22:	001a      	movs	r2, r3
 8001c24:	2101      	movs	r1, #1
 8001c26:	203f      	movs	r0, #63	; 0x3f
 8001c28:	f000 f916 	bl	8001e58 <eeprom_read>
  HAL_Delay(2);
 8001c2c:	2002      	movs	r0, #2
 8001c2e:	f000 fe21 	bl	8002874 <HAL_Delay>
  eeprom_read(RSC_ADC_CONFIG_02, 1, &adc_init_values[2]);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3302      	adds	r3, #2
 8001c36:	001a      	movs	r2, r3
 8001c38:	2101      	movs	r1, #1
 8001c3a:	2041      	movs	r0, #65	; 0x41
 8001c3c:	f000 f90c 	bl	8001e58 <eeprom_read>
  HAL_Delay(2);
 8001c40:	2002      	movs	r0, #2
 8001c42:	f000 fe17 	bl	8002874 <HAL_Delay>
  eeprom_read(RSC_ADC_CONFIG_03, 1, &adc_init_values[3]);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3303      	adds	r3, #3
 8001c4a:	001a      	movs	r2, r3
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	2043      	movs	r0, #67	; 0x43
 8001c50:	f000 f902 	bl	8001e58 <eeprom_read>
  HAL_Delay(2);
 8001c54:	2002      	movs	r0, #2
 8001c56:	f000 fe0d 	bl	8002874 <HAL_Delay>
}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b002      	add	sp, #8
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <get_pressure_type>:

void get_pressure_type() {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
  char buf[RSC_SENSOR_TYPE_LEN];
  eeprom_read(RSC_PRESSURE_REFERENCE, RSC_SENSOR_TYPE_LEN, buf);
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	001a      	movs	r2, r3
 8001c6e:	2101      	movs	r1, #1
 8001c70:	2028      	movs	r0, #40	; 0x28
 8001c72:	f000 f8f1 	bl	8001e58 <eeprom_read>
  switch (buf[0]) {
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b44      	cmp	r3, #68	; 0x44
 8001c7c:	d004      	beq.n	8001c88 <get_pressure_type+0x24>
 8001c7e:	2b47      	cmp	r3, #71	; 0x47
 8001c80:	d010      	beq.n	8001ca4 <get_pressure_type+0x40>
 8001c82:	2b41      	cmp	r3, #65	; 0x41
 8001c84:	d007      	beq.n	8001c96 <get_pressure_type+0x32>
 8001c86:	e014      	b.n	8001cb2 <get_pressure_type+0x4e>
    case 'D':
      _pressure_type = DIFFERENTIAL;
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <get_pressure_type+0x64>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
      _pressure_type_name = "differential";
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <get_pressure_type+0x68>)
 8001c90:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <get_pressure_type+0x6c>)
 8001c92:	601a      	str	r2, [r3, #0]
      break;
 8001c94:	e013      	b.n	8001cbe <get_pressure_type+0x5a>
    case 'A':
      _pressure_type = ABSOLUTE;
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <get_pressure_type+0x64>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
      _pressure_type_name = "absolute";
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <get_pressure_type+0x68>)
 8001c9e:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <get_pressure_type+0x70>)
 8001ca0:	601a      	str	r2, [r3, #0]
      break;
 8001ca2:	e00c      	b.n	8001cbe <get_pressure_type+0x5a>
    case 'G':
      _pressure_type = GAUGE;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <get_pressure_type+0x64>)
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	701a      	strb	r2, [r3, #0]
      _pressure_type_name = "gauge";
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <get_pressure_type+0x68>)
 8001cac:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <get_pressure_type+0x74>)
 8001cae:	601a      	str	r2, [r3, #0]
      break;
 8001cb0:	e005      	b.n	8001cbe <get_pressure_type+0x5a>
    default:
      _pressure_type = DIFFERENTIAL;
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <get_pressure_type+0x64>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
      _pressure_type_name = "differential";
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <get_pressure_type+0x68>)
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <get_pressure_type+0x6c>)
 8001cbc:	601a      	str	r2, [r3, #0]
  }
}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b002      	add	sp, #8
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	20000060 	.word	0x20000060
 8001ccc:	2000007c 	.word	0x2000007c
 8001cd0:	08004dc8 	.word	0x08004dc8
 8001cd4:	08004dd8 	.word	0x08004dd8
 8001cd8:	08004de4 	.word	0x08004de4

08001cdc <get_pressure_unit>:

void get_pressure_unit() {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
  char buf[RSC_PRESSURE_UNIT_LEN] = {0};
 8001ce2:	003b      	movs	r3, r7
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	001a      	movs	r2, r3
 8001cea:	2100      	movs	r1, #0
 8001cec:	f003 f857 	bl	8004d9e <memset>
  eeprom_read(RSC_PRESSURE_UNIT_MSB, RSC_PRESSURE_UNIT_LEN, buf);
 8001cf0:	003b      	movs	r3, r7
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	2106      	movs	r1, #6
 8001cf6:	2023      	movs	r0, #35	; 0x23
 8001cf8:	f000 f8ae 	bl	8001e58 <eeprom_read>
  buf[RSC_PRESSURE_UNIT_LEN - 1] = '\0';
 8001cfc:	003b      	movs	r3, r7
 8001cfe:	2200      	movs	r2, #0
 8001d00:	715a      	strb	r2, [r3, #5]
  if (buf[RSC_PRESSURE_UNIT_LEN - 2] == 'O') {
 8001d02:	003b      	movs	r3, r7
 8001d04:	791b      	ldrb	r3, [r3, #4]
 8001d06:	2b4f      	cmp	r3, #79	; 0x4f
 8001d08:	d106      	bne.n	8001d18 <get_pressure_unit+0x3c>
    _pressure_unit = INH2O;
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <get_pressure_unit+0xc8>)
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	701a      	strb	r2, [r3, #0]
    _pressure_unit_name = "inH2O";
 8001d10:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <get_pressure_unit+0xcc>)
 8001d12:	4a26      	ldr	r2, [pc, #152]	; (8001dac <get_pressure_unit+0xd0>)
 8001d14:	601a      	str	r2, [r3, #0]
    }
  } else if (buf[RSC_PRESSURE_UNIT_LEN - 2] == 'i') {
    _pressure_unit = PSI;
    _pressure_unit_name = "psi";
  }
}
 8001d16:	e040      	b.n	8001d9a <get_pressure_unit+0xbe>
  } else if (buf[RSC_PRESSURE_UNIT_LEN - 2] == 'a') {
 8001d18:	003b      	movs	r3, r7
 8001d1a:	791b      	ldrb	r3, [r3, #4]
 8001d1c:	2b61      	cmp	r3, #97	; 0x61
 8001d1e:	d11c      	bne.n	8001d5a <get_pressure_unit+0x7e>
    if (buf[RSC_PRESSURE_UNIT_LEN - 4] == 'K') {
 8001d20:	003b      	movs	r3, r7
 8001d22:	789b      	ldrb	r3, [r3, #2]
 8001d24:	2b4b      	cmp	r3, #75	; 0x4b
 8001d26:	d106      	bne.n	8001d36 <get_pressure_unit+0x5a>
      _pressure_unit = KPASCAL;
 8001d28:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <get_pressure_unit+0xc8>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
      _pressure_unit_name = "kilopascal";
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <get_pressure_unit+0xcc>)
 8001d30:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <get_pressure_unit+0xd4>)
 8001d32:	601a      	str	r2, [r3, #0]
}
 8001d34:	e031      	b.n	8001d9a <get_pressure_unit+0xbe>
    } else if (buf[RSC_PRESSURE_UNIT_LEN - 4] == 'M') {
 8001d36:	003b      	movs	r3, r7
 8001d38:	789b      	ldrb	r3, [r3, #2]
 8001d3a:	2b4d      	cmp	r3, #77	; 0x4d
 8001d3c:	d106      	bne.n	8001d4c <get_pressure_unit+0x70>
      _pressure_unit = MPASCAL;
 8001d3e:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <get_pressure_unit+0xc8>)
 8001d40:	2202      	movs	r2, #2
 8001d42:	701a      	strb	r2, [r3, #0]
      _pressure_unit_name = "megapascal";
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <get_pressure_unit+0xcc>)
 8001d46:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <get_pressure_unit+0xd8>)
 8001d48:	601a      	str	r2, [r3, #0]
}
 8001d4a:	e026      	b.n	8001d9a <get_pressure_unit+0xbe>
      _pressure_unit = PASCAL;
 8001d4c:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <get_pressure_unit+0xc8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
      _pressure_unit_name = "pascal";
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <get_pressure_unit+0xcc>)
 8001d54:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <get_pressure_unit+0xdc>)
 8001d56:	601a      	str	r2, [r3, #0]
}
 8001d58:	e01f      	b.n	8001d9a <get_pressure_unit+0xbe>
  } else if (buf[RSC_PRESSURE_UNIT_LEN - 2] == 'r') {
 8001d5a:	003b      	movs	r3, r7
 8001d5c:	791b      	ldrb	r3, [r3, #4]
 8001d5e:	2b72      	cmp	r3, #114	; 0x72
 8001d60:	d111      	bne.n	8001d86 <get_pressure_unit+0xaa>
    if (buf[RSC_PRESSURE_UNIT_LEN - 5] == 'm') {
 8001d62:	003b      	movs	r3, r7
 8001d64:	785b      	ldrb	r3, [r3, #1]
 8001d66:	2b6d      	cmp	r3, #109	; 0x6d
 8001d68:	d106      	bne.n	8001d78 <get_pressure_unit+0x9c>
      _pressure_unit = mBAR;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <get_pressure_unit+0xc8>)
 8001d6c:	2206      	movs	r2, #6
 8001d6e:	701a      	strb	r2, [r3, #0]
      _pressure_unit_name = "millibar";
 8001d70:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <get_pressure_unit+0xcc>)
 8001d72:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <get_pressure_unit+0xe0>)
 8001d74:	601a      	str	r2, [r3, #0]
}
 8001d76:	e010      	b.n	8001d9a <get_pressure_unit+0xbe>
      _pressure_unit = BAR;
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <get_pressure_unit+0xc8>)
 8001d7a:	2205      	movs	r2, #5
 8001d7c:	701a      	strb	r2, [r3, #0]
      _pressure_unit_name = "bar";
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <get_pressure_unit+0xcc>)
 8001d80:	4a0f      	ldr	r2, [pc, #60]	; (8001dc0 <get_pressure_unit+0xe4>)
 8001d82:	601a      	str	r2, [r3, #0]
}
 8001d84:	e009      	b.n	8001d9a <get_pressure_unit+0xbe>
  } else if (buf[RSC_PRESSURE_UNIT_LEN - 2] == 'i') {
 8001d86:	003b      	movs	r3, r7
 8001d88:	791b      	ldrb	r3, [r3, #4]
 8001d8a:	2b69      	cmp	r3, #105	; 0x69
 8001d8c:	d105      	bne.n	8001d9a <get_pressure_unit+0xbe>
    _pressure_unit = PSI;
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <get_pressure_unit+0xc8>)
 8001d90:	2203      	movs	r2, #3
 8001d92:	701a      	strb	r2, [r3, #0]
    _pressure_unit_name = "psi";
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <get_pressure_unit+0xcc>)
 8001d96:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <get_pressure_unit+0xe8>)
 8001d98:	601a      	str	r2, [r3, #0]
}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b002      	add	sp, #8
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	20000020 	.word	0x20000020
 8001da8:	20000084 	.word	0x20000084
 8001dac:	08004dec 	.word	0x08004dec
 8001db0:	08004df4 	.word	0x08004df4
 8001db4:	08004e00 	.word	0x08004e00
 8001db8:	08004e0c 	.word	0x08004e0c
 8001dbc:	08004e14 	.word	0x08004e14
 8001dc0:	08004e20 	.word	0x08004e20
 8001dc4:	08004e24 	.word	0x08004e24

08001dc8 <get_pressure_minimum>:

void get_pressure_minimum() {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
  uint8_t buf[RSC_PRESSURE_MINIMUM_LEN];
  eeprom_read(RSC_PRESSURE_MINIMUM_LSB, RSC_PRESSURE_MINIMUM_LEN, buf);
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	001a      	movs	r2, r3
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	201f      	movs	r0, #31
 8001dd6:	f000 f83f 	bl	8001e58 <eeprom_read>
  // convert byte array to float (buf[0] is LSB)
  memcpy(&_pressure_minimum, &buf, sizeof(_pressure_minimum));
 8001dda:	1d39      	adds	r1, r7, #4
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <get_pressure_minimum+0x28>)
 8001dde:	2204      	movs	r2, #4
 8001de0:	0018      	movs	r0, r3
 8001de2:	f002 ffd3 	bl	8004d8c <memcpy>
}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b002      	add	sp, #8
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	20000078 	.word	0x20000078

08001df4 <get_pressure_range>:

void get_pressure_range() {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
  uint8_t buf[RSC_PRESSURE_RANGE_LEN];
  eeprom_read(RSC_PRESSURE_RANGE_LSB, RSC_PRESSURE_RANGE_LEN, buf);
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	001a      	movs	r2, r3
 8001dfe:	2104      	movs	r1, #4
 8001e00:	201b      	movs	r0, #27
 8001e02:	f000 f829 	bl	8001e58 <eeprom_read>
  // convert byte array to float (buf[0] is LSB)
  memcpy(&_pressure_range, &buf, sizeof(_pressure_range));
 8001e06:	1d39      	adds	r1, r7, #4
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <get_pressure_range+0x28>)
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f002 ffbd 	bl	8004d8c <memcpy>
}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b002      	add	sp, #8
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	2000008c 	.word	0x2000008c

08001e20 <get_serial_number>:

void get_serial_number() {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  eeprom_read(RSC_SERIAL_NO_YYYY_MSB, RSC_SENSOR_NUMBER_LEN, _serial_number);
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <get_serial_number+0x18>)
 8001e26:	001a      	movs	r2, r3
 8001e28:	210c      	movs	r1, #12
 8001e2a:	2010      	movs	r0, #16
 8001e2c:	f000 f814 	bl	8001e58 <eeprom_read>
}
 8001e30:	46c0      	nop			; (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	20000024 	.word	0x20000024

08001e3c <get_catalog_listing>:

void get_catalog_listing() {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  eeprom_read(RSC_CATALOG_LISTING_MSB, RSC_SENSOR_NAME_LEN, _catalog_listing);
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <get_catalog_listing+0x18>)
 8001e42:	001a      	movs	r2, r3
 8001e44:	2110      	movs	r1, #16
 8001e46:	2000      	movs	r0, #0
 8001e48:	f000 f806 	bl	8001e58 <eeprom_read>
}
 8001e4c:	46c0      	nop			; (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	20000064 	.word	0x20000064

08001e58 <eeprom_read>:

void eeprom_read(uint16_t address, uint8_t num_bytes, uint8_t *data) {
 8001e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	603a      	str	r2, [r7, #0]
 8001e60:	1dbb      	adds	r3, r7, #6
 8001e62:	1c02      	adds	r2, r0, #0
 8001e64:	801a      	strh	r2, [r3, #0]
 8001e66:	1d7b      	adds	r3, r7, #5
 8001e68:	1c0a      	adds	r2, r1, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
  // generate command (refer to sensor datasheet section 2.2)
  uint8_t command[2] = {0};
 8001e6c:	210c      	movs	r1, #12
 8001e6e:	187b      	adds	r3, r7, r1
 8001e70:	2200      	movs	r2, #0
 8001e72:	801a      	strh	r2, [r3, #0]
  command[0] = RSC_READ_EEPROM_INSTRUCTION | ((address & RSC_EEPROM_ADDRESS_9TH_BIT_MASK) >> 5);
 8001e74:	1dbb      	adds	r3, r7, #6
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	115b      	asrs	r3, r3, #5
 8001e7a:	b25b      	sxtb	r3, r3
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	4013      	ands	r3, r2
 8001e80:	b25b      	sxtb	r3, r3
 8001e82:	2203      	movs	r2, #3
 8001e84:	4313      	orrs	r3, r2
 8001e86:	b25b      	sxtb	r3, r3
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	187b      	adds	r3, r7, r1
 8001e8c:	701a      	strb	r2, [r3, #0]
  command[1] = address & 0xFF;
 8001e8e:	1dbb      	adds	r3, r7, #6
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	000d      	movs	r5, r1
 8001e96:	187b      	adds	r3, r7, r1
 8001e98:	705a      	strb	r2, [r3, #1]

  // send command
  // select EEPROM
  select_eeprom();
 8001e9a:	f000 f847 	bl	8001f2c <select_eeprom>
  HAL_StatusTypeDef SPI_Status;
  SPI_Status = HAL_SPI_Transmit(&hspi1, &command[0], 1, HAL_MAX_DELAY); //SPI.transfer(command[0]);
 8001e9e:	2617      	movs	r6, #23
 8001ea0:	19bc      	adds	r4, r7, r6
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	425b      	negs	r3, r3
 8001ea6:	0029      	movs	r1, r5
 8001ea8:	000d      	movs	r5, r1
 8001eaa:	1879      	adds	r1, r7, r1
 8001eac:	481e      	ldr	r0, [pc, #120]	; (8001f28 <eeprom_read+0xd0>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f001 ff1e 	bl	8003cf0 <HAL_SPI_Transmit>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	7023      	strb	r3, [r4, #0]
  SPI_Status = HAL_SPI_Transmit(&hspi1, &command[1], 1, HAL_MAX_DELAY); //SPI.transfer(command[1]);
 8001eb8:	19bc      	adds	r4, r7, r6
 8001eba:	2301      	movs	r3, #1
 8001ebc:	425a      	negs	r2, r3
 8001ebe:	197b      	adds	r3, r7, r5
 8001ec0:	1c59      	adds	r1, r3, #1
 8001ec2:	4819      	ldr	r0, [pc, #100]	; (8001f28 <eeprom_read+0xd0>)
 8001ec4:	0013      	movs	r3, r2
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f001 ff12 	bl	8003cf0 <HAL_SPI_Transmit>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	7023      	strb	r3, [r4, #0]

  // receive results
  // - results are transmitted back after the last bit of the command is sent
  // - to get results, just transfer dummy data, as subsequent bytes will not used by sensor
  for (int i = 0; i < num_bytes; i++) {
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	e015      	b.n	8001f02 <eeprom_read+0xaa>
	  uint8_t a = 0x10;
 8001ed6:	210b      	movs	r1, #11
 8001ed8:	187b      	adds	r3, r7, r1
 8001eda:	2210      	movs	r2, #16
 8001edc:	701a      	strb	r2, [r3, #0]
	  SPI_Status = HAL_SPI_TransmitReceive(&hspi1, &a, &data[i], 1, HAL_MAX_DELAY); //data[i] = SPI.transfer(0x00);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	18d2      	adds	r2, r2, r3
 8001ee4:	2317      	movs	r3, #23
 8001ee6:	18fc      	adds	r4, r7, r3
 8001ee8:	1879      	adds	r1, r7, r1
 8001eea:	480f      	ldr	r0, [pc, #60]	; (8001f28 <eeprom_read+0xd0>)
 8001eec:	2301      	movs	r3, #1
 8001eee:	425b      	negs	r3, r3
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f002 f84a 	bl	8003f8c <HAL_SPI_TransmitReceive>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < num_bytes; i++) {
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	3301      	adds	r3, #1
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	1d7b      	adds	r3, r7, #5
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	dbe4      	blt.n	8001ed6 <eeprom_read+0x7e>
  }
  if (SPI_Status != HAL_OK)
 8001f0c:	2317      	movs	r3, #23
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <eeprom_read+0xc2>
  {
    Error_Handler();
 8001f16:	f000 fb07 	bl	8002528 <Error_Handler>
  // deselect EEPROM
  // - after command is sent, the sensor will keep sending bytes from EEPROM,
  //   in ascending order of address. Resetting the CS_EE pin at the end of
  //   the function means that when reading from EEPROM next time, the result
  //   would start at the correct address.
  deselect_eeprom();
 8001f1a:	f000 f81d 	bl	8001f58 <deselect_eeprom>
}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b007      	add	sp, #28
 8001f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	20000090 	.word	0x20000090

08001f2c <select_eeprom>:


void select_eeprom() {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  // make sure CS_ADC is not active
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_ADC_Pin, GPIO_PIN_SET);
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <select_eeprom+0x28>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	2140      	movs	r1, #64	; 0x40
 8001f36:	0018      	movs	r0, r3
 8001f38:	f000 ffae 	bl	8002e98 <HAL_GPIO_WritePin>

  // enable CS_EE
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_EE_Pin, GPIO_PIN_RESET);
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <select_eeprom+0x28>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2180      	movs	r1, #128	; 0x80
 8001f42:	0018      	movs	r0, r3
 8001f44:	f000 ffa8 	bl	8002e98 <HAL_GPIO_WritePin>

  // the EEPROM interface operates in SPI mode 0 (CPOL = 0, CPHA = 0) or mode 3 (CPOL = 1, CPHA = 1)
  SPI_Init_EEPROM(); //SPI.beginTransaction(SPISettings(1250000, MSBFIRST, SPI_MODE0));
 8001f48:	f000 f8c8 	bl	80020dc <SPI_Init_EEPROM>
}
 8001f4c:	46c0      	nop			; (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	50000400 	.word	0x50000400

08001f58 <deselect_eeprom>:

void deselect_eeprom() {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit(&hspi1); //SPI.endTransaction();
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <deselect_eeprom+0x20>)
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f001 fe9d 	bl	8003c9e <HAL_SPI_DeInit>
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_EE_Pin, GPIO_PIN_SET);
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <deselect_eeprom+0x24>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	2180      	movs	r1, #128	; 0x80
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f000 ff94 	bl	8002e98 <HAL_GPIO_WritePin>
}
 8001f70:	46c0      	nop			; (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	20000090 	.word	0x20000090
 8001f7c:	50000400 	.word	0x50000400

08001f80 <adc_read>:

void adc_read(READING_T type, uint8_t *data) {
 8001f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f82:	b089      	sub	sp, #36	; 0x24
 8001f84:	af02      	add	r7, sp, #8
 8001f86:	0002      	movs	r2, r0
 8001f88:	6039      	str	r1, [r7, #0]
 8001f8a:	1dfb      	adds	r3, r7, #7
 8001f8c:	701a      	strb	r2, [r3, #0]
  // refer to datasheet section 3

  // need to configure the ADC to temperature mode first
  // generate command
  uint8_t command[2] = {0};
 8001f8e:	200c      	movs	r0, #12
 8001f90:	183b      	adds	r3, r7, r0
 8001f92:	2200      	movs	r2, #0
 8001f94:	801a      	strh	r2, [r3, #0]
  // WREG byte
  command[0] = RSC_ADC_WREG
 8001f96:	183b      	adds	r3, r7, r0
 8001f98:	2244      	movs	r2, #68	; 0x44
 8001f9a:	701a      	strb	r2, [r3, #0]
               | ((1 << 2) & RSC_ADC_REG_MASK);
  // configuration byte, which includes DataRate, Mode, Pressure/Temperature choice
  command[1] = (((_data_rate << RSC_DATA_RATE_SHIFT) & RSC_DATA_RATE_MASK)
 8001f9c:	4b37      	ldr	r3, [pc, #220]	; (800207c <adc_read+0xfc>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	015b      	lsls	r3, r3, #5
                | ((_mode << RSC_OPERATING_MODE_SHIFT) & RSC_OPERATING_MODE_MASK)
 8001fa2:	b25a      	sxtb	r2, r3
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <adc_read+0x100>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	2118      	movs	r1, #24
 8001fae:	400b      	ands	r3, r1
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	b25a      	sxtb	r2, r3
                | (((type & 0x01) << 1) | RSC_SET_BITS_MASK));
 8001fb6:	1dfb      	adds	r3, r7, #7
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	b25b      	sxtb	r3, r3
 8001fbe:	2102      	movs	r1, #2
 8001fc0:	400b      	ands	r3, r1
 8001fc2:	b25b      	sxtb	r3, r3
 8001fc4:	2104      	movs	r1, #4
 8001fc6:	430b      	orrs	r3, r1
 8001fc8:	b25b      	sxtb	r3, r3
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	b25b      	sxtb	r3, r3
 8001fce:	b2da      	uxtb	r2, r3
  command[1] = (((_data_rate << RSC_DATA_RATE_SHIFT) & RSC_DATA_RATE_MASK)
 8001fd0:	0005      	movs	r5, r0
 8001fd2:	197b      	adds	r3, r7, r5
 8001fd4:	705a      	strb	r2, [r3, #1]
  // send command
  select_adc();
 8001fd6:	f000 f857 	bl	8002088 <select_adc>
  HAL_StatusTypeDef SPI_Status;
  SPI_Status = HAL_SPI_Transmit(&hspi1, &command[0], 1, HAL_MAX_DELAY); //SPI.transfer(command[0]);
 8001fda:	2617      	movs	r6, #23
 8001fdc:	19bc      	adds	r4, r7, r6
 8001fde:	2301      	movs	r3, #1
 8001fe0:	425b      	negs	r3, r3
 8001fe2:	1979      	adds	r1, r7, r5
 8001fe4:	4827      	ldr	r0, [pc, #156]	; (8002084 <adc_read+0x104>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f001 fe82 	bl	8003cf0 <HAL_SPI_Transmit>
 8001fec:	0003      	movs	r3, r0
 8001fee:	7023      	strb	r3, [r4, #0]
  SPI_Status = HAL_SPI_Transmit(&hspi1, &command[1], 1, HAL_MAX_DELAY); //SPI.transfer(command[1]);
 8001ff0:	19bc      	adds	r4, r7, r6
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	425a      	negs	r2, r3
 8001ff6:	0028      	movs	r0, r5
 8001ff8:	183b      	adds	r3, r7, r0
 8001ffa:	1c59      	adds	r1, r3, #1
 8001ffc:	4821      	ldr	r0, [pc, #132]	; (8002084 <adc_read+0x104>)
 8001ffe:	0013      	movs	r3, r2
 8002000:	2201      	movs	r2, #1
 8002002:	f001 fe75 	bl	8003cf0 <HAL_SPI_Transmit>
 8002006:	0003      	movs	r3, r0
 8002008:	7023      	strb	r3, [r4, #0]

  add_dr_delay();
 800200a:	f000 f8d7 	bl	80021bc <add_dr_delay>

  // receive results
  // send 0x10 command to start data conversion on ADC
  uint8_t startCommCommand = 0x10; //SPI.transfer(0x10);
 800200e:	210b      	movs	r1, #11
 8002010:	187b      	adds	r3, r7, r1
 8002012:	2210      	movs	r2, #16
 8002014:	701a      	strb	r2, [r3, #0]
  SPI_Status = HAL_SPI_Transmit(&hspi1, &startCommCommand, 1, HAL_MAX_DELAY); //SPI.transfer(command[1]);
 8002016:	19bc      	adds	r4, r7, r6
 8002018:	2301      	movs	r3, #1
 800201a:	425b      	negs	r3, r3
 800201c:	1879      	adds	r1, r7, r1
 800201e:	4819      	ldr	r0, [pc, #100]	; (8002084 <adc_read+0x104>)
 8002020:	2201      	movs	r2, #1
 8002022:	f001 fe65 	bl	8003cf0 <HAL_SPI_Transmit>
 8002026:	0003      	movs	r3, r0
 8002028:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < 4; i++) {
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	e015      	b.n	800205c <adc_read+0xdc>
    uint8_t a = 0x00;
 8002030:	210a      	movs	r1, #10
 8002032:	187b      	adds	r3, r7, r1
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
    SPI_Status = HAL_SPI_TransmitReceive(&hspi1, &a, &data[i], 1, HAL_MAX_DELAY); //data[i] = SPI.transfer(0x00);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	18d2      	adds	r2, r2, r3
 800203e:	2317      	movs	r3, #23
 8002040:	18fc      	adds	r4, r7, r3
 8002042:	1879      	adds	r1, r7, r1
 8002044:	480f      	ldr	r0, [pc, #60]	; (8002084 <adc_read+0x104>)
 8002046:	2301      	movs	r3, #1
 8002048:	425b      	negs	r3, r3
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2301      	movs	r3, #1
 800204e:	f001 ff9d 	bl	8003f8c <HAL_SPI_TransmitReceive>
 8002052:	0003      	movs	r3, r0
 8002054:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < 4; i++) {
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	3301      	adds	r3, #1
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	2b03      	cmp	r3, #3
 8002060:	dde6      	ble.n	8002030 <adc_read+0xb0>
  }
  if (SPI_Status != HAL_OK)
 8002062:	2317      	movs	r3, #23
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <adc_read+0xf0>
  {
    Error_Handler();
 800206c:	f000 fa5c 	bl	8002528 <Error_Handler>
  }
  deselect_adc();
 8002070:	f000 f820 	bl	80020b4 <deselect_adc>
}
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	b007      	add	sp, #28
 800207a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207c:	20000088 	.word	0x20000088
 8002080:	20000080 	.word	0x20000080
 8002084:	20000090 	.word	0x20000090

08002088 <select_adc>:

void select_adc() {
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  // make sure CS_EE is not active
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_EE_Pin, GPIO_PIN_SET); //digitalWrite(_cs_ee_pin, HIGH);
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <select_adc+0x28>)
 800208e:	2201      	movs	r2, #1
 8002090:	2180      	movs	r1, #128	; 0x80
 8002092:	0018      	movs	r0, r3
 8002094:	f000 ff00 	bl	8002e98 <HAL_GPIO_WritePin>

  // enable CS_ADC
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_ADC_Pin, GPIO_PIN_RESET); //digitalWrite(_cs_adc_pin, LOW);
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <select_adc+0x28>)
 800209a:	2200      	movs	r2, #0
 800209c:	2140      	movs	r1, #64	; 0x40
 800209e:	0018      	movs	r0, r3
 80020a0:	f000 fefa 	bl	8002e98 <HAL_GPIO_WritePin>

  // the ADC interface operates in SPI mode 1 (CPOL = 0, CPHA = 1)
  SPI_Init_ADC(); //SPI.beginTransaction(SPISettings(1250000, MSBFIRST, SPI_MODE1));
 80020a4:	f000 f852 	bl	800214c <SPI_Init_ADC>
}
 80020a8:	46c0      	nop			; (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	50000400 	.word	0x50000400

080020b4 <deselect_adc>:

void deselect_adc() {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit(&hspi1); //SPI.endTransaction();
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <deselect_adc+0x20>)
 80020ba:	0018      	movs	r0, r3
 80020bc:	f001 fdef 	bl	8003c9e <HAL_SPI_DeInit>
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_ADC_Pin, GPIO_PIN_SET); //digitalWrite(_cs_adc_pin, HIGH);
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <deselect_adc+0x24>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	2140      	movs	r1, #64	; 0x40
 80020c6:	0018      	movs	r0, r3
 80020c8:	f000 fee6 	bl	8002e98 <HAL_GPIO_WritePin>
}
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	20000090 	.word	0x20000090
 80020d8:	50000400 	.word	0x50000400

080020dc <SPI_Init_EEPROM>:


static void SPI_Init_EEPROM(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  // SPI1 parameter configuration
  hspi1.Instance = SPI1;
 80020e0:	4b18      	ldr	r3, [pc, #96]	; (8002144 <SPI_Init_EEPROM+0x68>)
 80020e2:	4a19      	ldr	r2, [pc, #100]	; (8002148 <SPI_Init_EEPROM+0x6c>)
 80020e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <SPI_Init_EEPROM+0x68>)
 80020e8:	2282      	movs	r2, #130	; 0x82
 80020ea:	0052      	lsls	r2, r2, #1
 80020ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <SPI_Init_EEPROM+0x68>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <SPI_Init_EEPROM+0x68>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <SPI_Init_EEPROM+0x68>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <SPI_Init_EEPROM+0x68>)
 8002102:	2200      	movs	r2, #0
 8002104:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <SPI_Init_EEPROM+0x68>)
 8002108:	2280      	movs	r2, #128	; 0x80
 800210a:	0092      	lsls	r2, r2, #2
 800210c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <SPI_Init_EEPROM+0x68>)
 8002110:	2238      	movs	r2, #56	; 0x38
 8002112:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <SPI_Init_EEPROM+0x68>)
 8002116:	2200      	movs	r2, #0
 8002118:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <SPI_Init_EEPROM+0x68>)
 800211c:	2200      	movs	r2, #0
 800211e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <SPI_Init_EEPROM+0x68>)
 8002122:	2200      	movs	r2, #0
 8002124:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <SPI_Init_EEPROM+0x68>)
 8002128:	2207      	movs	r2, #7
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <SPI_Init_EEPROM+0x68>)
 800212e:	0018      	movs	r0, r3
 8002130:	f001 fd56 	bl	8003be0 <HAL_SPI_Init>
 8002134:	1e03      	subs	r3, r0, #0
 8002136:	d001      	beq.n	800213c <SPI_Init_EEPROM+0x60>
  {
    Error_Handler();
 8002138:	f000 f9f6 	bl	8002528 <Error_Handler>
  }
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	20000090 	.word	0x20000090
 8002148:	40013000 	.word	0x40013000

0800214c <SPI_Init_ADC>:

static void SPI_Init_ADC(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  // SPI1 parameter configuration
  hspi1.Instance = SPI1;
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <SPI_Init_ADC+0x68>)
 8002152:	4a19      	ldr	r2, [pc, #100]	; (80021b8 <SPI_Init_ADC+0x6c>)
 8002154:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <SPI_Init_ADC+0x68>)
 8002158:	2282      	movs	r2, #130	; 0x82
 800215a:	0052      	lsls	r2, r2, #1
 800215c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <SPI_Init_ADC+0x68>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <SPI_Init_ADC+0x68>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <SPI_Init_ADC+0x68>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002170:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <SPI_Init_ADC+0x68>)
 8002172:	2201      	movs	r2, #1
 8002174:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <SPI_Init_ADC+0x68>)
 8002178:	2280      	movs	r2, #128	; 0x80
 800217a:	0092      	lsls	r2, r2, #2
 800217c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <SPI_Init_ADC+0x68>)
 8002180:	2238      	movs	r2, #56	; 0x38
 8002182:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <SPI_Init_ADC+0x68>)
 8002186:	2200      	movs	r2, #0
 8002188:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <SPI_Init_ADC+0x68>)
 800218c:	2200      	movs	r2, #0
 800218e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <SPI_Init_ADC+0x68>)
 8002192:	2200      	movs	r2, #0
 8002194:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <SPI_Init_ADC+0x68>)
 8002198:	2207      	movs	r2, #7
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <SPI_Init_ADC+0x68>)
 800219e:	0018      	movs	r0, r3
 80021a0:	f001 fd1e 	bl	8003be0 <HAL_SPI_Init>
 80021a4:	1e03      	subs	r3, r0, #0
 80021a6:	d001      	beq.n	80021ac <SPI_Init_ADC+0x60>
  {
    Error_Handler();
 80021a8:	f000 f9be 	bl	8002528 <Error_Handler>
  }

}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	20000090 	.word	0x20000090
 80021b8:	40013000 	.word	0x40013000

080021bc <add_dr_delay>:

void add_dr_delay() {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
  float delay_duration = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
  // calculating delay based on the Data Rate
  switch (_data_rate) {
 80021c6:	4b22      	ldr	r3, [pc, #136]	; (8002250 <add_dr_delay+0x94>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b0e      	cmp	r3, #14
 80021cc:	d832      	bhi.n	8002234 <add_dr_delay+0x78>
 80021ce:	009a      	lsls	r2, r3, #2
 80021d0:	4b20      	ldr	r3, [pc, #128]	; (8002254 <add_dr_delay+0x98>)
 80021d2:	18d3      	adds	r3, r2, r3
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	469f      	mov	pc, r3
    case N_DR_20_SPS:
      delay_duration = MSEC_PER_SEC / 20;
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <add_dr_delay+0x9c>)
 80021da:	607b      	str	r3, [r7, #4]
      break;
 80021dc:	e02c      	b.n	8002238 <add_dr_delay+0x7c>
    case N_DR_45_SPS:
      delay_duration = MSEC_PER_SEC / 45;
 80021de:	4b1f      	ldr	r3, [pc, #124]	; (800225c <add_dr_delay+0xa0>)
 80021e0:	607b      	str	r3, [r7, #4]
      break;
 80021e2:	e029      	b.n	8002238 <add_dr_delay+0x7c>
    case N_DR_90_SPS:
      delay_duration = MSEC_PER_SEC / 90;
 80021e4:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <add_dr_delay+0xa4>)
 80021e6:	607b      	str	r3, [r7, #4]
      break;
 80021e8:	e026      	b.n	8002238 <add_dr_delay+0x7c>
    case N_DR_175_SPS:
      delay_duration = MSEC_PER_SEC / 175;
 80021ea:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <add_dr_delay+0xa8>)
 80021ec:	607b      	str	r3, [r7, #4]
      break;
 80021ee:	e023      	b.n	8002238 <add_dr_delay+0x7c>
    case N_DR_330_SPS:
      delay_duration = MSEC_PER_SEC / 330;
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <add_dr_delay+0xac>)
 80021f2:	607b      	str	r3, [r7, #4]
      break;
 80021f4:	e020      	b.n	8002238 <add_dr_delay+0x7c>
    case N_DR_600_SPS:
      delay_duration = MSEC_PER_SEC / 600;
 80021f6:	23fe      	movs	r3, #254	; 0xfe
 80021f8:	059b      	lsls	r3, r3, #22
 80021fa:	607b      	str	r3, [r7, #4]
      break;
 80021fc:	e01c      	b.n	8002238 <add_dr_delay+0x7c>
    case N_DR_1000_SPS:
      delay_duration = MSEC_PER_SEC / 1000;
 80021fe:	23fe      	movs	r3, #254	; 0xfe
 8002200:	059b      	lsls	r3, r3, #22
 8002202:	607b      	str	r3, [r7, #4]
      break;
 8002204:	e018      	b.n	8002238 <add_dr_delay+0x7c>
    case F_DR_40_SPS:
      delay_duration = MSEC_PER_SEC / 40;
 8002206:	4b19      	ldr	r3, [pc, #100]	; (800226c <add_dr_delay+0xb0>)
 8002208:	607b      	str	r3, [r7, #4]
      break;
 800220a:	e015      	b.n	8002238 <add_dr_delay+0x7c>
    case F_DR_90_SPS:
      delay_duration = MSEC_PER_SEC / 90;
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <add_dr_delay+0xa4>)
 800220e:	607b      	str	r3, [r7, #4]
      break;
 8002210:	e012      	b.n	8002238 <add_dr_delay+0x7c>
    case F_DR_180_SPS:
      delay_duration = MSEC_PER_SEC / 180;
 8002212:	4b14      	ldr	r3, [pc, #80]	; (8002264 <add_dr_delay+0xa8>)
 8002214:	607b      	str	r3, [r7, #4]
      break;
 8002216:	e00f      	b.n	8002238 <add_dr_delay+0x7c>
    case F_DR_350_SPS:
      delay_duration = MSEC_PER_SEC / 350;
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	05db      	lsls	r3, r3, #23
 800221c:	607b      	str	r3, [r7, #4]
      break;
 800221e:	e00b      	b.n	8002238 <add_dr_delay+0x7c>
    case F_DR_660_SPS:
      delay_duration = MSEC_PER_SEC / 660;
 8002220:	23fe      	movs	r3, #254	; 0xfe
 8002222:	059b      	lsls	r3, r3, #22
 8002224:	607b      	str	r3, [r7, #4]
      break;
 8002226:	e007      	b.n	8002238 <add_dr_delay+0x7c>
    case F_DR_1200_SPS:
      delay_duration = MSEC_PER_SEC / 1200;
 8002228:	2300      	movs	r3, #0
 800222a:	607b      	str	r3, [r7, #4]
      break;
 800222c:	e004      	b.n	8002238 <add_dr_delay+0x7c>
    case F_DR_2000_SPS:
      delay_duration = MSEC_PER_SEC / 2000;
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
      break;
 8002232:	e001      	b.n	8002238 <add_dr_delay+0x7c>
    default:
      delay_duration = 50;
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <add_dr_delay+0x9c>)
 8002236:	607b      	str	r3, [r7, #4]
  }
  HAL_Delay((int)delay_duration + 2);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7fe fe75 	bl	8000f28 <__aeabi_f2iz>
 800223e:	0003      	movs	r3, r0
 8002240:	3302      	adds	r3, #2
 8002242:	0018      	movs	r0, r3
 8002244:	f000 fb16 	bl	8002874 <HAL_Delay>
}
 8002248:	46c0      	nop			; (mov r8, r8)
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000088 	.word	0x20000088
 8002254:	08004f28 	.word	0x08004f28
 8002258:	42480000 	.word	0x42480000
 800225c:	41b00000 	.word	0x41b00000
 8002260:	41300000 	.word	0x41300000
 8002264:	40a00000 	.word	0x40a00000
 8002268:	40400000 	.word	0x40400000
 800226c:	41c80000 	.word	0x41c80000

08002270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002276:	f000 fa9d 	bl	80027b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800227a:	f000 f825 	bl	80022c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800227e:	f000 f8fd 	bl	800247c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002282:	f000 f8cb 	bl	800241c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002286:	f000 f891 	bl	80023ac <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_SPI_DeInit(&hspi1);
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <main+0x54>)
 800228c:	0018      	movs	r0, r3
 800228e:	f001 fd06 	bl	8003c9e <HAL_SPI_DeInit>
	DrvSPIInit();
 8002292:	f7ff fa4d 	bl	8001730 <DrvSPIInit>
	while (1)
	{
	float asd = get_temperature();
 8002296:	f7ff fb9d 	bl	80019d4 <get_temperature>
 800229a:	0003      	movs	r3, r0
 800229c:	0018      	movs	r0, r3
 800229e:	f7fe fe63 	bl	8000f68 <__aeabi_i2f>
 80022a2:	1c03      	adds	r3, r0, #0
 80022a4:	607b      	str	r3, [r7, #4]
	float presasd = get_pressure();
 80022a6:	f7ff fa69 	bl	800177c <get_pressure>
 80022aa:	0003      	movs	r3, r0
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7fe fe5b 	bl	8000f68 <__aeabi_i2f>
 80022b2:	1c03      	adds	r3, r0, #0
 80022b4:	603b      	str	r3, [r7, #0]
	HAL_Delay(500);
 80022b6:	23fa      	movs	r3, #250	; 0xfa
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	0018      	movs	r0, r3
 80022bc:	f000 fada 	bl	8002874 <HAL_Delay>
	{
 80022c0:	e7e9      	b.n	8002296 <main+0x26>
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	20000090 	.word	0x20000090

080022c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b099      	sub	sp, #100	; 0x64
 80022cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ce:	242c      	movs	r4, #44	; 0x2c
 80022d0:	193b      	adds	r3, r7, r4
 80022d2:	0018      	movs	r0, r3
 80022d4:	2334      	movs	r3, #52	; 0x34
 80022d6:	001a      	movs	r2, r3
 80022d8:	2100      	movs	r1, #0
 80022da:	f002 fd60 	bl	8004d9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022de:	2318      	movs	r3, #24
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	0018      	movs	r0, r3
 80022e4:	2314      	movs	r3, #20
 80022e6:	001a      	movs	r2, r3
 80022e8:	2100      	movs	r1, #0
 80022ea:	f002 fd58 	bl	8004d9e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022ee:	003b      	movs	r3, r7
 80022f0:	0018      	movs	r0, r3
 80022f2:	2318      	movs	r3, #24
 80022f4:	001a      	movs	r2, r3
 80022f6:	2100      	movs	r1, #0
 80022f8:	f002 fd51 	bl	8004d9e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022fc:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <SystemClock_Config+0xdc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a29      	ldr	r2, [pc, #164]	; (80023a8 <SystemClock_Config+0xe0>)
 8002302:	401a      	ands	r2, r3
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <SystemClock_Config+0xdc>)
 8002306:	2180      	movs	r1, #128	; 0x80
 8002308:	0109      	lsls	r1, r1, #4
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800230e:	0021      	movs	r1, r4
 8002310:	187b      	adds	r3, r7, r1
 8002312:	2202      	movs	r2, #2
 8002314:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002316:	187b      	adds	r3, r7, r1
 8002318:	2201      	movs	r2, #1
 800231a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800231c:	187b      	adds	r3, r7, r1
 800231e:	2210      	movs	r2, #16
 8002320:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002322:	187b      	adds	r3, r7, r1
 8002324:	2202      	movs	r2, #2
 8002326:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002328:	187b      	adds	r3, r7, r1
 800232a:	2200      	movs	r2, #0
 800232c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800232e:	187b      	adds	r3, r7, r1
 8002330:	2280      	movs	r2, #128	; 0x80
 8002332:	02d2      	lsls	r2, r2, #11
 8002334:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002336:	187b      	adds	r3, r7, r1
 8002338:	2280      	movs	r2, #128	; 0x80
 800233a:	03d2      	lsls	r2, r2, #15
 800233c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800233e:	187b      	adds	r3, r7, r1
 8002340:	0018      	movs	r0, r3
 8002342:	f000 fdc7 	bl	8002ed4 <HAL_RCC_OscConfig>
 8002346:	1e03      	subs	r3, r0, #0
 8002348:	d001      	beq.n	800234e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800234a:	f000 f8ed 	bl	8002528 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800234e:	2118      	movs	r1, #24
 8002350:	187b      	adds	r3, r7, r1
 8002352:	220f      	movs	r2, #15
 8002354:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002356:	187b      	adds	r3, r7, r1
 8002358:	2203      	movs	r2, #3
 800235a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800235c:	187b      	adds	r3, r7, r1
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002362:	187b      	adds	r3, r7, r1
 8002364:	2200      	movs	r2, #0
 8002366:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002368:	187b      	adds	r3, r7, r1
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800236e:	187b      	adds	r3, r7, r1
 8002370:	2101      	movs	r1, #1
 8002372:	0018      	movs	r0, r3
 8002374:	f001 f928 	bl	80035c8 <HAL_RCC_ClockConfig>
 8002378:	1e03      	subs	r3, r0, #0
 800237a:	d001      	beq.n	8002380 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800237c:	f000 f8d4 	bl	8002528 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002380:	003b      	movs	r3, r7
 8002382:	2202      	movs	r2, #2
 8002384:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002386:	003b      	movs	r3, r7
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800238c:	003b      	movs	r3, r7
 800238e:	0018      	movs	r0, r3
 8002390:	f001 fafe 	bl	8003990 <HAL_RCCEx_PeriphCLKConfig>
 8002394:	1e03      	subs	r3, r0, #0
 8002396:	d001      	beq.n	800239c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002398:	f000 f8c6 	bl	8002528 <Error_Handler>
  }
}
 800239c:	46c0      	nop			; (mov r8, r8)
 800239e:	46bd      	mov	sp, r7
 80023a0:	b019      	add	sp, #100	; 0x64
 80023a2:	bd90      	pop	{r4, r7, pc}
 80023a4:	40007000 	.word	0x40007000
 80023a8:	ffffe7ff 	.word	0xffffe7ff

080023ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <MX_SPI1_Init+0x68>)
 80023b2:	4a19      	ldr	r2, [pc, #100]	; (8002418 <MX_SPI1_Init+0x6c>)
 80023b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <MX_SPI1_Init+0x68>)
 80023b8:	2282      	movs	r2, #130	; 0x82
 80023ba:	0052      	lsls	r2, r2, #1
 80023bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <MX_SPI1_Init+0x68>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <MX_SPI1_Init+0x68>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <MX_SPI1_Init+0x68>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023d0:	4b10      	ldr	r3, [pc, #64]	; (8002414 <MX_SPI1_Init+0x68>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <MX_SPI1_Init+0x68>)
 80023d8:	2280      	movs	r2, #128	; 0x80
 80023da:	0092      	lsls	r2, r2, #2
 80023dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80023de:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <MX_SPI1_Init+0x68>)
 80023e0:	2238      	movs	r2, #56	; 0x38
 80023e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <MX_SPI1_Init+0x68>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <MX_SPI1_Init+0x68>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <MX_SPI1_Init+0x68>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <MX_SPI1_Init+0x68>)
 80023f8:	2207      	movs	r2, #7
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <MX_SPI1_Init+0x68>)
 80023fe:	0018      	movs	r0, r3
 8002400:	f001 fbee 	bl	8003be0 <HAL_SPI_Init>
 8002404:	1e03      	subs	r3, r0, #0
 8002406:	d001      	beq.n	800240c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002408:	f000 f88e 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800240c:	46c0      	nop			; (mov r8, r8)
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	20000090 	.word	0x20000090
 8002418:	40013000 	.word	0x40013000

0800241c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002420:	4b14      	ldr	r3, [pc, #80]	; (8002474 <MX_USART2_UART_Init+0x58>)
 8002422:	4a15      	ldr	r2, [pc, #84]	; (8002478 <MX_USART2_UART_Init+0x5c>)
 8002424:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <MX_USART2_UART_Init+0x58>)
 8002428:	22e1      	movs	r2, #225	; 0xe1
 800242a:	0252      	lsls	r2, r2, #9
 800242c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <MX_USART2_UART_Init+0x58>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <MX_USART2_UART_Init+0x58>)
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800243a:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <MX_USART2_UART_Init+0x58>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <MX_USART2_UART_Init+0x58>)
 8002442:	220c      	movs	r2, #12
 8002444:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002446:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <MX_USART2_UART_Init+0x58>)
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800244c:	4b09      	ldr	r3, [pc, #36]	; (8002474 <MX_USART2_UART_Init+0x58>)
 800244e:	2200      	movs	r2, #0
 8002450:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <MX_USART2_UART_Init+0x58>)
 8002454:	2200      	movs	r2, #0
 8002456:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <MX_USART2_UART_Init+0x58>)
 800245a:	2200      	movs	r2, #0
 800245c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <MX_USART2_UART_Init+0x58>)
 8002460:	0018      	movs	r0, r3
 8002462:	f001 fffd 	bl	8004460 <HAL_UART_Init>
 8002466:	1e03      	subs	r3, r0, #0
 8002468:	d001      	beq.n	800246e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800246a:	f000 f85d 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	200000e8 	.word	0x200000e8
 8002478:	40004400 	.word	0x40004400

0800247c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002482:	240c      	movs	r4, #12
 8002484:	193b      	adds	r3, r7, r4
 8002486:	0018      	movs	r0, r3
 8002488:	2314      	movs	r3, #20
 800248a:	001a      	movs	r2, r3
 800248c:	2100      	movs	r1, #0
 800248e:	f002 fc86 	bl	8004d9e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002492:	4b23      	ldr	r3, [pc, #140]	; (8002520 <MX_GPIO_Init+0xa4>)
 8002494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002496:	4b22      	ldr	r3, [pc, #136]	; (8002520 <MX_GPIO_Init+0xa4>)
 8002498:	2101      	movs	r1, #1
 800249a:	430a      	orrs	r2, r1
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <MX_GPIO_Init+0xa4>)
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	2201      	movs	r2, #1
 80024a4:	4013      	ands	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <MX_GPIO_Init+0xa4>)
 80024ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ae:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <MX_GPIO_Init+0xa4>)
 80024b0:	2102      	movs	r1, #2
 80024b2:	430a      	orrs	r2, r1
 80024b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80024b6:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <MX_GPIO_Init+0xa4>)
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	2202      	movs	r2, #2
 80024bc:	4013      	ands	r3, r2
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_ADC_Pin|SPI1_CS_EE_Pin, GPIO_PIN_RESET);
 80024c2:	4b18      	ldr	r3, [pc, #96]	; (8002524 <MX_GPIO_Init+0xa8>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	21c0      	movs	r1, #192	; 0xc0
 80024c8:	0018      	movs	r0, r3
 80024ca:	f000 fce5 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_DRDY_Pin */
  GPIO_InitStruct.Pin = SPI1_DRDY_Pin;
 80024ce:	0021      	movs	r1, r4
 80024d0:	187b      	adds	r3, r7, r1
 80024d2:	2202      	movs	r2, #2
 80024d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d6:	187b      	adds	r3, r7, r1
 80024d8:	2200      	movs	r2, #0
 80024da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	187b      	adds	r3, r7, r1
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI1_DRDY_GPIO_Port, &GPIO_InitStruct);
 80024e2:	000c      	movs	r4, r1
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	4a0f      	ldr	r2, [pc, #60]	; (8002524 <MX_GPIO_Init+0xa8>)
 80024e8:	0019      	movs	r1, r3
 80024ea:	0010      	movs	r0, r2
 80024ec:	f000 fa94 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_ADC_Pin SPI1_CS_EE_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_ADC_Pin|SPI1_CS_EE_Pin;
 80024f0:	0021      	movs	r1, r4
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	22c0      	movs	r2, #192	; 0xc0
 80024f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	2201      	movs	r2, #1
 80024fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	187b      	adds	r3, r7, r1
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250a:	187b      	adds	r3, r7, r1
 800250c:	4a05      	ldr	r2, [pc, #20]	; (8002524 <MX_GPIO_Init+0xa8>)
 800250e:	0019      	movs	r1, r3
 8002510:	0010      	movs	r0, r2
 8002512:	f000 fa81 	bl	8002a18 <HAL_GPIO_Init>

}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	46bd      	mov	sp, r7
 800251a:	b009      	add	sp, #36	; 0x24
 800251c:	bd90      	pop	{r4, r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	40021000 	.word	0x40021000
 8002524:	50000400 	.word	0x50000400

08002528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800252c:	46c0      	nop			; (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002538:	4b07      	ldr	r3, [pc, #28]	; (8002558 <HAL_MspInit+0x24>)
 800253a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_MspInit+0x24>)
 800253e:	2101      	movs	r1, #1
 8002540:	430a      	orrs	r2, r1
 8002542:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002544:	4b04      	ldr	r3, [pc, #16]	; (8002558 <HAL_MspInit+0x24>)
 8002546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_MspInit+0x24>)
 800254a:	2180      	movs	r1, #128	; 0x80
 800254c:	0549      	lsls	r1, r1, #21
 800254e:	430a      	orrs	r2, r1
 8002550:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000

0800255c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	230c      	movs	r3, #12
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	0018      	movs	r0, r3
 800256a:	2314      	movs	r3, #20
 800256c:	001a      	movs	r2, r3
 800256e:	2100      	movs	r1, #0
 8002570:	f002 fc15 	bl	8004d9e <memset>
  if(hspi->Instance==SPI1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <HAL_SPI_MspInit+0x7c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d128      	bne.n	80025d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800257e:	4b17      	ldr	r3, [pc, #92]	; (80025dc <HAL_SPI_MspInit+0x80>)
 8002580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002582:	4b16      	ldr	r3, [pc, #88]	; (80025dc <HAL_SPI_MspInit+0x80>)
 8002584:	2180      	movs	r1, #128	; 0x80
 8002586:	0149      	lsls	r1, r1, #5
 8002588:	430a      	orrs	r2, r1
 800258a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800258c:	4b13      	ldr	r3, [pc, #76]	; (80025dc <HAL_SPI_MspInit+0x80>)
 800258e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_SPI_MspInit+0x80>)
 8002592:	2102      	movs	r1, #2
 8002594:	430a      	orrs	r2, r1
 8002596:	62da      	str	r2, [r3, #44]	; 0x2c
 8002598:	4b10      	ldr	r3, [pc, #64]	; (80025dc <HAL_SPI_MspInit+0x80>)
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	2202      	movs	r2, #2
 800259e:	4013      	ands	r3, r2
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80025a4:	210c      	movs	r1, #12
 80025a6:	187b      	adds	r3, r7, r1
 80025a8:	2238      	movs	r2, #56	; 0x38
 80025aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	187b      	adds	r3, r7, r1
 80025ae:	2202      	movs	r2, #2
 80025b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	187b      	adds	r3, r7, r1
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	187b      	adds	r3, r7, r1
 80025ba:	2203      	movs	r2, #3
 80025bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80025be:	187b      	adds	r3, r7, r1
 80025c0:	2200      	movs	r2, #0
 80025c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	4a06      	ldr	r2, [pc, #24]	; (80025e0 <HAL_SPI_MspInit+0x84>)
 80025c8:	0019      	movs	r1, r3
 80025ca:	0010      	movs	r0, r2
 80025cc:	f000 fa24 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025d0:	46c0      	nop			; (mov r8, r8)
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b008      	add	sp, #32
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40013000 	.word	0x40013000
 80025dc:	40021000 	.word	0x40021000
 80025e0:	50000400 	.word	0x50000400

080025e4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a08      	ldr	r2, [pc, #32]	; (8002614 <HAL_SPI_MspDeInit+0x30>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d10a      	bne.n	800260c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_SPI_MspDeInit+0x34>)
 80025f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <HAL_SPI_MspDeInit+0x34>)
 80025fc:	4907      	ldr	r1, [pc, #28]	; (800261c <HAL_SPI_MspDeInit+0x38>)
 80025fe:	400a      	ands	r2, r1
 8002600:	635a      	str	r2, [r3, #52]	; 0x34
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <HAL_SPI_MspDeInit+0x3c>)
 8002604:	2138      	movs	r1, #56	; 0x38
 8002606:	0018      	movs	r0, r3
 8002608:	f000 fb74 	bl	8002cf4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40013000 	.word	0x40013000
 8002618:	40021000 	.word	0x40021000
 800261c:	ffffefff 	.word	0xffffefff
 8002620:	50000400 	.word	0x50000400

08002624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	230c      	movs	r3, #12
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	0018      	movs	r0, r3
 8002632:	2314      	movs	r3, #20
 8002634:	001a      	movs	r2, r3
 8002636:	2100      	movs	r1, #0
 8002638:	f002 fbb1 	bl	8004d9e <memset>
  if(huart->Instance==USART2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a18      	ldr	r2, [pc, #96]	; (80026a4 <HAL_UART_MspInit+0x80>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d129      	bne.n	800269a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002646:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <HAL_UART_MspInit+0x84>)
 8002648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800264a:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <HAL_UART_MspInit+0x84>)
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	0289      	lsls	r1, r1, #10
 8002650:	430a      	orrs	r2, r1
 8002652:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <HAL_UART_MspInit+0x84>)
 8002656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_UART_MspInit+0x84>)
 800265a:	2101      	movs	r1, #1
 800265c:	430a      	orrs	r2, r1
 800265e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_UART_MspInit+0x84>)
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	2201      	movs	r2, #1
 8002666:	4013      	ands	r3, r2
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800266c:	210c      	movs	r1, #12
 800266e:	187b      	adds	r3, r7, r1
 8002670:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <HAL_UART_MspInit+0x88>)
 8002672:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	187b      	adds	r3, r7, r1
 8002676:	2202      	movs	r2, #2
 8002678:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	187b      	adds	r3, r7, r1
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002680:	187b      	adds	r3, r7, r1
 8002682:	2203      	movs	r2, #3
 8002684:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002686:	187b      	adds	r3, r7, r1
 8002688:	2204      	movs	r2, #4
 800268a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268c:	187a      	adds	r2, r7, r1
 800268e:	23a0      	movs	r3, #160	; 0xa0
 8002690:	05db      	lsls	r3, r3, #23
 8002692:	0011      	movs	r1, r2
 8002694:	0018      	movs	r0, r3
 8002696:	f000 f9bf 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	b008      	add	sp, #32
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	40004400 	.word	0x40004400
 80026a8:	40021000 	.word	0x40021000
 80026ac:	00008004 	.word	0x00008004

080026b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026be:	e7fe      	b.n	80026be <HardFault_Handler+0x4>

080026c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80026c4:	46c0      	nop			; (mov r8, r8)
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026d8:	f000 f8b6 	bl	8002848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80026e8:	4b17      	ldr	r3, [pc, #92]	; (8002748 <SystemInit+0x64>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b16      	ldr	r3, [pc, #88]	; (8002748 <SystemInit+0x64>)
 80026ee:	2180      	movs	r1, #128	; 0x80
 80026f0:	0049      	lsls	r1, r1, #1
 80026f2:	430a      	orrs	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80026f6:	4b14      	ldr	r3, [pc, #80]	; (8002748 <SystemInit+0x64>)
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	4b13      	ldr	r3, [pc, #76]	; (8002748 <SystemInit+0x64>)
 80026fc:	4913      	ldr	r1, [pc, #76]	; (800274c <SystemInit+0x68>)
 80026fe:	400a      	ands	r2, r1
 8002700:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <SystemInit+0x64>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <SystemInit+0x64>)
 8002708:	4911      	ldr	r1, [pc, #68]	; (8002750 <SystemInit+0x6c>)
 800270a:	400a      	ands	r2, r1
 800270c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <SystemInit+0x64>)
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <SystemInit+0x64>)
 8002714:	2101      	movs	r1, #1
 8002716:	438a      	bics	r2, r1
 8002718:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <SystemInit+0x64>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <SystemInit+0x64>)
 8002720:	490c      	ldr	r1, [pc, #48]	; (8002754 <SystemInit+0x70>)
 8002722:	400a      	ands	r2, r1
 8002724:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <SystemInit+0x64>)
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	4b07      	ldr	r3, [pc, #28]	; (8002748 <SystemInit+0x64>)
 800272c:	490a      	ldr	r1, [pc, #40]	; (8002758 <SystemInit+0x74>)
 800272e:	400a      	ands	r2, r1
 8002730:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <SystemInit+0x64>)
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <SystemInit+0x78>)
 800273a:	2280      	movs	r2, #128	; 0x80
 800273c:	0512      	lsls	r2, r2, #20
 800273e:	609a      	str	r2, [r3, #8]
#endif
}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	40021000 	.word	0x40021000
 800274c:	88ff400c 	.word	0x88ff400c
 8002750:	fef6fff6 	.word	0xfef6fff6
 8002754:	fffbffff 	.word	0xfffbffff
 8002758:	ff02ffff 	.word	0xff02ffff
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002760:	480d      	ldr	r0, [pc, #52]	; (8002798 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002762:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002764:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002766:	e003      	b.n	8002770 <LoopCopyDataInit>

08002768 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800276a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800276c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800276e:	3104      	adds	r1, #4

08002770 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002770:	480b      	ldr	r0, [pc, #44]	; (80027a0 <LoopForever+0xa>)
  ldr  r3, =_edata
 8002772:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002774:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002776:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002778:	d3f6      	bcc.n	8002768 <CopyDataInit>
  ldr  r2, =_sbss
 800277a:	4a0b      	ldr	r2, [pc, #44]	; (80027a8 <LoopForever+0x12>)
  b  LoopFillZerobss
 800277c:	e002      	b.n	8002784 <LoopFillZerobss>

0800277e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800277e:	2300      	movs	r3, #0
  str  r3, [r2]
 8002780:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002782:	3204      	adds	r2, #4

08002784 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <LoopForever+0x16>)
  cmp  r2, r3
 8002786:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002788:	d3f9      	bcc.n	800277e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800278a:	f7ff ffab 	bl	80026e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800278e:	f002 fad9 	bl	8004d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002792:	f7ff fd6d 	bl	8002270 <main>

08002796 <LoopForever>:

LoopForever:
    b LoopForever
 8002796:	e7fe      	b.n	8002796 <LoopForever>
   ldr   r0, =_estack
 8002798:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 800279c:	08004fe0 	.word	0x08004fe0
  ldr  r0, =_sdata
 80027a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027a4:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80027a8:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80027ac:	2000016c 	.word	0x2000016c

080027b0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027b0:	e7fe      	b.n	80027b0 <ADC1_COMP_IRQHandler>
	...

080027b4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027ba:	1dfb      	adds	r3, r7, #7
 80027bc:	2200      	movs	r2, #0
 80027be:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_Init+0x3c>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <HAL_Init+0x3c>)
 80027c6:	2140      	movs	r1, #64	; 0x40
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027cc:	2000      	movs	r0, #0
 80027ce:	f000 f811 	bl	80027f4 <HAL_InitTick>
 80027d2:	1e03      	subs	r3, r0, #0
 80027d4:	d003      	beq.n	80027de <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80027d6:	1dfb      	adds	r3, r7, #7
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
 80027dc:	e001      	b.n	80027e2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027de:	f7ff fea9 	bl	8002534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027e2:	1dfb      	adds	r3, r7, #7
 80027e4:	781b      	ldrb	r3, [r3, #0]
}
 80027e6:	0018      	movs	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b002      	add	sp, #8
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	40022000 	.word	0x40022000

080027f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027fc:	230f      	movs	r3, #15
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002804:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <HAL_InitTick+0x50>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	23fa      	movs	r3, #250	; 0xfa
 800280a:	0099      	lsls	r1, r3, #2
 800280c:	0010      	movs	r0, r2
 800280e:	f7fd fc7b 	bl	8000108 <__udivsi3>
 8002812:	0003      	movs	r3, r0
 8002814:	0018      	movs	r0, r3
 8002816:	f000 f8f2 	bl	80029fe <HAL_SYSTICK_Config>
 800281a:	1e03      	subs	r3, r0, #0
 800281c:	d004      	beq.n	8002828 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800281e:	230f      	movs	r3, #15
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	e006      	b.n	8002836 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	2301      	movs	r3, #1
 800282c:	425b      	negs	r3, r3
 800282e:	2200      	movs	r2, #0
 8002830:	0018      	movs	r0, r3
 8002832:	f000 f8cf 	bl	80029d4 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8002836:	230f      	movs	r3, #15
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	781b      	ldrb	r3, [r3, #0]
}
 800283c:	0018      	movs	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	b004      	add	sp, #16
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000000 	.word	0x20000000

08002848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  uwTick++;
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_IncTick+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	4b02      	ldr	r3, [pc, #8]	; (800285c <HAL_IncTick+0x14>)
 8002854:	601a      	str	r2, [r3, #0]
}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000168 	.word	0x20000168

08002860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  return uwTick;
 8002864:	4b02      	ldr	r3, [pc, #8]	; (8002870 <HAL_GetTick+0x10>)
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	0018      	movs	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	20000168 	.word	0x20000168

08002874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800287c:	f7ff fff0 	bl	8002860 <HAL_GetTick>
 8002880:	0003      	movs	r3, r0
 8002882:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3301      	adds	r3, #1
 800288c:	d002      	beq.n	8002894 <HAL_Delay+0x20>
  {
    wait++;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3301      	adds	r3, #1
 8002892:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002894:	46c0      	nop			; (mov r8, r8)
 8002896:	f7ff ffe3 	bl	8002860 <HAL_GetTick>
 800289a:	0002      	movs	r2, r0
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d8f7      	bhi.n	8002896 <HAL_Delay+0x22>
  {
  }
}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b004      	add	sp, #16
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	0002      	movs	r2, r0
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	1dfb      	adds	r3, r7, #7
 80028bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80028be:	1dfb      	adds	r3, r7, #7
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b7f      	cmp	r3, #127	; 0x7f
 80028c4:	d932      	bls.n	800292c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028c6:	4a2f      	ldr	r2, [pc, #188]	; (8002984 <NVIC_SetPriority+0xd4>)
 80028c8:	1dfb      	adds	r3, r7, #7
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	0019      	movs	r1, r3
 80028ce:	230f      	movs	r3, #15
 80028d0:	400b      	ands	r3, r1
 80028d2:	3b08      	subs	r3, #8
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	3306      	adds	r3, #6
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	18d3      	adds	r3, r2, r3
 80028dc:	3304      	adds	r3, #4
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1dfa      	adds	r2, r7, #7
 80028e2:	7812      	ldrb	r2, [r2, #0]
 80028e4:	0011      	movs	r1, r2
 80028e6:	2203      	movs	r2, #3
 80028e8:	400a      	ands	r2, r1
 80028ea:	00d2      	lsls	r2, r2, #3
 80028ec:	21ff      	movs	r1, #255	; 0xff
 80028ee:	4091      	lsls	r1, r2
 80028f0:	000a      	movs	r2, r1
 80028f2:	43d2      	mvns	r2, r2
 80028f4:	401a      	ands	r2, r3
 80028f6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	019b      	lsls	r3, r3, #6
 80028fc:	22ff      	movs	r2, #255	; 0xff
 80028fe:	401a      	ands	r2, r3
 8002900:	1dfb      	adds	r3, r7, #7
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	0018      	movs	r0, r3
 8002906:	2303      	movs	r3, #3
 8002908:	4003      	ands	r3, r0
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800290e:	481d      	ldr	r0, [pc, #116]	; (8002984 <NVIC_SetPriority+0xd4>)
 8002910:	1dfb      	adds	r3, r7, #7
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	001c      	movs	r4, r3
 8002916:	230f      	movs	r3, #15
 8002918:	4023      	ands	r3, r4
 800291a:	3b08      	subs	r3, #8
 800291c:	089b      	lsrs	r3, r3, #2
 800291e:	430a      	orrs	r2, r1
 8002920:	3306      	adds	r3, #6
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	18c3      	adds	r3, r0, r3
 8002926:	3304      	adds	r3, #4
 8002928:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800292a:	e027      	b.n	800297c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800292c:	4a16      	ldr	r2, [pc, #88]	; (8002988 <NVIC_SetPriority+0xd8>)
 800292e:	1dfb      	adds	r3, r7, #7
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b25b      	sxtb	r3, r3
 8002934:	089b      	lsrs	r3, r3, #2
 8002936:	33c0      	adds	r3, #192	; 0xc0
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	589b      	ldr	r3, [r3, r2]
 800293c:	1dfa      	adds	r2, r7, #7
 800293e:	7812      	ldrb	r2, [r2, #0]
 8002940:	0011      	movs	r1, r2
 8002942:	2203      	movs	r2, #3
 8002944:	400a      	ands	r2, r1
 8002946:	00d2      	lsls	r2, r2, #3
 8002948:	21ff      	movs	r1, #255	; 0xff
 800294a:	4091      	lsls	r1, r2
 800294c:	000a      	movs	r2, r1
 800294e:	43d2      	mvns	r2, r2
 8002950:	401a      	ands	r2, r3
 8002952:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	019b      	lsls	r3, r3, #6
 8002958:	22ff      	movs	r2, #255	; 0xff
 800295a:	401a      	ands	r2, r3
 800295c:	1dfb      	adds	r3, r7, #7
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	0018      	movs	r0, r3
 8002962:	2303      	movs	r3, #3
 8002964:	4003      	ands	r3, r0
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800296a:	4807      	ldr	r0, [pc, #28]	; (8002988 <NVIC_SetPriority+0xd8>)
 800296c:	1dfb      	adds	r3, r7, #7
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	b25b      	sxtb	r3, r3
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	430a      	orrs	r2, r1
 8002976:	33c0      	adds	r3, #192	; 0xc0
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	501a      	str	r2, [r3, r0]
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b003      	add	sp, #12
 8002982:	bd90      	pop	{r4, r7, pc}
 8002984:	e000ed00 	.word	0xe000ed00
 8002988:	e000e100 	.word	0xe000e100

0800298c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	4a0c      	ldr	r2, [pc, #48]	; (80029cc <SysTick_Config+0x40>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800299e:	2301      	movs	r3, #1
 80029a0:	e010      	b.n	80029c4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <SysTick_Config+0x44>)
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	3a01      	subs	r2, #1
 80029a8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029aa:	2301      	movs	r3, #1
 80029ac:	425b      	negs	r3, r3
 80029ae:	2103      	movs	r1, #3
 80029b0:	0018      	movs	r0, r3
 80029b2:	f7ff ff7d 	bl	80028b0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <SysTick_Config+0x44>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <SysTick_Config+0x44>)
 80029be:	2207      	movs	r2, #7
 80029c0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	0018      	movs	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b002      	add	sp, #8
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	00ffffff 	.word	0x00ffffff
 80029d0:	e000e010 	.word	0xe000e010

080029d4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	210f      	movs	r1, #15
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	1c02      	adds	r2, r0, #0
 80029e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	187b      	adds	r3, r7, r1
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	b25b      	sxtb	r3, r3
 80029ee:	0011      	movs	r1, r2
 80029f0:	0018      	movs	r0, r3
 80029f2:	f7ff ff5d 	bl	80028b0 <NVIC_SetPriority>
}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b004      	add	sp, #16
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7ff ffbf 	bl	800298c <SysTick_Config>
 8002a0e:	0003      	movs	r3, r0
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b002      	add	sp, #8
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a2e:	e149      	b.n	8002cc4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2101      	movs	r1, #1
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4091      	lsls	r1, r2
 8002a3a:	000a      	movs	r2, r1
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d100      	bne.n	8002a48 <HAL_GPIO_Init+0x30>
 8002a46:	e13a      	b.n	8002cbe <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d003      	beq.n	8002a58 <HAL_GPIO_Init+0x40>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b12      	cmp	r3, #18
 8002a56:	d123      	bne.n	8002aa0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	08da      	lsrs	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3208      	adds	r2, #8
 8002a60:	0092      	lsls	r2, r2, #2
 8002a62:	58d3      	ldr	r3, [r2, r3]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2207      	movs	r2, #7
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	220f      	movs	r2, #15
 8002a70:	409a      	lsls	r2, r3
 8002a72:	0013      	movs	r3, r2
 8002a74:	43da      	mvns	r2, r3
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	2107      	movs	r1, #7
 8002a84:	400b      	ands	r3, r1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	0013      	movs	r3, r2
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	08da      	lsrs	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3208      	adds	r2, #8
 8002a9a:	0092      	lsls	r2, r2, #2
 8002a9c:	6939      	ldr	r1, [r7, #16]
 8002a9e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d00b      	beq.n	8002ac0 <HAL_GPIO_Init+0xa8>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d007      	beq.n	8002ac0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ab4:	2b11      	cmp	r3, #17
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b12      	cmp	r3, #18
 8002abe:	d130      	bne.n	8002b22 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	409a      	lsls	r2, r3
 8002ace:	0013      	movs	r3, r2
 8002ad0:	43da      	mvns	r2, r3
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	0013      	movs	r3, r2
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af6:	2201      	movs	r2, #1
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	409a      	lsls	r2, r3
 8002afc:	0013      	movs	r3, r2
 8002afe:	43da      	mvns	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	401a      	ands	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	409a      	lsls	r2, r3
 8002b14:	0013      	movs	r3, r2
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	0013      	movs	r3, r2
 8002b32:	43da      	mvns	r2, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2203      	movs	r2, #3
 8002b40:	401a      	ands	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	409a      	lsls	r2, r3
 8002b48:	0013      	movs	r3, r2
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	2203      	movs	r2, #3
 8002b62:	409a      	lsls	r2, r3
 8002b64:	0013      	movs	r3, r2
 8002b66:	43da      	mvns	r2, r3
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	409a      	lsls	r2, r3
 8002b78:	0013      	movs	r3, r2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	055b      	lsls	r3, r3, #21
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d100      	bne.n	8002b94 <HAL_GPIO_Init+0x17c>
 8002b92:	e094      	b.n	8002cbe <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b94:	4b51      	ldr	r3, [pc, #324]	; (8002cdc <HAL_GPIO_Init+0x2c4>)
 8002b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b98:	4b50      	ldr	r3, [pc, #320]	; (8002cdc <HAL_GPIO_Init+0x2c4>)
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8002ba0:	4a4f      	ldr	r2, [pc, #316]	; (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	089b      	lsrs	r3, r3, #2
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	589b      	ldr	r3, [r3, r2]
 8002bac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	220f      	movs	r2, #15
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	0013      	movs	r3, r2
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	23a0      	movs	r3, #160	; 0xa0
 8002bc8:	05db      	lsls	r3, r3, #23
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d013      	beq.n	8002bf6 <HAL_GPIO_Init+0x1de>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a44      	ldr	r2, [pc, #272]	; (8002ce4 <HAL_GPIO_Init+0x2cc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00d      	beq.n	8002bf2 <HAL_GPIO_Init+0x1da>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a43      	ldr	r2, [pc, #268]	; (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <HAL_GPIO_Init+0x1d6>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a42      	ldr	r2, [pc, #264]	; (8002cec <HAL_GPIO_Init+0x2d4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d101      	bne.n	8002bea <HAL_GPIO_Init+0x1d2>
 8002be6:	2305      	movs	r3, #5
 8002be8:	e006      	b.n	8002bf8 <HAL_GPIO_Init+0x1e0>
 8002bea:	2306      	movs	r3, #6
 8002bec:	e004      	b.n	8002bf8 <HAL_GPIO_Init+0x1e0>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e002      	b.n	8002bf8 <HAL_GPIO_Init+0x1e0>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_GPIO_Init+0x1e0>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	2103      	movs	r1, #3
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	0092      	lsls	r2, r2, #2
 8002c00:	4093      	lsls	r3, r2
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c08:	4935      	ldr	r1, [pc, #212]	; (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	3302      	adds	r3, #2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c16:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <HAL_GPIO_Init+0x2d8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	025b      	lsls	r3, r3, #9
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c3a:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <HAL_GPIO_Init+0x2d8>)
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002c40:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <HAL_GPIO_Init+0x2d8>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	43da      	mvns	r2, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	029b      	lsls	r3, r3, #10
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c64:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <HAL_GPIO_Init+0x2d8>)
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c6a:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <HAL_GPIO_Init+0x2d8>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	43da      	mvns	r2, r3
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	035b      	lsls	r3, r3, #13
 8002c82:	4013      	ands	r3, r2
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c8e:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <HAL_GPIO_Init+0x2d8>)
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c94:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <HAL_GPIO_Init+0x2d8>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	43da      	mvns	r2, r3
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	039b      	lsls	r3, r3, #14
 8002cac:	4013      	ands	r3, r2
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_GPIO_Init+0x2d8>)
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	40da      	lsrs	r2, r3
 8002ccc:	1e13      	subs	r3, r2, #0
 8002cce:	d000      	beq.n	8002cd2 <HAL_GPIO_Init+0x2ba>
 8002cd0:	e6ae      	b.n	8002a30 <HAL_GPIO_Init+0x18>
  }
}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b006      	add	sp, #24
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	50000400 	.word	0x50000400
 8002ce8:	50000800 	.word	0x50000800
 8002cec:	50001c00 	.word	0x50001c00
 8002cf0:	40010400 	.word	0x40010400

08002cf4 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8002d0a:	e0b0      	b.n	8002e6e <HAL_GPIO_DeInit+0x17a>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	409a      	lsls	r2, r3
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]

    if(iocurrent)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d100      	bne.n	8002d20 <HAL_GPIO_DeInit+0x2c>
 8002d1e:	e0a3      	b.n	8002e68 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	2103      	movs	r1, #3
 8002d2a:	4099      	lsls	r1, r3
 8002d2c:	000b      	movs	r3, r1
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	601a      	str	r2, [r3, #0]
           
      /* Configure the default Alternate Function in current IO */ 
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	08da      	lsrs	r2, r3, #3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3208      	adds	r2, #8
 8002d3c:	0092      	lsls	r2, r2, #2
 8002d3e:	58d3      	ldr	r3, [r2, r3]
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	2107      	movs	r1, #7
 8002d44:	400a      	ands	r2, r1
 8002d46:	0092      	lsls	r2, r2, #2
 8002d48:	210f      	movs	r1, #15
 8002d4a:	4091      	lsls	r1, r2
 8002d4c:	000a      	movs	r2, r1
 8002d4e:	43d1      	mvns	r1, r2
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	08d2      	lsrs	r2, r2, #3
 8002d54:	4019      	ands	r1, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3208      	adds	r2, #8
 8002d5a:	0092      	lsls	r2, r2, #2
 8002d5c:	50d1      	str	r1, [r2, r3]
      
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	0052      	lsls	r2, r2, #1
 8002d66:	2103      	movs	r1, #3
 8002d68:	4091      	lsls	r1, r2
 8002d6a:	000a      	movs	r2, r1
 8002d6c:	43d2      	mvns	r2, r2
 8002d6e:	401a      	ands	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	609a      	str	r2, [r3, #8]
      
      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2101      	movs	r1, #1
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4091      	lsls	r1, r2
 8002d7e:	000a      	movs	r2, r1
 8002d80:	43d2      	mvns	r2, r2
 8002d82:	401a      	ands	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	605a      	str	r2, [r3, #4]
      
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	0052      	lsls	r2, r2, #1
 8002d90:	2103      	movs	r1, #3
 8002d92:	4091      	lsls	r1, r2
 8002d94:	000a      	movs	r2, r1
 8002d96:	43d2      	mvns	r2, r2
 8002d98:	401a      	ands	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	60da      	str	r2, [r3, #12]
      
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002d9e:	4a39      	ldr	r2, [pc, #228]	; (8002e84 <HAL_GPIO_DeInit+0x190>)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	089b      	lsrs	r3, r3, #2
 8002da4:	3302      	adds	r3, #2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	589b      	ldr	r3, [r3, r2]
 8002daa:	60fb      	str	r3, [r7, #12]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2203      	movs	r2, #3
 8002db0:	4013      	ands	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	220f      	movs	r2, #15
 8002db6:	409a      	lsls	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	23a0      	movs	r3, #160	; 0xa0
 8002dc2:	05db      	lsls	r3, r3, #23
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d013      	beq.n	8002df0 <HAL_GPIO_DeInit+0xfc>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a2f      	ldr	r2, [pc, #188]	; (8002e88 <HAL_GPIO_DeInit+0x194>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00d      	beq.n	8002dec <HAL_GPIO_DeInit+0xf8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a2e      	ldr	r2, [pc, #184]	; (8002e8c <HAL_GPIO_DeInit+0x198>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d007      	beq.n	8002de8 <HAL_GPIO_DeInit+0xf4>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a2d      	ldr	r2, [pc, #180]	; (8002e90 <HAL_GPIO_DeInit+0x19c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d101      	bne.n	8002de4 <HAL_GPIO_DeInit+0xf0>
 8002de0:	2305      	movs	r3, #5
 8002de2:	e006      	b.n	8002df2 <HAL_GPIO_DeInit+0xfe>
 8002de4:	2306      	movs	r3, #6
 8002de6:	e004      	b.n	8002df2 <HAL_GPIO_DeInit+0xfe>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e002      	b.n	8002df2 <HAL_GPIO_DeInit+0xfe>
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <HAL_GPIO_DeInit+0xfe>
 8002df0:	2300      	movs	r3, #0
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	2103      	movs	r1, #3
 8002df6:	400a      	ands	r2, r1
 8002df8:	0092      	lsls	r2, r2, #2
 8002dfa:	4093      	lsls	r3, r2
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d132      	bne.n	8002e68 <HAL_GPIO_DeInit+0x174>
      {
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2203      	movs	r2, #3
 8002e06:	4013      	ands	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	0013      	movs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002e12:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <HAL_GPIO_DeInit+0x190>)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	3302      	adds	r3, #2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	589a      	ldr	r2, [r3, r2]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	43d9      	mvns	r1, r3
 8002e22:	4818      	ldr	r0, [pc, #96]	; (8002e84 <HAL_GPIO_DeInit+0x190>)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	400a      	ands	r2, r1
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	501a      	str	r2, [r3, r0]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002e30:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <HAL_GPIO_DeInit+0x1a0>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	43d9      	mvns	r1, r3
 8002e38:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <HAL_GPIO_DeInit+0x1a0>)
 8002e3a:	400a      	ands	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <HAL_GPIO_DeInit+0x1a0>)
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	43d9      	mvns	r1, r3
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <HAL_GPIO_DeInit+0x1a0>)
 8002e48:	400a      	ands	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002e4c:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <HAL_GPIO_DeInit+0x1a0>)
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	43d9      	mvns	r1, r3
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <HAL_GPIO_DeInit+0x1a0>)
 8002e56:	400a      	ands	r2, r1
 8002e58:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <HAL_GPIO_DeInit+0x1a0>)
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	43d9      	mvns	r1, r3
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <HAL_GPIO_DeInit+0x1a0>)
 8002e64:	400a      	ands	r2, r1
 8002e66:	60da      	str	r2, [r3, #12]
      }
    }
     position++;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	40da      	lsrs	r2, r3
 8002e74:	1e13      	subs	r3, r2, #0
 8002e76:	d000      	beq.n	8002e7a <HAL_GPIO_DeInit+0x186>
 8002e78:	e748      	b.n	8002d0c <HAL_GPIO_DeInit+0x18>
  }
}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b006      	add	sp, #24
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	40010000 	.word	0x40010000
 8002e88:	50000400 	.word	0x50000400
 8002e8c:	50000800 	.word	0x50000800
 8002e90:	50001c00 	.word	0x50001c00
 8002e94:	40010400 	.word	0x40010400

08002e98 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	0008      	movs	r0, r1
 8002ea2:	0011      	movs	r1, r2
 8002ea4:	1cbb      	adds	r3, r7, #2
 8002ea6:	1c02      	adds	r2, r0, #0
 8002ea8:	801a      	strh	r2, [r3, #0]
 8002eaa:	1c7b      	adds	r3, r7, #1
 8002eac:	1c0a      	adds	r2, r1, #0
 8002eae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8002eb0:	1c7b      	adds	r3, r7, #1
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eb8:	1cbb      	adds	r3, r7, #2
 8002eba:	881a      	ldrh	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002ec0:	e003      	b.n	8002eca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002ec2:	1cbb      	adds	r3, r7, #2
 8002ec4:	881a      	ldrh	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b002      	add	sp, #8
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed4:	b5b0      	push	{r4, r5, r7, lr}
 8002ed6:	b08a      	sub	sp, #40	; 0x28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f000 fb6a 	bl	80035bc <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee8:	4bc7      	ldr	r3, [pc, #796]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	220c      	movs	r2, #12
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ef2:	4bc5      	ldr	r3, [pc, #788]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	025b      	lsls	r3, r3, #9
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2201      	movs	r2, #1
 8002f04:	4013      	ands	r3, r2
 8002f06:	d100      	bne.n	8002f0a <HAL_RCC_OscConfig+0x36>
 8002f08:	e07d      	b.n	8003006 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d007      	beq.n	8002f20 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b0c      	cmp	r3, #12
 8002f14:	d112      	bne.n	8002f3c <HAL_RCC_OscConfig+0x68>
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	025b      	lsls	r3, r3, #9
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d10d      	bne.n	8002f3c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f20:	4bb9      	ldr	r3, [pc, #740]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	029b      	lsls	r3, r3, #10
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d100      	bne.n	8002f2e <HAL_RCC_OscConfig+0x5a>
 8002f2c:	e06a      	b.n	8003004 <HAL_RCC_OscConfig+0x130>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d166      	bne.n	8003004 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	f000 fb40 	bl	80035bc <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	025b      	lsls	r3, r3, #9
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_OscConfig+0x84>
 8002f48:	4baf      	ldr	r3, [pc, #700]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4bae      	ldr	r3, [pc, #696]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8002f4e:	2180      	movs	r1, #128	; 0x80
 8002f50:	0249      	lsls	r1, r1, #9
 8002f52:	430a      	orrs	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	e027      	b.n	8002fa8 <HAL_RCC_OscConfig+0xd4>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	23a0      	movs	r3, #160	; 0xa0
 8002f5e:	02db      	lsls	r3, r3, #11
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d10e      	bne.n	8002f82 <HAL_RCC_OscConfig+0xae>
 8002f64:	4ba8      	ldr	r3, [pc, #672]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4ba7      	ldr	r3, [pc, #668]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8002f6a:	2180      	movs	r1, #128	; 0x80
 8002f6c:	02c9      	lsls	r1, r1, #11
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	4ba5      	ldr	r3, [pc, #660]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4ba4      	ldr	r3, [pc, #656]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8002f78:	2180      	movs	r1, #128	; 0x80
 8002f7a:	0249      	lsls	r1, r1, #9
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	e012      	b.n	8002fa8 <HAL_RCC_OscConfig+0xd4>
 8002f82:	4ba1      	ldr	r3, [pc, #644]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4ba0      	ldr	r3, [pc, #640]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8002f88:	49a0      	ldr	r1, [pc, #640]	; (800320c <HAL_RCC_OscConfig+0x338>)
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	4b9e      	ldr	r3, [pc, #632]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	025b      	lsls	r3, r3, #9
 8002f96:	4013      	ands	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4b9a      	ldr	r3, [pc, #616]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4b99      	ldr	r3, [pc, #612]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8002fa2:	499b      	ldr	r1, [pc, #620]	; (8003210 <HAL_RCC_OscConfig+0x33c>)
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d014      	beq.n	8002fda <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7ff fc56 	bl	8002860 <HAL_GetTick>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fba:	f7ff fc51 	bl	8002860 <HAL_GetTick>
 8002fbe:	0002      	movs	r2, r0
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b64      	cmp	r3, #100	; 0x64
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e2f7      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fcc:	4b8e      	ldr	r3, [pc, #568]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	029b      	lsls	r3, r3, #10
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0xe6>
 8002fd8:	e015      	b.n	8003006 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fda:	f7ff fc41 	bl	8002860 <HAL_GetTick>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7ff fc3c 	bl	8002860 <HAL_GetTick>
 8002fe8:	0002      	movs	r2, r0
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e2e2      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ff6:	4b84      	ldr	r3, [pc, #528]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	029b      	lsls	r3, r3, #10
 8002ffe:	4013      	ands	r3, r2
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x110>
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003004:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2202      	movs	r2, #2
 800300c:	4013      	ands	r3, r2
 800300e:	d100      	bne.n	8003012 <HAL_RCC_OscConfig+0x13e>
 8003010:	e098      	b.n	8003144 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	2220      	movs	r2, #32
 800301c:	4013      	ands	r3, r2
 800301e:	d009      	beq.n	8003034 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003020:	4b79      	ldr	r3, [pc, #484]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b78      	ldr	r3, [pc, #480]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8003026:	2120      	movs	r1, #32
 8003028:	430a      	orrs	r2, r1
 800302a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	2220      	movs	r2, #32
 8003030:	4393      	bics	r3, r2
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	2b04      	cmp	r3, #4
 8003038:	d005      	beq.n	8003046 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	2b0c      	cmp	r3, #12
 800303e:	d13d      	bne.n	80030bc <HAL_RCC_OscConfig+0x1e8>
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d13a      	bne.n	80030bc <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003046:	4b70      	ldr	r3, [pc, #448]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2204      	movs	r2, #4
 800304c:	4013      	ands	r3, r2
 800304e:	d004      	beq.n	800305a <HAL_RCC_OscConfig+0x186>
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e2b0      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305a:	4b6b      	ldr	r3, [pc, #428]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4a6d      	ldr	r2, [pc, #436]	; (8003214 <HAL_RCC_OscConfig+0x340>)
 8003060:	4013      	ands	r3, r2
 8003062:	0019      	movs	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	021a      	lsls	r2, r3, #8
 800306a:	4b67      	ldr	r3, [pc, #412]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 800306c:	430a      	orrs	r2, r1
 800306e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003070:	4b65      	ldr	r3, [pc, #404]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2209      	movs	r2, #9
 8003076:	4393      	bics	r3, r2
 8003078:	0019      	movs	r1, r3
 800307a:	4b63      	ldr	r3, [pc, #396]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 800307c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307e:	430a      	orrs	r2, r1
 8003080:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003082:	f000 fbcb 	bl	800381c <HAL_RCC_GetSysClockFreq>
 8003086:	0001      	movs	r1, r0
 8003088:	4b5f      	ldr	r3, [pc, #380]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	220f      	movs	r2, #15
 8003090:	4013      	ands	r3, r2
 8003092:	4a61      	ldr	r2, [pc, #388]	; (8003218 <HAL_RCC_OscConfig+0x344>)
 8003094:	5cd3      	ldrb	r3, [r2, r3]
 8003096:	000a      	movs	r2, r1
 8003098:	40da      	lsrs	r2, r3
 800309a:	4b60      	ldr	r3, [pc, #384]	; (800321c <HAL_RCC_OscConfig+0x348>)
 800309c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800309e:	2513      	movs	r5, #19
 80030a0:	197c      	adds	r4, r7, r5
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7ff fba6 	bl	80027f4 <HAL_InitTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80030ac:	197b      	adds	r3, r7, r5
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d047      	beq.n	8003144 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 80030b4:	2313      	movs	r3, #19
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	e27f      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d027      	beq.n	8003112 <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80030c2:	4b51      	ldr	r3, [pc, #324]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2209      	movs	r2, #9
 80030c8:	4393      	bics	r3, r2
 80030ca:	0019      	movs	r1, r3
 80030cc:	4b4e      	ldr	r3, [pc, #312]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 80030ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d0:	430a      	orrs	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7ff fbc4 	bl	8002860 <HAL_GetTick>
 80030d8:	0003      	movs	r3, r0
 80030da:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030de:	f7ff fbbf 	bl	8002860 <HAL_GetTick>
 80030e2:	0002      	movs	r2, r0
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e265      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030f0:	4b45      	ldr	r3, [pc, #276]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2204      	movs	r2, #4
 80030f6:	4013      	ands	r3, r2
 80030f8:	d0f1      	beq.n	80030de <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fa:	4b43      	ldr	r3, [pc, #268]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4a45      	ldr	r2, [pc, #276]	; (8003214 <HAL_RCC_OscConfig+0x340>)
 8003100:	4013      	ands	r3, r2
 8003102:	0019      	movs	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	021a      	lsls	r2, r3, #8
 800310a:	4b3f      	ldr	r3, [pc, #252]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 800310c:	430a      	orrs	r2, r1
 800310e:	605a      	str	r2, [r3, #4]
 8003110:	e018      	b.n	8003144 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003112:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4b3c      	ldr	r3, [pc, #240]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8003118:	2101      	movs	r1, #1
 800311a:	438a      	bics	r2, r1
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7ff fb9f 	bl	8002860 <HAL_GetTick>
 8003122:	0003      	movs	r3, r0
 8003124:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003128:	f7ff fb9a 	bl	8002860 <HAL_GetTick>
 800312c:	0002      	movs	r2, r0
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e240      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800313a:	4b33      	ldr	r3, [pc, #204]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2204      	movs	r2, #4
 8003140:	4013      	ands	r3, r2
 8003142:	d1f1      	bne.n	8003128 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2210      	movs	r2, #16
 800314a:	4013      	ands	r3, r2
 800314c:	d100      	bne.n	8003150 <HAL_RCC_OscConfig+0x27c>
 800314e:	e09e      	b.n	800328e <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d13f      	bne.n	80031d6 <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003156:	4b2c      	ldr	r3, [pc, #176]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4013      	ands	r3, r2
 8003160:	d005      	beq.n	800316e <HAL_RCC_OscConfig+0x29a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e226      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800316e:	4b26      	ldr	r3, [pc, #152]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4a2b      	ldr	r2, [pc, #172]	; (8003220 <HAL_RCC_OscConfig+0x34c>)
 8003174:	4013      	ands	r3, r2
 8003176:	0019      	movs	r1, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	4b22      	ldr	r3, [pc, #136]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 800317e:	430a      	orrs	r2, r1
 8003180:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003182:	4b21      	ldr	r3, [pc, #132]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	0a19      	lsrs	r1, r3, #8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	061a      	lsls	r2, r3, #24
 8003190:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	0b5b      	lsrs	r3, r3, #13
 800319c:	3301      	adds	r3, #1
 800319e:	2280      	movs	r2, #128	; 0x80
 80031a0:	0212      	lsls	r2, r2, #8
 80031a2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80031a4:	4b18      	ldr	r3, [pc, #96]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	210f      	movs	r1, #15
 80031ac:	400b      	ands	r3, r1
 80031ae:	491a      	ldr	r1, [pc, #104]	; (8003218 <HAL_RCC_OscConfig+0x344>)
 80031b0:	5ccb      	ldrb	r3, [r1, r3]
 80031b2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80031b4:	4b19      	ldr	r3, [pc, #100]	; (800321c <HAL_RCC_OscConfig+0x348>)
 80031b6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80031b8:	2513      	movs	r5, #19
 80031ba:	197c      	adds	r4, r7, r5
 80031bc:	2000      	movs	r0, #0
 80031be:	f7ff fb19 	bl	80027f4 <HAL_InitTick>
 80031c2:	0003      	movs	r3, r0
 80031c4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80031c6:	197b      	adds	r3, r7, r5
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d05f      	beq.n	800328e <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 80031ce:	2313      	movs	r3, #19
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	e1f2      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d03d      	beq.n	800325a <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_OscConfig+0x334>)
 80031e4:	2180      	movs	r1, #128	; 0x80
 80031e6:	0049      	lsls	r1, r1, #1
 80031e8:	430a      	orrs	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7ff fb38 	bl	8002860 <HAL_GetTick>
 80031f0:	0003      	movs	r3, r0
 80031f2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80031f4:	e016      	b.n	8003224 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031f6:	f7ff fb33 	bl	8002860 <HAL_GetTick>
 80031fa:	0002      	movs	r2, r0
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d90f      	bls.n	8003224 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e1d9      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
 8003208:	40021000 	.word	0x40021000
 800320c:	fffeffff 	.word	0xfffeffff
 8003210:	fffbffff 	.word	0xfffbffff
 8003214:	ffffe0ff 	.word	0xffffe0ff
 8003218:	08004f64 	.word	0x08004f64
 800321c:	20000000 	.word	0x20000000
 8003220:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003224:	4bca      	ldr	r3, [pc, #808]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4013      	ands	r3, r2
 800322e:	d0e2      	beq.n	80031f6 <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003230:	4bc7      	ldr	r3, [pc, #796]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4ac7      	ldr	r2, [pc, #796]	; (8003554 <HAL_RCC_OscConfig+0x680>)
 8003236:	4013      	ands	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1a      	ldr	r2, [r3, #32]
 800323e:	4bc4      	ldr	r3, [pc, #784]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003244:	4bc2      	ldr	r3, [pc, #776]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	0a19      	lsrs	r1, r3, #8
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	061a      	lsls	r2, r3, #24
 8003252:	4bbf      	ldr	r3, [pc, #764]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 8003254:	430a      	orrs	r2, r1
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	e019      	b.n	800328e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800325a:	4bbd      	ldr	r3, [pc, #756]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4bbc      	ldr	r3, [pc, #752]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 8003260:	49bd      	ldr	r1, [pc, #756]	; (8003558 <HAL_RCC_OscConfig+0x684>)
 8003262:	400a      	ands	r2, r1
 8003264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7ff fafb 	bl	8002860 <HAL_GetTick>
 800326a:	0003      	movs	r3, r0
 800326c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003270:	f7ff faf6 	bl	8002860 <HAL_GetTick>
 8003274:	0002      	movs	r2, r0
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e19c      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003282:	4bb3      	ldr	r3, [pc, #716]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4013      	ands	r3, r2
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2208      	movs	r2, #8
 8003294:	4013      	ands	r3, r2
 8003296:	d036      	beq.n	8003306 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d019      	beq.n	80032d4 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a0:	4bab      	ldr	r3, [pc, #684]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80032a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032a4:	4baa      	ldr	r3, [pc, #680]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80032a6:	2101      	movs	r1, #1
 80032a8:	430a      	orrs	r2, r1
 80032aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ac:	f7ff fad8 	bl	8002860 <HAL_GetTick>
 80032b0:	0003      	movs	r3, r0
 80032b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b6:	f7ff fad3 	bl	8002860 <HAL_GetTick>
 80032ba:	0002      	movs	r2, r0
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e179      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032c8:	4ba1      	ldr	r3, [pc, #644]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80032ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032cc:	2202      	movs	r2, #2
 80032ce:	4013      	ands	r3, r2
 80032d0:	d0f1      	beq.n	80032b6 <HAL_RCC_OscConfig+0x3e2>
 80032d2:	e018      	b.n	8003306 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d4:	4b9e      	ldr	r3, [pc, #632]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80032d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032d8:	4b9d      	ldr	r3, [pc, #628]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80032da:	2101      	movs	r1, #1
 80032dc:	438a      	bics	r2, r1
 80032de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e0:	f7ff fabe 	bl	8002860 <HAL_GetTick>
 80032e4:	0003      	movs	r3, r0
 80032e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ea:	f7ff fab9 	bl	8002860 <HAL_GetTick>
 80032ee:	0002      	movs	r2, r0
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e15f      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032fc:	4b94      	ldr	r3, [pc, #592]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80032fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003300:	2202      	movs	r2, #2
 8003302:	4013      	ands	r3, r2
 8003304:	d1f1      	bne.n	80032ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2204      	movs	r2, #4
 800330c:	4013      	ands	r3, r2
 800330e:	d100      	bne.n	8003312 <HAL_RCC_OscConfig+0x43e>
 8003310:	e0af      	b.n	8003472 <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003312:	2323      	movs	r3, #35	; 0x23
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331a:	4b8d      	ldr	r3, [pc, #564]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 800331c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	055b      	lsls	r3, r3, #21
 8003322:	4013      	ands	r3, r2
 8003324:	d10a      	bne.n	800333c <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	4b8a      	ldr	r3, [pc, #552]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 8003328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800332a:	4b89      	ldr	r3, [pc, #548]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	0549      	lsls	r1, r1, #21
 8003330:	430a      	orrs	r2, r1
 8003332:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003334:	2323      	movs	r3, #35	; 0x23
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	4b87      	ldr	r3, [pc, #540]	; (800355c <HAL_RCC_OscConfig+0x688>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	4013      	ands	r3, r2
 8003346:	d11a      	bne.n	800337e <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003348:	4b84      	ldr	r3, [pc, #528]	; (800355c <HAL_RCC_OscConfig+0x688>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b83      	ldr	r3, [pc, #524]	; (800355c <HAL_RCC_OscConfig+0x688>)
 800334e:	2180      	movs	r1, #128	; 0x80
 8003350:	0049      	lsls	r1, r1, #1
 8003352:	430a      	orrs	r2, r1
 8003354:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003356:	f7ff fa83 	bl	8002860 <HAL_GetTick>
 800335a:	0003      	movs	r3, r0
 800335c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003360:	f7ff fa7e 	bl	8002860 <HAL_GetTick>
 8003364:	0002      	movs	r2, r0
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e124      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003372:	4b7a      	ldr	r3, [pc, #488]	; (800355c <HAL_RCC_OscConfig+0x688>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4013      	ands	r3, r2
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	429a      	cmp	r2, r3
 8003388:	d107      	bne.n	800339a <HAL_RCC_OscConfig+0x4c6>
 800338a:	4b71      	ldr	r3, [pc, #452]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 800338c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800338e:	4b70      	ldr	r3, [pc, #448]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 8003390:	2180      	movs	r1, #128	; 0x80
 8003392:	0049      	lsls	r1, r1, #1
 8003394:	430a      	orrs	r2, r1
 8003396:	651a      	str	r2, [r3, #80]	; 0x50
 8003398:	e031      	b.n	80033fe <HAL_RCC_OscConfig+0x52a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x4e8>
 80033a2:	4b6b      	ldr	r3, [pc, #428]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80033a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033a6:	4b6a      	ldr	r3, [pc, #424]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80033a8:	496b      	ldr	r1, [pc, #428]	; (8003558 <HAL_RCC_OscConfig+0x684>)
 80033aa:	400a      	ands	r2, r1
 80033ac:	651a      	str	r2, [r3, #80]	; 0x50
 80033ae:	4b68      	ldr	r3, [pc, #416]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80033b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033b2:	4b67      	ldr	r3, [pc, #412]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80033b4:	496a      	ldr	r1, [pc, #424]	; (8003560 <HAL_RCC_OscConfig+0x68c>)
 80033b6:	400a      	ands	r2, r1
 80033b8:	651a      	str	r2, [r3, #80]	; 0x50
 80033ba:	e020      	b.n	80033fe <HAL_RCC_OscConfig+0x52a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	23a0      	movs	r3, #160	; 0xa0
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d10e      	bne.n	80033e6 <HAL_RCC_OscConfig+0x512>
 80033c8:	4b61      	ldr	r3, [pc, #388]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80033ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033cc:	4b60      	ldr	r3, [pc, #384]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80033ce:	2180      	movs	r1, #128	; 0x80
 80033d0:	00c9      	lsls	r1, r1, #3
 80033d2:	430a      	orrs	r2, r1
 80033d4:	651a      	str	r2, [r3, #80]	; 0x50
 80033d6:	4b5e      	ldr	r3, [pc, #376]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80033d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033da:	4b5d      	ldr	r3, [pc, #372]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80033dc:	2180      	movs	r1, #128	; 0x80
 80033de:	0049      	lsls	r1, r1, #1
 80033e0:	430a      	orrs	r2, r1
 80033e2:	651a      	str	r2, [r3, #80]	; 0x50
 80033e4:	e00b      	b.n	80033fe <HAL_RCC_OscConfig+0x52a>
 80033e6:	4b5a      	ldr	r3, [pc, #360]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80033e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033ea:	4b59      	ldr	r3, [pc, #356]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80033ec:	495a      	ldr	r1, [pc, #360]	; (8003558 <HAL_RCC_OscConfig+0x684>)
 80033ee:	400a      	ands	r2, r1
 80033f0:	651a      	str	r2, [r3, #80]	; 0x50
 80033f2:	4b57      	ldr	r3, [pc, #348]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80033f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033f6:	4b56      	ldr	r3, [pc, #344]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80033f8:	4959      	ldr	r1, [pc, #356]	; (8003560 <HAL_RCC_OscConfig+0x68c>)
 80033fa:	400a      	ands	r2, r1
 80033fc:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d015      	beq.n	8003432 <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003406:	f7ff fa2b 	bl	8002860 <HAL_GetTick>
 800340a:	0003      	movs	r3, r0
 800340c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800340e:	e009      	b.n	8003424 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7ff fa26 	bl	8002860 <HAL_GetTick>
 8003414:	0002      	movs	r2, r0
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	4a52      	ldr	r2, [pc, #328]	; (8003564 <HAL_RCC_OscConfig+0x690>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0cb      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003424:	4b4a      	ldr	r3, [pc, #296]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 8003426:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4013      	ands	r3, r2
 800342e:	d0ef      	beq.n	8003410 <HAL_RCC_OscConfig+0x53c>
 8003430:	e014      	b.n	800345c <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003432:	f7ff fa15 	bl	8002860 <HAL_GetTick>
 8003436:	0003      	movs	r3, r0
 8003438:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800343a:	e009      	b.n	8003450 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800343c:	f7ff fa10 	bl	8002860 <HAL_GetTick>
 8003440:	0002      	movs	r2, r0
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	4a47      	ldr	r2, [pc, #284]	; (8003564 <HAL_RCC_OscConfig+0x690>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e0b5      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003450:	4b3f      	ldr	r3, [pc, #252]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 8003452:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4013      	ands	r3, r2
 800345a:	d1ef      	bne.n	800343c <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800345c:	2323      	movs	r3, #35	; 0x23
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d105      	bne.n	8003472 <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003466:	4b3a      	ldr	r3, [pc, #232]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 8003468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800346a:	4b39      	ldr	r3, [pc, #228]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 800346c:	493e      	ldr	r1, [pc, #248]	; (8003568 <HAL_RCC_OscConfig+0x694>)
 800346e:	400a      	ands	r2, r1
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2b00      	cmp	r3, #0
 8003478:	d100      	bne.n	800347c <HAL_RCC_OscConfig+0x5a8>
 800347a:	e09e      	b.n	80035ba <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	2b0c      	cmp	r3, #12
 8003480:	d100      	bne.n	8003484 <HAL_RCC_OscConfig+0x5b0>
 8003482:	e077      	b.n	8003574 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	2b02      	cmp	r3, #2
 800348a:	d145      	bne.n	8003518 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348c:	4b30      	ldr	r3, [pc, #192]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b2f      	ldr	r3, [pc, #188]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 8003492:	4936      	ldr	r1, [pc, #216]	; (800356c <HAL_RCC_OscConfig+0x698>)
 8003494:	400a      	ands	r2, r1
 8003496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7ff f9e2 	bl	8002860 <HAL_GetTick>
 800349c:	0003      	movs	r3, r0
 800349e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a2:	f7ff f9dd 	bl	8002860 <HAL_GetTick>
 80034a6:	0002      	movs	r2, r0
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e083      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80034b4:	4b26      	ldr	r3, [pc, #152]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	049b      	lsls	r3, r3, #18
 80034bc:	4013      	ands	r3, r2
 80034be:	d1f0      	bne.n	80034a2 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c0:	4b23      	ldr	r3, [pc, #140]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4a2a      	ldr	r2, [pc, #168]	; (8003570 <HAL_RCC_OscConfig+0x69c>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	0019      	movs	r1, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	431a      	orrs	r2, r3
 80034da:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80034dc:	430a      	orrs	r2, r1
 80034de:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e0:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 80034e6:	2180      	movs	r1, #128	; 0x80
 80034e8:	0449      	lsls	r1, r1, #17
 80034ea:	430a      	orrs	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7ff f9b7 	bl	8002860 <HAL_GetTick>
 80034f2:	0003      	movs	r3, r0
 80034f4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f8:	f7ff f9b2 	bl	8002860 <HAL_GetTick>
 80034fc:	0002      	movs	r2, r0
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e058      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800350a:	4b11      	ldr	r3, [pc, #68]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	2380      	movs	r3, #128	; 0x80
 8003510:	049b      	lsls	r3, r3, #18
 8003512:	4013      	ands	r3, r2
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x624>
 8003516:	e050      	b.n	80035ba <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003518:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 800351e:	4913      	ldr	r1, [pc, #76]	; (800356c <HAL_RCC_OscConfig+0x698>)
 8003520:	400a      	ands	r2, r1
 8003522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7ff f99c 	bl	8002860 <HAL_GetTick>
 8003528:	0003      	movs	r3, r0
 800352a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352e:	f7ff f997 	bl	8002860 <HAL_GetTick>
 8003532:	0002      	movs	r2, r0
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e03d      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003540:	4b03      	ldr	r3, [pc, #12]	; (8003550 <HAL_RCC_OscConfig+0x67c>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	049b      	lsls	r3, r3, #18
 8003548:	4013      	ands	r3, r2
 800354a:	d1f0      	bne.n	800352e <HAL_RCC_OscConfig+0x65a>
 800354c:	e035      	b.n	80035ba <HAL_RCC_OscConfig+0x6e6>
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	40021000 	.word	0x40021000
 8003554:	ffff1fff 	.word	0xffff1fff
 8003558:	fffffeff 	.word	0xfffffeff
 800355c:	40007000 	.word	0x40007000
 8003560:	fffffbff 	.word	0xfffffbff
 8003564:	00001388 	.word	0x00001388
 8003568:	efffffff 	.word	0xefffffff
 800356c:	feffffff 	.word	0xfeffffff
 8003570:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e01d      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003580:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <HAL_RCC_OscConfig+0x6f0>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	025b      	lsls	r3, r3, #9
 800358c:	401a      	ands	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003592:	429a      	cmp	r2, r3
 8003594:	d10f      	bne.n	80035b6 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	23f0      	movs	r3, #240	; 0xf0
 800359a:	039b      	lsls	r3, r3, #14
 800359c:	401a      	ands	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	23c0      	movs	r3, #192	; 0xc0
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	401a      	ands	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d001      	beq.n	80035ba <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	0018      	movs	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	b00a      	add	sp, #40	; 0x28
 80035c2:	bdb0      	pop	{r4, r5, r7, pc}
 80035c4:	40021000 	.word	0x40021000

080035c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c8:	b5b0      	push	{r4, r5, r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e10d      	b.n	80037f8 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035dc:	4b88      	ldr	r3, [pc, #544]	; (8003800 <HAL_RCC_ClockConfig+0x238>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2201      	movs	r2, #1
 80035e2:	4013      	ands	r3, r2
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d911      	bls.n	800360e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b85      	ldr	r3, [pc, #532]	; (8003800 <HAL_RCC_ClockConfig+0x238>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2201      	movs	r2, #1
 80035f0:	4393      	bics	r3, r2
 80035f2:	0019      	movs	r1, r3
 80035f4:	4b82      	ldr	r3, [pc, #520]	; (8003800 <HAL_RCC_ClockConfig+0x238>)
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fc:	4b80      	ldr	r3, [pc, #512]	; (8003800 <HAL_RCC_ClockConfig+0x238>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2201      	movs	r2, #1
 8003602:	4013      	ands	r3, r2
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d001      	beq.n	800360e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e0f4      	b.n	80037f8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2202      	movs	r2, #2
 8003614:	4013      	ands	r3, r2
 8003616:	d009      	beq.n	800362c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003618:	4b7a      	ldr	r3, [pc, #488]	; (8003804 <HAL_RCC_ClockConfig+0x23c>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	22f0      	movs	r2, #240	; 0xf0
 800361e:	4393      	bics	r3, r2
 8003620:	0019      	movs	r1, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	4b77      	ldr	r3, [pc, #476]	; (8003804 <HAL_RCC_ClockConfig+0x23c>)
 8003628:	430a      	orrs	r2, r1
 800362a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2201      	movs	r2, #1
 8003632:	4013      	ands	r3, r2
 8003634:	d100      	bne.n	8003638 <HAL_RCC_ClockConfig+0x70>
 8003636:	e089      	b.n	800374c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d107      	bne.n	8003650 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003640:	4b70      	ldr	r3, [pc, #448]	; (8003804 <HAL_RCC_ClockConfig+0x23c>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	029b      	lsls	r3, r3, #10
 8003648:	4013      	ands	r3, r2
 800364a:	d120      	bne.n	800368e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0d3      	b.n	80037f8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d107      	bne.n	8003668 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003658:	4b6a      	ldr	r3, [pc, #424]	; (8003804 <HAL_RCC_ClockConfig+0x23c>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	049b      	lsls	r3, r3, #18
 8003660:	4013      	ands	r3, r2
 8003662:	d114      	bne.n	800368e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0c7      	b.n	80037f8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d106      	bne.n	800367e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003670:	4b64      	ldr	r3, [pc, #400]	; (8003804 <HAL_RCC_ClockConfig+0x23c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2204      	movs	r2, #4
 8003676:	4013      	ands	r3, r2
 8003678:	d109      	bne.n	800368e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0bc      	b.n	80037f8 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800367e:	4b61      	ldr	r3, [pc, #388]	; (8003804 <HAL_RCC_ClockConfig+0x23c>)
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4013      	ands	r3, r2
 8003688:	d101      	bne.n	800368e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e0b4      	b.n	80037f8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368e:	4b5d      	ldr	r3, [pc, #372]	; (8003804 <HAL_RCC_ClockConfig+0x23c>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2203      	movs	r2, #3
 8003694:	4393      	bics	r3, r2
 8003696:	0019      	movs	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	4b59      	ldr	r3, [pc, #356]	; (8003804 <HAL_RCC_ClockConfig+0x23c>)
 800369e:	430a      	orrs	r2, r1
 80036a0:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a2:	f7ff f8dd 	bl	8002860 <HAL_GetTick>
 80036a6:	0003      	movs	r3, r0
 80036a8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d111      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036b2:	e009      	b.n	80036c8 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b4:	f7ff f8d4 	bl	8002860 <HAL_GetTick>
 80036b8:	0002      	movs	r2, r0
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	4a52      	ldr	r2, [pc, #328]	; (8003808 <HAL_RCC_ClockConfig+0x240>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e097      	b.n	80037f8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036c8:	4b4e      	ldr	r3, [pc, #312]	; (8003804 <HAL_RCC_ClockConfig+0x23c>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	220c      	movs	r2, #12
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d1ef      	bne.n	80036b4 <HAL_RCC_ClockConfig+0xec>
 80036d4:	e03a      	b.n	800374c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d111      	bne.n	8003702 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036de:	e009      	b.n	80036f4 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e0:	f7ff f8be 	bl	8002860 <HAL_GetTick>
 80036e4:	0002      	movs	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	4a47      	ldr	r2, [pc, #284]	; (8003808 <HAL_RCC_ClockConfig+0x240>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e081      	b.n	80037f8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036f4:	4b43      	ldr	r3, [pc, #268]	; (8003804 <HAL_RCC_ClockConfig+0x23c>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	220c      	movs	r2, #12
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b0c      	cmp	r3, #12
 80036fe:	d1ef      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x118>
 8003700:	e024      	b.n	800374c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d11b      	bne.n	8003742 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800370a:	e009      	b.n	8003720 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800370c:	f7ff f8a8 	bl	8002860 <HAL_GetTick>
 8003710:	0002      	movs	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	4a3c      	ldr	r2, [pc, #240]	; (8003808 <HAL_RCC_ClockConfig+0x240>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e06b      	b.n	80037f8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003720:	4b38      	ldr	r3, [pc, #224]	; (8003804 <HAL_RCC_ClockConfig+0x23c>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	220c      	movs	r2, #12
 8003726:	4013      	ands	r3, r2
 8003728:	2b04      	cmp	r3, #4
 800372a:	d1ef      	bne.n	800370c <HAL_RCC_ClockConfig+0x144>
 800372c:	e00e      	b.n	800374c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372e:	f7ff f897 	bl	8002860 <HAL_GetTick>
 8003732:	0002      	movs	r2, r0
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	4a33      	ldr	r2, [pc, #204]	; (8003808 <HAL_RCC_ClockConfig+0x240>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e05a      	b.n	80037f8 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003742:	4b30      	ldr	r3, [pc, #192]	; (8003804 <HAL_RCC_ClockConfig+0x23c>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	220c      	movs	r2, #12
 8003748:	4013      	ands	r3, r2
 800374a:	d1f0      	bne.n	800372e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800374c:	4b2c      	ldr	r3, [pc, #176]	; (8003800 <HAL_RCC_ClockConfig+0x238>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2201      	movs	r2, #1
 8003752:	4013      	ands	r3, r2
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d211      	bcs.n	800377e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b29      	ldr	r3, [pc, #164]	; (8003800 <HAL_RCC_ClockConfig+0x238>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2201      	movs	r2, #1
 8003760:	4393      	bics	r3, r2
 8003762:	0019      	movs	r1, r3
 8003764:	4b26      	ldr	r3, [pc, #152]	; (8003800 <HAL_RCC_ClockConfig+0x238>)
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376c:	4b24      	ldr	r3, [pc, #144]	; (8003800 <HAL_RCC_ClockConfig+0x238>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2201      	movs	r2, #1
 8003772:	4013      	ands	r3, r2
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d001      	beq.n	800377e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e03c      	b.n	80037f8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2204      	movs	r2, #4
 8003784:	4013      	ands	r3, r2
 8003786:	d009      	beq.n	800379c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003788:	4b1e      	ldr	r3, [pc, #120]	; (8003804 <HAL_RCC_ClockConfig+0x23c>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4a1f      	ldr	r2, [pc, #124]	; (800380c <HAL_RCC_ClockConfig+0x244>)
 800378e:	4013      	ands	r3, r2
 8003790:	0019      	movs	r1, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <HAL_RCC_ClockConfig+0x23c>)
 8003798:	430a      	orrs	r2, r1
 800379a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2208      	movs	r2, #8
 80037a2:	4013      	ands	r3, r2
 80037a4:	d00a      	beq.n	80037bc <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037a6:	4b17      	ldr	r3, [pc, #92]	; (8003804 <HAL_RCC_ClockConfig+0x23c>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	4a19      	ldr	r2, [pc, #100]	; (8003810 <HAL_RCC_ClockConfig+0x248>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	0019      	movs	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	00da      	lsls	r2, r3, #3
 80037b6:	4b13      	ldr	r3, [pc, #76]	; (8003804 <HAL_RCC_ClockConfig+0x23c>)
 80037b8:	430a      	orrs	r2, r1
 80037ba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037bc:	f000 f82e 	bl	800381c <HAL_RCC_GetSysClockFreq>
 80037c0:	0001      	movs	r1, r0
 80037c2:	4b10      	ldr	r3, [pc, #64]	; (8003804 <HAL_RCC_ClockConfig+0x23c>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	220f      	movs	r2, #15
 80037ca:	4013      	ands	r3, r2
 80037cc:	4a11      	ldr	r2, [pc, #68]	; (8003814 <HAL_RCC_ClockConfig+0x24c>)
 80037ce:	5cd3      	ldrb	r3, [r2, r3]
 80037d0:	000a      	movs	r2, r1
 80037d2:	40da      	lsrs	r2, r3
 80037d4:	4b10      	ldr	r3, [pc, #64]	; (8003818 <HAL_RCC_ClockConfig+0x250>)
 80037d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80037d8:	250b      	movs	r5, #11
 80037da:	197c      	adds	r4, r7, r5
 80037dc:	2000      	movs	r0, #0
 80037de:	f7ff f809 	bl	80027f4 <HAL_InitTick>
 80037e2:	0003      	movs	r3, r0
 80037e4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80037e6:	197b      	adds	r3, r7, r5
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80037ee:	230b      	movs	r3, #11
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	e000      	b.n	80037f8 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b004      	add	sp, #16
 80037fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003800:	40022000 	.word	0x40022000
 8003804:	40021000 	.word	0x40021000
 8003808:	00001388 	.word	0x00001388
 800380c:	fffff8ff 	.word	0xfffff8ff
 8003810:	ffffc7ff 	.word	0xffffc7ff
 8003814:	08004f64 	.word	0x08004f64
 8003818:	20000000 	.word	0x20000000

0800381c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003822:	4b3b      	ldr	r3, [pc, #236]	; (8003910 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	220c      	movs	r2, #12
 800382c:	4013      	ands	r3, r2
 800382e:	2b08      	cmp	r3, #8
 8003830:	d00e      	beq.n	8003850 <HAL_RCC_GetSysClockFreq+0x34>
 8003832:	2b0c      	cmp	r3, #12
 8003834:	d00f      	beq.n	8003856 <HAL_RCC_GetSysClockFreq+0x3a>
 8003836:	2b04      	cmp	r3, #4
 8003838:	d157      	bne.n	80038ea <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800383a:	4b35      	ldr	r3, [pc, #212]	; (8003910 <HAL_RCC_GetSysClockFreq+0xf4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2210      	movs	r2, #16
 8003840:	4013      	ands	r3, r2
 8003842:	d002      	beq.n	800384a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003844:	4b33      	ldr	r3, [pc, #204]	; (8003914 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003846:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003848:	e05d      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800384a:	4b33      	ldr	r3, [pc, #204]	; (8003918 <HAL_RCC_GetSysClockFreq+0xfc>)
 800384c:	613b      	str	r3, [r7, #16]
      break;
 800384e:	e05a      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003850:	4b32      	ldr	r3, [pc, #200]	; (800391c <HAL_RCC_GetSysClockFreq+0x100>)
 8003852:	613b      	str	r3, [r7, #16]
      break;
 8003854:	e057      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	0c9b      	lsrs	r3, r3, #18
 800385a:	220f      	movs	r2, #15
 800385c:	4013      	ands	r3, r2
 800385e:	4a30      	ldr	r2, [pc, #192]	; (8003920 <HAL_RCC_GetSysClockFreq+0x104>)
 8003860:	5cd3      	ldrb	r3, [r2, r3]
 8003862:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	0d9b      	lsrs	r3, r3, #22
 8003868:	2203      	movs	r2, #3
 800386a:	4013      	ands	r3, r2
 800386c:	3301      	adds	r3, #1
 800386e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003870:	4b27      	ldr	r3, [pc, #156]	; (8003910 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	2380      	movs	r3, #128	; 0x80
 8003876:	025b      	lsls	r3, r3, #9
 8003878:	4013      	ands	r3, r2
 800387a:	d00f      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	000a      	movs	r2, r1
 8003880:	0152      	lsls	r2, r2, #5
 8003882:	1a52      	subs	r2, r2, r1
 8003884:	0193      	lsls	r3, r2, #6
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	185b      	adds	r3, r3, r1
 800388c:	025b      	lsls	r3, r3, #9
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	0018      	movs	r0, r3
 8003892:	f7fc fc39 	bl	8000108 <__udivsi3>
 8003896:	0003      	movs	r3, r0
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	e023      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800389c:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <HAL_RCC_GetSysClockFreq+0xf4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2210      	movs	r2, #16
 80038a2:	4013      	ands	r3, r2
 80038a4:	d00f      	beq.n	80038c6 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	000a      	movs	r2, r1
 80038aa:	0152      	lsls	r2, r2, #5
 80038ac:	1a52      	subs	r2, r2, r1
 80038ae:	0193      	lsls	r3, r2, #6
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	185b      	adds	r3, r3, r1
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	0018      	movs	r0, r3
 80038bc:	f7fc fc24 	bl	8000108 <__udivsi3>
 80038c0:	0003      	movs	r3, r0
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	e00e      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	000a      	movs	r2, r1
 80038ca:	0152      	lsls	r2, r2, #5
 80038cc:	1a52      	subs	r2, r2, r1
 80038ce:	0193      	lsls	r3, r2, #6
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	185b      	adds	r3, r3, r1
 80038d6:	029b      	lsls	r3, r3, #10
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	0018      	movs	r0, r3
 80038dc:	f7fc fc14 	bl	8000108 <__udivsi3>
 80038e0:	0003      	movs	r3, r0
 80038e2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	613b      	str	r3, [r7, #16]
      break;
 80038e8:	e00d      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80038ea:	4b09      	ldr	r3, [pc, #36]	; (8003910 <HAL_RCC_GetSysClockFreq+0xf4>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	0b5b      	lsrs	r3, r3, #13
 80038f0:	2207      	movs	r2, #7
 80038f2:	4013      	ands	r3, r2
 80038f4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	3301      	adds	r3, #1
 80038fa:	2280      	movs	r2, #128	; 0x80
 80038fc:	0212      	lsls	r2, r2, #8
 80038fe:	409a      	lsls	r2, r3
 8003900:	0013      	movs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
      break;
 8003904:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003906:	693b      	ldr	r3, [r7, #16]
}
 8003908:	0018      	movs	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	b006      	add	sp, #24
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40021000 	.word	0x40021000
 8003914:	003d0900 	.word	0x003d0900
 8003918:	00f42400 	.word	0x00f42400
 800391c:	007a1200 	.word	0x007a1200
 8003920:	08004f7c 	.word	0x08004f7c

08003924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003928:	4b02      	ldr	r3, [pc, #8]	; (8003934 <HAL_RCC_GetHCLKFreq+0x10>)
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	0018      	movs	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	20000000 	.word	0x20000000

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800393c:	f7ff fff2 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 8003940:	0001      	movs	r1, r0
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	2207      	movs	r2, #7
 800394a:	4013      	ands	r3, r2
 800394c:	4a04      	ldr	r2, [pc, #16]	; (8003960 <HAL_RCC_GetPCLK1Freq+0x28>)
 800394e:	5cd3      	ldrb	r3, [r2, r3]
 8003950:	40d9      	lsrs	r1, r3
 8003952:	000b      	movs	r3, r1
}
 8003954:	0018      	movs	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	40021000 	.word	0x40021000
 8003960:	08004f74 	.word	0x08004f74

08003964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003968:	f7ff ffdc 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 800396c:	0001      	movs	r1, r0
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	0adb      	lsrs	r3, r3, #11
 8003974:	2207      	movs	r2, #7
 8003976:	4013      	ands	r3, r2
 8003978:	4a04      	ldr	r2, [pc, #16]	; (800398c <HAL_RCC_GetPCLK2Freq+0x28>)
 800397a:	5cd3      	ldrb	r3, [r2, r3]
 800397c:	40d9      	lsrs	r1, r3
 800397e:	000b      	movs	r3, r1
}
 8003980:	0018      	movs	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	40021000 	.word	0x40021000
 800398c:	08004f74 	.word	0x08004f74

08003990 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2220      	movs	r2, #32
 800399e:	4013      	ands	r3, r2
 80039a0:	d100      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x14>
 80039a2:	e0c7      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80039a4:	2317      	movs	r3, #23
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	2200      	movs	r2, #0
 80039aa:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ac:	4b82      	ldr	r3, [pc, #520]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80039ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	055b      	lsls	r3, r3, #21
 80039b4:	4013      	ands	r3, r2
 80039b6:	d10a      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b8:	4b7f      	ldr	r3, [pc, #508]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80039ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039bc:	4b7e      	ldr	r3, [pc, #504]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80039be:	2180      	movs	r1, #128	; 0x80
 80039c0:	0549      	lsls	r1, r1, #21
 80039c2:	430a      	orrs	r2, r1
 80039c4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80039c6:	2317      	movs	r3, #23
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	2201      	movs	r2, #1
 80039cc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ce:	4b7b      	ldr	r3, [pc, #492]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4013      	ands	r3, r2
 80039d8:	d11a      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039da:	4b78      	ldr	r3, [pc, #480]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	4b77      	ldr	r3, [pc, #476]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039e0:	2180      	movs	r1, #128	; 0x80
 80039e2:	0049      	lsls	r1, r1, #1
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e8:	f7fe ff3a 	bl	8002860 <HAL_GetTick>
 80039ec:	0003      	movs	r3, r0
 80039ee:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f0:	e008      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f2:	f7fe ff35 	bl	8002860 <HAL_GetTick>
 80039f6:	0002      	movs	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b64      	cmp	r3, #100	; 0x64
 80039fe:	d901      	bls.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e0d4      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a04:	4b6d      	ldr	r3, [pc, #436]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003a10:	4b69      	ldr	r3, [pc, #420]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	23c0      	movs	r3, #192	; 0xc0
 8003a16:	039b      	lsls	r3, r3, #14
 8003a18:	4013      	ands	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	23c0      	movs	r3, #192	; 0xc0
 8003a22:	039b      	lsls	r3, r3, #14
 8003a24:	4013      	ands	r3, r2
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d013      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	23c0      	movs	r3, #192	; 0xc0
 8003a32:	029b      	lsls	r3, r3, #10
 8003a34:	401a      	ands	r2, r3
 8003a36:	23c0      	movs	r3, #192	; 0xc0
 8003a38:	029b      	lsls	r3, r3, #10
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d10a      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003a3e:	4b5e      	ldr	r3, [pc, #376]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	2380      	movs	r3, #128	; 0x80
 8003a44:	029b      	lsls	r3, r3, #10
 8003a46:	401a      	ands	r2, r3
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	029b      	lsls	r3, r3, #10
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0ac      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003a54:	4b58      	ldr	r3, [pc, #352]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003a56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a58:	23c0      	movs	r3, #192	; 0xc0
 8003a5a:	029b      	lsls	r3, r3, #10
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d03b      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	23c0      	movs	r3, #192	; 0xc0
 8003a6c:	029b      	lsls	r3, r3, #10
 8003a6e:	4013      	ands	r3, r2
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d033      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d02e      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003a80:	4b4d      	ldr	r3, [pc, #308]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a84:	4a4e      	ldr	r2, [pc, #312]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a8a:	4b4b      	ldr	r3, [pc, #300]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003a8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a8e:	4b4a      	ldr	r3, [pc, #296]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	0309      	lsls	r1, r1, #12
 8003a94:	430a      	orrs	r2, r1
 8003a96:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a98:	4b47      	ldr	r3, [pc, #284]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003a9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a9c:	4b46      	ldr	r3, [pc, #280]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003a9e:	4949      	ldr	r1, [pc, #292]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003aa0:	400a      	ands	r2, r1
 8003aa2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003aa4:	4b44      	ldr	r3, [pc, #272]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	2380      	movs	r3, #128	; 0x80
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d014      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7fe fed4 	bl	8002860 <HAL_GetTick>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003abc:	e009      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003abe:	f7fe fecf 	bl	8002860 <HAL_GetTick>
 8003ac2:	0002      	movs	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	4a3f      	ldr	r2, [pc, #252]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e06d      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ad2:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003ad4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4013      	ands	r3, r2
 8003adc:	d0ef      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	23c0      	movs	r3, #192	; 0xc0
 8003ae4:	029b      	lsls	r3, r3, #10
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	23c0      	movs	r3, #192	; 0xc0
 8003aea:	029b      	lsls	r3, r3, #10
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d10c      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003af0:	4b31      	ldr	r3, [pc, #196]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a35      	ldr	r2, [pc, #212]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	0019      	movs	r1, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	23c0      	movs	r3, #192	; 0xc0
 8003b00:	039b      	lsls	r3, r3, #14
 8003b02:	401a      	ands	r2, r3
 8003b04:	4b2c      	ldr	r3, [pc, #176]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b06:	430a      	orrs	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	23c0      	movs	r3, #192	; 0xc0
 8003b14:	029b      	lsls	r3, r3, #10
 8003b16:	401a      	ands	r2, r3
 8003b18:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b1e:	2317      	movs	r3, #23
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d105      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b28:	4b23      	ldr	r3, [pc, #140]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b2c:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b2e:	4928      	ldr	r1, [pc, #160]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b30:	400a      	ands	r2, r1
 8003b32:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d009      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b3e:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b42:	220c      	movs	r2, #12
 8003b44:	4393      	bics	r3, r2
 8003b46:	0019      	movs	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2204      	movs	r2, #4
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d009      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b5c:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b60:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	0019      	movs	r1, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2208      	movs	r2, #8
 8003b76:	4013      	ands	r3, r2
 8003b78:	d009      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b7a:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7e:	4a16      	ldr	r2, [pc, #88]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	0019      	movs	r1, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2280      	movs	r2, #128	; 0x80
 8003b94:	4013      	ands	r3, r2
 8003b96:	d009      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003b98:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9c:	4a0f      	ldr	r2, [pc, #60]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	0018      	movs	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	b006      	add	sp, #24
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40007000 	.word	0x40007000
 8003bc0:	fffcffff 	.word	0xfffcffff
 8003bc4:	fff7ffff 	.word	0xfff7ffff
 8003bc8:	00001388 	.word	0x00001388
 8003bcc:	ffcfffff 	.word	0xffcfffff
 8003bd0:	efffffff 	.word	0xefffffff
 8003bd4:	fffff3ff 	.word	0xfffff3ff
 8003bd8:	ffffcfff 	.word	0xffffcfff
 8003bdc:	fff3ffff 	.word	0xfff3ffff

08003be0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e051      	b.n	8003c96 <HAL_SPI_Init+0xb6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2251      	movs	r2, #81	; 0x51
 8003bfc:	5c9b      	ldrb	r3, [r3, r2]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d107      	bne.n	8003c14 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2250      	movs	r2, #80	; 0x50
 8003c08:	2100      	movs	r1, #0
 8003c0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f7fe fca4 	bl	800255c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2251      	movs	r2, #81	; 0x51
 8003c18:	2102      	movs	r1, #2
 8003c1a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2140      	movs	r1, #64	; 0x40
 8003c28:	438a      	bics	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6999      	ldr	r1, [r3, #24]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	400b      	ands	r3, r1
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	0011      	movs	r1, r2
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	0c1b      	lsrs	r3, r3, #16
 8003c74:	2204      	movs	r2, #4
 8003c76:	4013      	ands	r3, r2
 8003c78:	0019      	movs	r1, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2251      	movs	r2, #81	; 0x51
 8003c90:	2101      	movs	r1, #1
 8003c92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	0018      	movs	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b002      	add	sp, #8
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e01b      	b.n	8003ce8 <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2251      	movs	r2, #81	; 0x51
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	5499      	strb	r1, [r3, r2]

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2140      	movs	r1, #64	; 0x40
 8003cc4:	438a      	bics	r2, r1
 8003cc6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f7fe fc8a 	bl	80025e4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2251      	movs	r2, #81	; 0x51
 8003cda:	2100      	movs	r1, #0
 8003cdc:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2250      	movs	r2, #80	; 0x50
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	0018      	movs	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b002      	add	sp, #8
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	1dbb      	adds	r3, r7, #6
 8003cfe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d00:	231f      	movs	r3, #31
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2250      	movs	r2, #80	; 0x50
 8003d0c:	5c9b      	ldrb	r3, [r3, r2]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_SPI_Transmit+0x26>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e136      	b.n	8003f84 <HAL_SPI_Transmit+0x294>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2250      	movs	r2, #80	; 0x50
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d1e:	f7fe fd9f 	bl	8002860 <HAL_GetTick>
 8003d22:	0003      	movs	r3, r0
 8003d24:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003d26:	2316      	movs	r3, #22
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	1dba      	adds	r2, r7, #6
 8003d2c:	8812      	ldrh	r2, [r2, #0]
 8003d2e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2251      	movs	r2, #81	; 0x51
 8003d34:	5c9b      	ldrb	r3, [r3, r2]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d004      	beq.n	8003d46 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003d3c:	231f      	movs	r3, #31
 8003d3e:	18fb      	adds	r3, r7, r3
 8003d40:	2202      	movs	r2, #2
 8003d42:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d44:	e113      	b.n	8003f6e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_SPI_Transmit+0x64>
 8003d4c:	1dbb      	adds	r3, r7, #6
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d104      	bne.n	8003d5e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003d54:	231f      	movs	r3, #31
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	2201      	movs	r2, #1
 8003d5a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d5c:	e107      	b.n	8003f6e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2251      	movs	r2, #81	; 0x51
 8003d62:	2103      	movs	r1, #3
 8003d64:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1dba      	adds	r2, r7, #6
 8003d76:	8812      	ldrh	r2, [r2, #0]
 8003d78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1dba      	adds	r2, r7, #6
 8003d7e:	8812      	ldrh	r2, [r2, #0]
 8003d80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d108      	bne.n	8003dbe <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2180      	movs	r1, #128	; 0x80
 8003db8:	01c9      	lsls	r1, r1, #7
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2240      	movs	r2, #64	; 0x40
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b40      	cmp	r3, #64	; 0x40
 8003dca:	d007      	beq.n	8003ddc <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2140      	movs	r1, #64	; 0x40
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d14e      	bne.n	8003e86 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d004      	beq.n	8003dfa <HAL_SPI_Transmit+0x10a>
 8003df0:	2316      	movs	r3, #22
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d13f      	bne.n	8003e7a <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	881a      	ldrh	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	1c9a      	adds	r2, r3, #2
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e1e:	e02c      	b.n	8003e7a <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2202      	movs	r2, #2
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d112      	bne.n	8003e54 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	881a      	ldrh	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	1c9a      	adds	r2, r3, #2
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e52:	e012      	b.n	8003e7a <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e54:	f7fe fd04 	bl	8002860 <HAL_GetTick>
 8003e58:	0002      	movs	r2, r0
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d802      	bhi.n	8003e6a <HAL_SPI_Transmit+0x17a>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	3301      	adds	r3, #1
 8003e68:	d102      	bne.n	8003e70 <HAL_SPI_Transmit+0x180>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d104      	bne.n	8003e7a <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8003e70:	231f      	movs	r3, #31
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	2203      	movs	r2, #3
 8003e76:	701a      	strb	r2, [r3, #0]
          goto error;
 8003e78:	e079      	b.n	8003f6e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1cd      	bne.n	8003e20 <HAL_SPI_Transmit+0x130>
 8003e84:	e04f      	b.n	8003f26 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d004      	beq.n	8003e98 <HAL_SPI_Transmit+0x1a8>
 8003e8e:	2316      	movs	r3, #22
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d141      	bne.n	8003f1c <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	330c      	adds	r3, #12
 8003ea2:	7812      	ldrb	r2, [r2, #0]
 8003ea4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ebe:	e02d      	b.n	8003f1c <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d113      	bne.n	8003ef6 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	330c      	adds	r3, #12
 8003ed8:	7812      	ldrb	r2, [r2, #0]
 8003eda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ef4:	e012      	b.n	8003f1c <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ef6:	f7fe fcb3 	bl	8002860 <HAL_GetTick>
 8003efa:	0002      	movs	r2, r0
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d802      	bhi.n	8003f0c <HAL_SPI_Transmit+0x21c>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	d102      	bne.n	8003f12 <HAL_SPI_Transmit+0x222>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d104      	bne.n	8003f1c <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8003f12:	231f      	movs	r3, #31
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	2203      	movs	r2, #3
 8003f18:	701a      	strb	r2, [r3, #0]
          goto error;
 8003f1a:	e028      	b.n	8003f6e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1cc      	bne.n	8003ec0 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	6839      	ldr	r1, [r7, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f000 fa59 	bl	80043e4 <SPI_EndRxTxTransaction>
 8003f32:	1e03      	subs	r3, r0, #0
 8003f34:	d002      	beq.n	8003f3c <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10a      	bne.n	8003f5a <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f44:	2300      	movs	r3, #0
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d004      	beq.n	8003f6c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8003f62:	231f      	movs	r3, #31
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	2201      	movs	r2, #1
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	e000      	b.n	8003f6e <HAL_SPI_Transmit+0x27e>
  }

error:
 8003f6c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2251      	movs	r2, #81	; 0x51
 8003f72:	2101      	movs	r1, #1
 8003f74:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2250      	movs	r2, #80	; 0x50
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003f7e:	231f      	movs	r3, #31
 8003f80:	18fb      	adds	r3, r7, r3
 8003f82:	781b      	ldrb	r3, [r3, #0]
}
 8003f84:	0018      	movs	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b008      	add	sp, #32
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08c      	sub	sp, #48	; 0x30
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	001a      	movs	r2, r3
 8003f9a:	1cbb      	adds	r3, r7, #2
 8003f9c:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fa2:	232b      	movs	r3, #43	; 0x2b
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2250      	movs	r2, #80	; 0x50
 8003fae:	5c9b      	ldrb	r3, [r3, r2]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_SPI_TransmitReceive+0x2c>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e1a1      	b.n	80042fc <HAL_SPI_TransmitReceive+0x370>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2250      	movs	r2, #80	; 0x50
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fc0:	f7fe fc4e 	bl	8002860 <HAL_GetTick>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fc8:	2023      	movs	r0, #35	; 0x23
 8003fca:	183b      	adds	r3, r7, r0
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	2151      	movs	r1, #81	; 0x51
 8003fd0:	5c52      	ldrb	r2, [r2, r1]
 8003fd2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fda:	231a      	movs	r3, #26
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	1cba      	adds	r2, r7, #2
 8003fe0:	8812      	ldrh	r2, [r2, #0]
 8003fe2:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fe4:	183b      	adds	r3, r7, r0
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d012      	beq.n	8004012 <HAL_SPI_TransmitReceive+0x86>
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	2382      	movs	r3, #130	; 0x82
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d108      	bne.n	8004008 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d104      	bne.n	8004008 <HAL_SPI_TransmitReceive+0x7c>
 8003ffe:	2323      	movs	r3, #35	; 0x23
 8004000:	18fb      	adds	r3, r7, r3
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b04      	cmp	r3, #4
 8004006:	d004      	beq.n	8004012 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8004008:	232b      	movs	r3, #43	; 0x2b
 800400a:	18fb      	adds	r3, r7, r3
 800400c:	2202      	movs	r2, #2
 800400e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004010:	e169      	b.n	80042e6 <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d006      	beq.n	8004026 <HAL_SPI_TransmitReceive+0x9a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_SPI_TransmitReceive+0x9a>
 800401e:	1cbb      	adds	r3, r7, #2
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d104      	bne.n	8004030 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8004026:	232b      	movs	r3, #43	; 0x2b
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	2201      	movs	r2, #1
 800402c:	701a      	strb	r2, [r3, #0]
    goto error;
 800402e:	e15a      	b.n	80042e6 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2251      	movs	r2, #81	; 0x51
 8004034:	5c9b      	ldrb	r3, [r3, r2]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b04      	cmp	r3, #4
 800403a:	d003      	beq.n	8004044 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2251      	movs	r2, #81	; 0x51
 8004040:	2105      	movs	r1, #5
 8004042:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1cba      	adds	r2, r7, #2
 8004054:	8812      	ldrh	r2, [r2, #0]
 8004056:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1cba      	adds	r2, r7, #2
 800405c:	8812      	ldrh	r2, [r2, #0]
 800405e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1cba      	adds	r2, r7, #2
 800406a:	8812      	ldrh	r2, [r2, #0]
 800406c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1cba      	adds	r2, r7, #2
 8004072:	8812      	ldrh	r2, [r2, #0]
 8004074:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2240      	movs	r2, #64	; 0x40
 800408a:	4013      	ands	r3, r2
 800408c:	2b40      	cmp	r3, #64	; 0x40
 800408e:	d007      	beq.n	80040a0 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2140      	movs	r1, #64	; 0x40
 800409c:	430a      	orrs	r2, r1
 800409e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d000      	beq.n	80040ae <HAL_SPI_TransmitReceive+0x122>
 80040ac:	e07a      	b.n	80041a4 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d004      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0x134>
 80040b6:	231a      	movs	r3, #26
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d166      	bne.n	800418e <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	881a      	ldrh	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	1c9a      	adds	r2, r3, #2
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040e4:	e053      	b.n	800418e <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2202      	movs	r2, #2
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d11b      	bne.n	800412c <HAL_SPI_TransmitReceive+0x1a0>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d016      	beq.n	800412c <HAL_SPI_TransmitReceive+0x1a0>
 80040fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004100:	2b01      	cmp	r3, #1
 8004102:	d113      	bne.n	800412c <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	881a      	ldrh	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	1c9a      	adds	r2, r3, #2
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2201      	movs	r2, #1
 8004134:	4013      	ands	r3, r2
 8004136:	2b01      	cmp	r3, #1
 8004138:	d119      	bne.n	800416e <HAL_SPI_TransmitReceive+0x1e2>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d014      	beq.n	800416e <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414e:	b292      	uxth	r2, r2
 8004150:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004156:	1c9a      	adds	r2, r3, #2
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800416a:	2301      	movs	r3, #1
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800416e:	f7fe fb77 	bl	8002860 <HAL_GetTick>
 8004172:	0002      	movs	r2, r0
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800417a:	429a      	cmp	r2, r3
 800417c:	d807      	bhi.n	800418e <HAL_SPI_TransmitReceive+0x202>
 800417e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004180:	3301      	adds	r3, #1
 8004182:	d004      	beq.n	800418e <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8004184:	232b      	movs	r3, #43	; 0x2b
 8004186:	18fb      	adds	r3, r7, r3
 8004188:	2203      	movs	r2, #3
 800418a:	701a      	strb	r2, [r3, #0]
        goto error;
 800418c:	e0ab      	b.n	80042e6 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1a6      	bne.n	80040e6 <HAL_SPI_TransmitReceive+0x15a>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1a1      	bne.n	80040e6 <HAL_SPI_TransmitReceive+0x15a>
 80041a2:	e07f      	b.n	80042a4 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_SPI_TransmitReceive+0x22c>
 80041ac:	231a      	movs	r3, #26
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d000      	beq.n	80041b8 <HAL_SPI_TransmitReceive+0x22c>
 80041b6:	e06b      	b.n	8004290 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	330c      	adds	r3, #12
 80041c2:	7812      	ldrb	r2, [r2, #0]
 80041c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041de:	e057      	b.n	8004290 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2202      	movs	r2, #2
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d11c      	bne.n	8004228 <HAL_SPI_TransmitReceive+0x29c>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d017      	beq.n	8004228 <HAL_SPI_TransmitReceive+0x29c>
 80041f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d114      	bne.n	8004228 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	7812      	ldrb	r2, [r2, #0]
 800420a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2201      	movs	r2, #1
 8004230:	4013      	ands	r3, r2
 8004232:	2b01      	cmp	r3, #1
 8004234:	d119      	bne.n	800426a <HAL_SPI_TransmitReceive+0x2de>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d014      	beq.n	800426a <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004266:	2301      	movs	r3, #1
 8004268:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800426a:	f7fe faf9 	bl	8002860 <HAL_GetTick>
 800426e:	0002      	movs	r2, r0
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004276:	429a      	cmp	r2, r3
 8004278:	d802      	bhi.n	8004280 <HAL_SPI_TransmitReceive+0x2f4>
 800427a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427c:	3301      	adds	r3, #1
 800427e:	d102      	bne.n	8004286 <HAL_SPI_TransmitReceive+0x2fa>
 8004280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 8004286:	232b      	movs	r3, #43	; 0x2b
 8004288:	18fb      	adds	r3, r7, r3
 800428a:	2203      	movs	r2, #3
 800428c:	701a      	strb	r2, [r3, #0]
        goto error;
 800428e:	e02a      	b.n	80042e6 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1a2      	bne.n	80041e0 <HAL_SPI_TransmitReceive+0x254>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d19d      	bne.n	80041e0 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	0018      	movs	r0, r3
 80042ac:	f000 f89a 	bl	80043e4 <SPI_EndRxTxTransaction>
 80042b0:	1e03      	subs	r3, r0, #0
 80042b2:	d007      	beq.n	80042c4 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 80042b4:	232b      	movs	r3, #43	; 0x2b
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	2201      	movs	r2, #1
 80042ba:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2220      	movs	r2, #32
 80042c0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042c2:	e010      	b.n	80042e6 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10b      	bne.n	80042e4 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	e000      	b.n	80042e6 <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 80042e4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2251      	movs	r2, #81	; 0x51
 80042ea:	2101      	movs	r1, #1
 80042ec:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2250      	movs	r2, #80	; 0x50
 80042f2:	2100      	movs	r1, #0
 80042f4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80042f6:	232b      	movs	r3, #43	; 0x2b
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	781b      	ldrb	r3, [r3, #0]
}
 80042fc:	0018      	movs	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	b00c      	add	sp, #48	; 0x30
 8004302:	bd80      	pop	{r7, pc}

08004304 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	1dfb      	adds	r3, r7, #7
 8004312:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004314:	e050      	b.n	80043b8 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	3301      	adds	r3, #1
 800431a:	d04d      	beq.n	80043b8 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800431c:	f7fe faa0 	bl	8002860 <HAL_GetTick>
 8004320:	0002      	movs	r2, r0
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d902      	bls.n	8004332 <SPI_WaitFlagStateUntilTimeout+0x2e>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d142      	bne.n	80043b8 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	21e0      	movs	r1, #224	; 0xe0
 800433e:	438a      	bics	r2, r1
 8004340:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	2382      	movs	r3, #130	; 0x82
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	429a      	cmp	r2, r3
 800434c:	d113      	bne.n	8004376 <SPI_WaitFlagStateUntilTimeout+0x72>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	021b      	lsls	r3, r3, #8
 8004356:	429a      	cmp	r2, r3
 8004358:	d005      	beq.n	8004366 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	2380      	movs	r3, #128	; 0x80
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	429a      	cmp	r2, r3
 8004364:	d107      	bne.n	8004376 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2140      	movs	r1, #64	; 0x40
 8004372:	438a      	bics	r2, r1
 8004374:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800437a:	2380      	movs	r3, #128	; 0x80
 800437c:	019b      	lsls	r3, r3, #6
 800437e:	429a      	cmp	r2, r3
 8004380:	d110      	bne.n	80043a4 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4914      	ldr	r1, [pc, #80]	; (80043e0 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800438e:	400a      	ands	r2, r1
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2180      	movs	r1, #128	; 0x80
 800439e:	0189      	lsls	r1, r1, #6
 80043a0:	430a      	orrs	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2251      	movs	r2, #81	; 0x51
 80043a8:	2101      	movs	r1, #1
 80043aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2250      	movs	r2, #80	; 0x50
 80043b0:	2100      	movs	r1, #0
 80043b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e00f      	b.n	80043d8 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	4013      	ands	r3, r2
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	425a      	negs	r2, r3
 80043c8:	4153      	adcs	r3, r2
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	001a      	movs	r2, r3
 80043ce:	1dfb      	adds	r3, r7, #7
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d19f      	bne.n	8004316 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	0018      	movs	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	b004      	add	sp, #16
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	ffffdfff 	.word	0xffffdfff

080043e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	2382      	movs	r3, #130	; 0x82
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d112      	bne.n	8004422 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	0013      	movs	r3, r2
 8004406:	2200      	movs	r2, #0
 8004408:	2180      	movs	r1, #128	; 0x80
 800440a:	f7ff ff7b 	bl	8004304 <SPI_WaitFlagStateUntilTimeout>
 800440e:	1e03      	subs	r3, r0, #0
 8004410:	d020      	beq.n	8004454 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004416:	2220      	movs	r2, #32
 8004418:	431a      	orrs	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e019      	b.n	8004456 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2251      	movs	r2, #81	; 0x51
 8004426:	5c9b      	ldrb	r3, [r3, r2]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b05      	cmp	r3, #5
 800442c:	d112      	bne.n	8004454 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	0013      	movs	r3, r2
 8004438:	2200      	movs	r2, #0
 800443a:	2101      	movs	r1, #1
 800443c:	f7ff ff62 	bl	8004304 <SPI_WaitFlagStateUntilTimeout>
 8004440:	1e03      	subs	r3, r0, #0
 8004442:	d007      	beq.n	8004454 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004448:	2220      	movs	r2, #32
 800444a:	431a      	orrs	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e000      	b.n	8004456 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	0018      	movs	r0, r3
 8004458:	46bd      	mov	sp, r7
 800445a:	b004      	add	sp, #16
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e044      	b.n	80044fc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004476:	2b00      	cmp	r3, #0
 8004478:	d107      	bne.n	800448a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2270      	movs	r2, #112	; 0x70
 800447e:	2100      	movs	r1, #0
 8004480:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	0018      	movs	r0, r3
 8004486:	f7fe f8cd 	bl	8002624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2224      	movs	r2, #36	; 0x24
 800448e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2101      	movs	r1, #1
 800449c:	438a      	bics	r2, r1
 800449e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	0018      	movs	r0, r3
 80044a4:	f000 f830 	bl	8004508 <UART_SetConfig>
 80044a8:	0003      	movs	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e024      	b.n	80044fc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	0018      	movs	r0, r3
 80044be:	f000 fafd 	bl	8004abc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	490d      	ldr	r1, [pc, #52]	; (8004504 <HAL_UART_Init+0xa4>)
 80044ce:	400a      	ands	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	212a      	movs	r1, #42	; 0x2a
 80044de:	438a      	bics	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2101      	movs	r1, #1
 80044ee:	430a      	orrs	r2, r1
 80044f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	0018      	movs	r0, r3
 80044f6:	f000 fb95 	bl	8004c24 <UART_CheckIdleState>
 80044fa:	0003      	movs	r3, r0
}
 80044fc:	0018      	movs	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	b002      	add	sp, #8
 8004502:	bd80      	pop	{r7, pc}
 8004504:	ffffb7ff 	.word	0xffffb7ff

08004508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004508:	b5b0      	push	{r4, r5, r7, lr}
 800450a:	b08e      	sub	sp, #56	; 0x38
 800450c:	af00      	add	r7, sp, #0
 800450e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004510:	231b      	movs	r3, #27
 8004512:	2218      	movs	r2, #24
 8004514:	4694      	mov	ip, r2
 8004516:	44bc      	add	ip, r7
 8004518:	4463      	add	r3, ip
 800451a:	2210      	movs	r2, #16
 800451c:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800451e:	2300      	movs	r3, #0
 8004520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8004522:	2313      	movs	r3, #19
 8004524:	2218      	movs	r2, #24
 8004526:	4694      	mov	ip, r2
 8004528:	44bc      	add	ip, r7
 800452a:	4463      	add	r3, ip
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004530:	2300      	movs	r3, #0
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	431a      	orrs	r2, r3
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	431a      	orrs	r2, r3
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	4313      	orrs	r3, r2
 800454a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4ace      	ldr	r2, [pc, #824]	; (800488c <UART_SetConfig+0x384>)
 8004554:	4013      	ands	r3, r2
 8004556:	0019      	movs	r1, r3
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800455e:	430a      	orrs	r2, r1
 8004560:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	4ac9      	ldr	r2, [pc, #804]	; (8004890 <UART_SetConfig+0x388>)
 800456a:	4013      	ands	r3, r2
 800456c:	0019      	movs	r1, r3
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4ac3      	ldr	r2, [pc, #780]	; (8004894 <UART_SetConfig+0x38c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d004      	beq.n	8004594 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004590:	4313      	orrs	r3, r2
 8004592:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	4abf      	ldr	r2, [pc, #764]	; (8004898 <UART_SetConfig+0x390>)
 800459c:	4013      	ands	r3, r2
 800459e:	0019      	movs	r1, r3
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045a6:	430a      	orrs	r2, r1
 80045a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4abb      	ldr	r2, [pc, #748]	; (800489c <UART_SetConfig+0x394>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d137      	bne.n	8004624 <UART_SetConfig+0x11c>
 80045b4:	4bba      	ldr	r3, [pc, #744]	; (80048a0 <UART_SetConfig+0x398>)
 80045b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b8:	220c      	movs	r2, #12
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d018      	beq.n	80045f2 <UART_SetConfig+0xea>
 80045c0:	d802      	bhi.n	80045c8 <UART_SetConfig+0xc0>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <UART_SetConfig+0xca>
 80045c6:	e024      	b.n	8004612 <UART_SetConfig+0x10a>
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d00a      	beq.n	80045e2 <UART_SetConfig+0xda>
 80045cc:	2b0c      	cmp	r3, #12
 80045ce:	d018      	beq.n	8004602 <UART_SetConfig+0xfa>
 80045d0:	e01f      	b.n	8004612 <UART_SetConfig+0x10a>
 80045d2:	231b      	movs	r3, #27
 80045d4:	2218      	movs	r2, #24
 80045d6:	4694      	mov	ip, r2
 80045d8:	44bc      	add	ip, r7
 80045da:	4463      	add	r3, ip
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]
 80045e0:	e06e      	b.n	80046c0 <UART_SetConfig+0x1b8>
 80045e2:	231b      	movs	r3, #27
 80045e4:	2218      	movs	r2, #24
 80045e6:	4694      	mov	ip, r2
 80045e8:	44bc      	add	ip, r7
 80045ea:	4463      	add	r3, ip
 80045ec:	2202      	movs	r2, #2
 80045ee:	701a      	strb	r2, [r3, #0]
 80045f0:	e066      	b.n	80046c0 <UART_SetConfig+0x1b8>
 80045f2:	231b      	movs	r3, #27
 80045f4:	2218      	movs	r2, #24
 80045f6:	4694      	mov	ip, r2
 80045f8:	44bc      	add	ip, r7
 80045fa:	4463      	add	r3, ip
 80045fc:	2204      	movs	r2, #4
 80045fe:	701a      	strb	r2, [r3, #0]
 8004600:	e05e      	b.n	80046c0 <UART_SetConfig+0x1b8>
 8004602:	231b      	movs	r3, #27
 8004604:	2218      	movs	r2, #24
 8004606:	4694      	mov	ip, r2
 8004608:	44bc      	add	ip, r7
 800460a:	4463      	add	r3, ip
 800460c:	2208      	movs	r2, #8
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	e056      	b.n	80046c0 <UART_SetConfig+0x1b8>
 8004612:	231b      	movs	r3, #27
 8004614:	2218      	movs	r2, #24
 8004616:	4694      	mov	ip, r2
 8004618:	44bc      	add	ip, r7
 800461a:	4463      	add	r3, ip
 800461c:	2210      	movs	r2, #16
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	46c0      	nop			; (mov r8, r8)
 8004622:	e04d      	b.n	80046c0 <UART_SetConfig+0x1b8>
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a9a      	ldr	r2, [pc, #616]	; (8004894 <UART_SetConfig+0x38c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d141      	bne.n	80046b2 <UART_SetConfig+0x1aa>
 800462e:	4b9c      	ldr	r3, [pc, #624]	; (80048a0 <UART_SetConfig+0x398>)
 8004630:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004632:	23c0      	movs	r3, #192	; 0xc0
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	4013      	ands	r3, r2
 8004638:	2280      	movs	r2, #128	; 0x80
 800463a:	00d2      	lsls	r2, r2, #3
 800463c:	4293      	cmp	r3, r2
 800463e:	d01f      	beq.n	8004680 <UART_SetConfig+0x178>
 8004640:	2280      	movs	r2, #128	; 0x80
 8004642:	00d2      	lsls	r2, r2, #3
 8004644:	4293      	cmp	r3, r2
 8004646:	d802      	bhi.n	800464e <UART_SetConfig+0x146>
 8004648:	2b00      	cmp	r3, #0
 800464a:	d009      	beq.n	8004660 <UART_SetConfig+0x158>
 800464c:	e028      	b.n	80046a0 <UART_SetConfig+0x198>
 800464e:	2280      	movs	r2, #128	; 0x80
 8004650:	0112      	lsls	r2, r2, #4
 8004652:	4293      	cmp	r3, r2
 8004654:	d00c      	beq.n	8004670 <UART_SetConfig+0x168>
 8004656:	22c0      	movs	r2, #192	; 0xc0
 8004658:	0112      	lsls	r2, r2, #4
 800465a:	4293      	cmp	r3, r2
 800465c:	d018      	beq.n	8004690 <UART_SetConfig+0x188>
 800465e:	e01f      	b.n	80046a0 <UART_SetConfig+0x198>
 8004660:	231b      	movs	r3, #27
 8004662:	2218      	movs	r2, #24
 8004664:	4694      	mov	ip, r2
 8004666:	44bc      	add	ip, r7
 8004668:	4463      	add	r3, ip
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	e027      	b.n	80046c0 <UART_SetConfig+0x1b8>
 8004670:	231b      	movs	r3, #27
 8004672:	2218      	movs	r2, #24
 8004674:	4694      	mov	ip, r2
 8004676:	44bc      	add	ip, r7
 8004678:	4463      	add	r3, ip
 800467a:	2202      	movs	r2, #2
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	e01f      	b.n	80046c0 <UART_SetConfig+0x1b8>
 8004680:	231b      	movs	r3, #27
 8004682:	2218      	movs	r2, #24
 8004684:	4694      	mov	ip, r2
 8004686:	44bc      	add	ip, r7
 8004688:	4463      	add	r3, ip
 800468a:	2204      	movs	r2, #4
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	e017      	b.n	80046c0 <UART_SetConfig+0x1b8>
 8004690:	231b      	movs	r3, #27
 8004692:	2218      	movs	r2, #24
 8004694:	4694      	mov	ip, r2
 8004696:	44bc      	add	ip, r7
 8004698:	4463      	add	r3, ip
 800469a:	2208      	movs	r2, #8
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	e00f      	b.n	80046c0 <UART_SetConfig+0x1b8>
 80046a0:	231b      	movs	r3, #27
 80046a2:	2218      	movs	r2, #24
 80046a4:	4694      	mov	ip, r2
 80046a6:	44bc      	add	ip, r7
 80046a8:	4463      	add	r3, ip
 80046aa:	2210      	movs	r2, #16
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	e006      	b.n	80046c0 <UART_SetConfig+0x1b8>
 80046b2:	231b      	movs	r3, #27
 80046b4:	2218      	movs	r2, #24
 80046b6:	4694      	mov	ip, r2
 80046b8:	44bc      	add	ip, r7
 80046ba:	4463      	add	r3, ip
 80046bc:	2210      	movs	r2, #16
 80046be:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a73      	ldr	r2, [pc, #460]	; (8004894 <UART_SetConfig+0x38c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d000      	beq.n	80046cc <UART_SetConfig+0x1c4>
 80046ca:	e083      	b.n	80047d4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046cc:	231b      	movs	r3, #27
 80046ce:	2218      	movs	r2, #24
 80046d0:	4694      	mov	ip, r2
 80046d2:	44bc      	add	ip, r7
 80046d4:	4463      	add	r3, ip
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d00d      	beq.n	80046f8 <UART_SetConfig+0x1f0>
 80046dc:	dc02      	bgt.n	80046e4 <UART_SetConfig+0x1dc>
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d005      	beq.n	80046ee <UART_SetConfig+0x1e6>
 80046e2:	e01d      	b.n	8004720 <UART_SetConfig+0x218>
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d012      	beq.n	800470e <UART_SetConfig+0x206>
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d015      	beq.n	8004718 <UART_SetConfig+0x210>
 80046ec:	e018      	b.n	8004720 <UART_SetConfig+0x218>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80046ee:	f7ff f923 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 80046f2:	0003      	movs	r3, r0
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046f6:	e01b      	b.n	8004730 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046f8:	4b69      	ldr	r3, [pc, #420]	; (80048a0 <UART_SetConfig+0x398>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2210      	movs	r2, #16
 80046fe:	4013      	ands	r3, r2
 8004700:	d002      	beq.n	8004708 <UART_SetConfig+0x200>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8004702:	4b68      	ldr	r3, [pc, #416]	; (80048a4 <UART_SetConfig+0x39c>)
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8004706:	e013      	b.n	8004730 <UART_SetConfig+0x228>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004708:	4b67      	ldr	r3, [pc, #412]	; (80048a8 <UART_SetConfig+0x3a0>)
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800470c:	e010      	b.n	8004730 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800470e:	f7ff f885 	bl	800381c <HAL_RCC_GetSysClockFreq>
 8004712:	0003      	movs	r3, r0
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004716:	e00b      	b.n	8004730 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004718:	2380      	movs	r3, #128	; 0x80
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800471e:	e007      	b.n	8004730 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004720:	2313      	movs	r3, #19
 8004722:	2218      	movs	r2, #24
 8004724:	4694      	mov	ip, r2
 8004726:	44bc      	add	ip, r7
 8004728:	4463      	add	r3, ip
 800472a:	2201      	movs	r2, #1
 800472c:	701a      	strb	r2, [r3, #0]
        break;
 800472e:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	d100      	bne.n	8004738 <UART_SetConfig+0x230>
 8004736:	e1a7      	b.n	8004a88 <UART_SetConfig+0x580>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	0013      	movs	r3, r2
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	189b      	adds	r3, r3, r2
 8004742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004744:	429a      	cmp	r2, r3
 8004746:	d305      	bcc.n	8004754 <UART_SetConfig+0x24c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800474e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004750:	429a      	cmp	r2, r3
 8004752:	d907      	bls.n	8004764 <UART_SetConfig+0x25c>
      {
        ret = HAL_ERROR;
 8004754:	2313      	movs	r3, #19
 8004756:	2218      	movs	r2, #24
 8004758:	4694      	mov	ip, r2
 800475a:	44bc      	add	ip, r7
 800475c:	4463      	add	r3, ip
 800475e:	2201      	movs	r2, #1
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	e191      	b.n	8004a88 <UART_SetConfig+0x580>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	2300      	movs	r3, #0
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	6939      	ldr	r1, [r7, #16]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	000b      	movs	r3, r1
 8004772:	0e1b      	lsrs	r3, r3, #24
 8004774:	0010      	movs	r0, r2
 8004776:	0205      	lsls	r5, r0, #8
 8004778:	431d      	orrs	r5, r3
 800477a:	000b      	movs	r3, r1
 800477c:	021c      	lsls	r4, r3, #8
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	085b      	lsrs	r3, r3, #1
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	68b8      	ldr	r0, [r7, #8]
 800478c:	68f9      	ldr	r1, [r7, #12]
 800478e:	1900      	adds	r0, r0, r4
 8004790:	4169      	adcs	r1, r5
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	2300      	movs	r3, #0
 800479a:	607b      	str	r3, [r7, #4]
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f7fb fd3e 	bl	8000220 <__aeabi_uldivmod>
 80047a4:	0003      	movs	r3, r0
 80047a6:	000c      	movs	r4, r1
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	4a3f      	ldr	r2, [pc, #252]	; (80048ac <UART_SetConfig+0x3a4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d908      	bls.n	80047c4 <UART_SetConfig+0x2bc>
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	4a3e      	ldr	r2, [pc, #248]	; (80048b0 <UART_SetConfig+0x3a8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d804      	bhi.n	80047c4 <UART_SetConfig+0x2bc>
        {
          huart->Instance->BRR = usartdiv;
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047c0:	60da      	str	r2, [r3, #12]
 80047c2:	e161      	b.n	8004a88 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 80047c4:	2313      	movs	r3, #19
 80047c6:	2218      	movs	r2, #24
 80047c8:	4694      	mov	ip, r2
 80047ca:	44bc      	add	ip, r7
 80047cc:	4463      	add	r3, ip
 80047ce:	2201      	movs	r2, #1
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	e159      	b.n	8004a88 <UART_SetConfig+0x580>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	429a      	cmp	r2, r3
 80047de:	d000      	beq.n	80047e2 <UART_SetConfig+0x2da>
 80047e0:	e0c4      	b.n	800496c <UART_SetConfig+0x464>
  {
    switch (clocksource)
 80047e2:	231b      	movs	r3, #27
 80047e4:	2218      	movs	r2, #24
 80047e6:	4694      	mov	ip, r2
 80047e8:	44bc      	add	ip, r7
 80047ea:	4463      	add	r3, ip
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d900      	bls.n	80047f4 <UART_SetConfig+0x2ec>
 80047f2:	e087      	b.n	8004904 <UART_SetConfig+0x3fc>
 80047f4:	009a      	lsls	r2, r3, #2
 80047f6:	4b2f      	ldr	r3, [pc, #188]	; (80048b4 <UART_SetConfig+0x3ac>)
 80047f8:	18d3      	adds	r3, r2, r3
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80047fe:	f7ff f89b 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8004802:	0003      	movs	r3, r0
 8004804:	005a      	lsls	r2, r3, #1
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	085b      	lsrs	r3, r3, #1
 800480c:	18d2      	adds	r2, r2, r3
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	0019      	movs	r1, r3
 8004814:	0010      	movs	r0, r2
 8004816:	f7fb fc77 	bl	8000108 <__udivsi3>
 800481a:	0003      	movs	r3, r0
 800481c:	b29b      	uxth	r3, r3
 800481e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004820:	e078      	b.n	8004914 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004822:	f7ff f89f 	bl	8003964 <HAL_RCC_GetPCLK2Freq>
 8004826:	0003      	movs	r3, r0
 8004828:	005a      	lsls	r2, r3, #1
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	085b      	lsrs	r3, r3, #1
 8004830:	18d2      	adds	r2, r2, r3
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	0019      	movs	r1, r3
 8004838:	0010      	movs	r0, r2
 800483a:	f7fb fc65 	bl	8000108 <__udivsi3>
 800483e:	0003      	movs	r3, r0
 8004840:	b29b      	uxth	r3, r3
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004844:	e066      	b.n	8004914 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004846:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <UART_SetConfig+0x398>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2210      	movs	r2, #16
 800484c:	4013      	ands	r3, r2
 800484e:	d00e      	beq.n	800486e <UART_SetConfig+0x366>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	085b      	lsrs	r3, r3, #1
 8004856:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <UART_SetConfig+0x3b0>)
 8004858:	189a      	adds	r2, r3, r2
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	0019      	movs	r1, r3
 8004860:	0010      	movs	r0, r2
 8004862:	f7fb fc51 	bl	8000108 <__udivsi3>
 8004866:	0003      	movs	r3, r0
 8004868:	b29b      	uxth	r3, r3
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800486c:	e052      	b.n	8004914 <UART_SetConfig+0x40c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	4a11      	ldr	r2, [pc, #68]	; (80048bc <UART_SetConfig+0x3b4>)
 8004876:	189a      	adds	r2, r3, r2
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	0019      	movs	r1, r3
 800487e:	0010      	movs	r0, r2
 8004880:	f7fb fc42 	bl	8000108 <__udivsi3>
 8004884:	0003      	movs	r3, r0
 8004886:	b29b      	uxth	r3, r3
 8004888:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800488a:	e043      	b.n	8004914 <UART_SetConfig+0x40c>
 800488c:	efff69f3 	.word	0xefff69f3
 8004890:	ffffcfff 	.word	0xffffcfff
 8004894:	40004800 	.word	0x40004800
 8004898:	fffff4ff 	.word	0xfffff4ff
 800489c:	40004400 	.word	0x40004400
 80048a0:	40021000 	.word	0x40021000
 80048a4:	003d0900 	.word	0x003d0900
 80048a8:	00f42400 	.word	0x00f42400
 80048ac:	000002ff 	.word	0x000002ff
 80048b0:	000fffff 	.word	0x000fffff
 80048b4:	08004f88 	.word	0x08004f88
 80048b8:	007a1200 	.word	0x007a1200
 80048bc:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80048c0:	f7fe ffac 	bl	800381c <HAL_RCC_GetSysClockFreq>
 80048c4:	0003      	movs	r3, r0
 80048c6:	005a      	lsls	r2, r3, #1
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	18d2      	adds	r2, r2, r3
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	0019      	movs	r1, r3
 80048d6:	0010      	movs	r0, r2
 80048d8:	f7fb fc16 	bl	8000108 <__udivsi3>
 80048dc:	0003      	movs	r3, r0
 80048de:	b29b      	uxth	r3, r3
 80048e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048e2:	e017      	b.n	8004914 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	085b      	lsrs	r3, r3, #1
 80048ea:	2280      	movs	r2, #128	; 0x80
 80048ec:	0252      	lsls	r2, r2, #9
 80048ee:	189a      	adds	r2, r3, r2
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	0019      	movs	r1, r3
 80048f6:	0010      	movs	r0, r2
 80048f8:	f7fb fc06 	bl	8000108 <__udivsi3>
 80048fc:	0003      	movs	r3, r0
 80048fe:	b29b      	uxth	r3, r3
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004902:	e007      	b.n	8004914 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004904:	2313      	movs	r3, #19
 8004906:	2218      	movs	r2, #24
 8004908:	4694      	mov	ip, r2
 800490a:	44bc      	add	ip, r7
 800490c:	4463      	add	r3, ip
 800490e:	2201      	movs	r2, #1
 8004910:	701a      	strb	r2, [r3, #0]
        break;
 8004912:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	2b0f      	cmp	r3, #15
 8004918:	d920      	bls.n	800495c <UART_SetConfig+0x454>
 800491a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491c:	4a62      	ldr	r2, [pc, #392]	; (8004aa8 <UART_SetConfig+0x5a0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d81c      	bhi.n	800495c <UART_SetConfig+0x454>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004924:	b29a      	uxth	r2, r3
 8004926:	200a      	movs	r0, #10
 8004928:	2418      	movs	r4, #24
 800492a:	193b      	adds	r3, r7, r4
 800492c:	181b      	adds	r3, r3, r0
 800492e:	210f      	movs	r1, #15
 8004930:	438a      	bics	r2, r1
 8004932:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004936:	085b      	lsrs	r3, r3, #1
 8004938:	b29b      	uxth	r3, r3
 800493a:	2207      	movs	r2, #7
 800493c:	4013      	ands	r3, r2
 800493e:	b299      	uxth	r1, r3
 8004940:	193b      	adds	r3, r7, r4
 8004942:	181b      	adds	r3, r3, r0
 8004944:	193a      	adds	r2, r7, r4
 8004946:	1812      	adds	r2, r2, r0
 8004948:	8812      	ldrh	r2, [r2, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	193a      	adds	r2, r7, r4
 8004954:	1812      	adds	r2, r2, r0
 8004956:	8812      	ldrh	r2, [r2, #0]
 8004958:	60da      	str	r2, [r3, #12]
 800495a:	e095      	b.n	8004a88 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 800495c:	2313      	movs	r3, #19
 800495e:	2218      	movs	r2, #24
 8004960:	4694      	mov	ip, r2
 8004962:	44bc      	add	ip, r7
 8004964:	4463      	add	r3, ip
 8004966:	2201      	movs	r2, #1
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	e08d      	b.n	8004a88 <UART_SetConfig+0x580>
    }
  }
  else
  {
    switch (clocksource)
 800496c:	231b      	movs	r3, #27
 800496e:	2218      	movs	r2, #24
 8004970:	4694      	mov	ip, r2
 8004972:	44bc      	add	ip, r7
 8004974:	4463      	add	r3, ip
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b08      	cmp	r3, #8
 800497a:	d86a      	bhi.n	8004a52 <UART_SetConfig+0x54a>
 800497c:	009a      	lsls	r2, r3, #2
 800497e:	4b4b      	ldr	r3, [pc, #300]	; (8004aac <UART_SetConfig+0x5a4>)
 8004980:	18d3      	adds	r3, r2, r3
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004986:	f7fe ffd7 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 800498a:	0002      	movs	r2, r0
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	085b      	lsrs	r3, r3, #1
 8004992:	18d2      	adds	r2, r2, r3
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	0019      	movs	r1, r3
 800499a:	0010      	movs	r0, r2
 800499c:	f7fb fbb4 	bl	8000108 <__udivsi3>
 80049a0:	0003      	movs	r3, r0
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049a6:	e05c      	b.n	8004a62 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80049a8:	f7fe ffdc 	bl	8003964 <HAL_RCC_GetPCLK2Freq>
 80049ac:	0002      	movs	r2, r0
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	085b      	lsrs	r3, r3, #1
 80049b4:	18d2      	adds	r2, r2, r3
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	0019      	movs	r1, r3
 80049bc:	0010      	movs	r0, r2
 80049be:	f7fb fba3 	bl	8000108 <__udivsi3>
 80049c2:	0003      	movs	r3, r0
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049c8:	e04b      	b.n	8004a62 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049ca:	4b39      	ldr	r3, [pc, #228]	; (8004ab0 <UART_SetConfig+0x5a8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2210      	movs	r2, #16
 80049d0:	4013      	ands	r3, r2
 80049d2:	d00e      	beq.n	80049f2 <UART_SetConfig+0x4ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	4a36      	ldr	r2, [pc, #216]	; (8004ab4 <UART_SetConfig+0x5ac>)
 80049dc:	189a      	adds	r2, r3, r2
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	0019      	movs	r1, r3
 80049e4:	0010      	movs	r0, r2
 80049e6:	f7fb fb8f 	bl	8000108 <__udivsi3>
 80049ea:	0003      	movs	r3, r0
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80049f0:	e037      	b.n	8004a62 <UART_SetConfig+0x55a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	085b      	lsrs	r3, r3, #1
 80049f8:	4a2f      	ldr	r2, [pc, #188]	; (8004ab8 <UART_SetConfig+0x5b0>)
 80049fa:	189a      	adds	r2, r3, r2
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	0019      	movs	r1, r3
 8004a02:	0010      	movs	r0, r2
 8004a04:	f7fb fb80 	bl	8000108 <__udivsi3>
 8004a08:	0003      	movs	r3, r0
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a0e:	e028      	b.n	8004a62 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004a10:	f7fe ff04 	bl	800381c <HAL_RCC_GetSysClockFreq>
 8004a14:	0002      	movs	r2, r0
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	085b      	lsrs	r3, r3, #1
 8004a1c:	18d2      	adds	r2, r2, r3
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	0019      	movs	r1, r3
 8004a24:	0010      	movs	r0, r2
 8004a26:	f7fb fb6f 	bl	8000108 <__udivsi3>
 8004a2a:	0003      	movs	r3, r0
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a30:	e017      	b.n	8004a62 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	085b      	lsrs	r3, r3, #1
 8004a38:	2280      	movs	r2, #128	; 0x80
 8004a3a:	0212      	lsls	r2, r2, #8
 8004a3c:	189a      	adds	r2, r3, r2
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	0019      	movs	r1, r3
 8004a44:	0010      	movs	r0, r2
 8004a46:	f7fb fb5f 	bl	8000108 <__udivsi3>
 8004a4a:	0003      	movs	r3, r0
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a50:	e007      	b.n	8004a62 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004a52:	2313      	movs	r3, #19
 8004a54:	2218      	movs	r2, #24
 8004a56:	4694      	mov	ip, r2
 8004a58:	44bc      	add	ip, r7
 8004a5a:	4463      	add	r3, ip
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	701a      	strb	r2, [r3, #0]
        break;
 8004a60:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a64:	2b0f      	cmp	r3, #15
 8004a66:	d908      	bls.n	8004a7a <UART_SetConfig+0x572>
 8004a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6a:	4a0f      	ldr	r2, [pc, #60]	; (8004aa8 <UART_SetConfig+0x5a0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d804      	bhi.n	8004a7a <UART_SetConfig+0x572>
    {
      huart->Instance->BRR = usartdiv;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a76:	60da      	str	r2, [r3, #12]
 8004a78:	e006      	b.n	8004a88 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 8004a7a:	2313      	movs	r3, #19
 8004a7c:	2218      	movs	r2, #24
 8004a7e:	4694      	mov	ip, r2
 8004a80:	44bc      	add	ip, r7
 8004a82:	4463      	add	r3, ip
 8004a84:	2201      	movs	r2, #1
 8004a86:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	2200      	movs	r2, #0
 8004a92:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004a94:	2313      	movs	r3, #19
 8004a96:	2218      	movs	r2, #24
 8004a98:	4694      	mov	ip, r2
 8004a9a:	44bc      	add	ip, r7
 8004a9c:	4463      	add	r3, ip
 8004a9e:	781b      	ldrb	r3, [r3, #0]
}
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	b00e      	add	sp, #56	; 0x38
 8004aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8004aa8:	0000ffff 	.word	0x0000ffff
 8004aac:	08004fac 	.word	0x08004fac
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	003d0900 	.word	0x003d0900
 8004ab8:	00f42400 	.word	0x00f42400

08004abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	2201      	movs	r2, #1
 8004aca:	4013      	ands	r3, r2
 8004acc:	d00b      	beq.n	8004ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	4a4a      	ldr	r2, [pc, #296]	; (8004c00 <UART_AdvFeatureConfig+0x144>)
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	0019      	movs	r1, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	2202      	movs	r2, #2
 8004aec:	4013      	ands	r3, r2
 8004aee:	d00b      	beq.n	8004b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	4a43      	ldr	r2, [pc, #268]	; (8004c04 <UART_AdvFeatureConfig+0x148>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	0019      	movs	r1, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d00b      	beq.n	8004b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	4a3b      	ldr	r2, [pc, #236]	; (8004c08 <UART_AdvFeatureConfig+0x14c>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	0019      	movs	r1, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	2208      	movs	r2, #8
 8004b30:	4013      	ands	r3, r2
 8004b32:	d00b      	beq.n	8004b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4a34      	ldr	r2, [pc, #208]	; (8004c0c <UART_AdvFeatureConfig+0x150>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	0019      	movs	r1, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	2210      	movs	r2, #16
 8004b52:	4013      	ands	r3, r2
 8004b54:	d00b      	beq.n	8004b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4a2c      	ldr	r2, [pc, #176]	; (8004c10 <UART_AdvFeatureConfig+0x154>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	0019      	movs	r1, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	2220      	movs	r2, #32
 8004b74:	4013      	ands	r3, r2
 8004b76:	d00b      	beq.n	8004b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	4a25      	ldr	r2, [pc, #148]	; (8004c14 <UART_AdvFeatureConfig+0x158>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	0019      	movs	r1, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	2240      	movs	r2, #64	; 0x40
 8004b96:	4013      	ands	r3, r2
 8004b98:	d01d      	beq.n	8004bd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4a1d      	ldr	r2, [pc, #116]	; (8004c18 <UART_AdvFeatureConfig+0x15c>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bb6:	2380      	movs	r3, #128	; 0x80
 8004bb8:	035b      	lsls	r3, r3, #13
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d10b      	bne.n	8004bd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <UART_AdvFeatureConfig+0x160>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	0019      	movs	r1, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	2280      	movs	r2, #128	; 0x80
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d00b      	beq.n	8004bf8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4a0e      	ldr	r2, [pc, #56]	; (8004c20 <UART_AdvFeatureConfig+0x164>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	0019      	movs	r1, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	605a      	str	r2, [r3, #4]
  }
}
 8004bf8:	46c0      	nop			; (mov r8, r8)
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	b002      	add	sp, #8
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	fffdffff 	.word	0xfffdffff
 8004c04:	fffeffff 	.word	0xfffeffff
 8004c08:	fffbffff 	.word	0xfffbffff
 8004c0c:	ffff7fff 	.word	0xffff7fff
 8004c10:	ffffefff 	.word	0xffffefff
 8004c14:	ffffdfff 	.word	0xffffdfff
 8004c18:	ffefffff 	.word	0xffefffff
 8004c1c:	ff9fffff 	.word	0xff9fffff
 8004c20:	fff7ffff 	.word	0xfff7ffff

08004c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004c32:	f7fd fe15 	bl	8002860 <HAL_GetTick>
 8004c36:	0003      	movs	r3, r0
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2208      	movs	r2, #8
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d10d      	bne.n	8004c64 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	2380      	movs	r3, #128	; 0x80
 8004c4c:	0399      	lsls	r1, r3, #14
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	4b16      	ldr	r3, [pc, #88]	; (8004cac <UART_CheckIdleState+0x88>)
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	0013      	movs	r3, r2
 8004c56:	2200      	movs	r2, #0
 8004c58:	f000 f82a 	bl	8004cb0 <UART_WaitOnFlagUntilTimeout>
 8004c5c:	1e03      	subs	r3, r0, #0
 8004c5e:	d001      	beq.n	8004c64 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e01f      	b.n	8004ca4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d10d      	bne.n	8004c8e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	2380      	movs	r3, #128	; 0x80
 8004c76:	03d9      	lsls	r1, r3, #15
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <UART_CheckIdleState+0x88>)
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	0013      	movs	r3, r2
 8004c80:	2200      	movs	r2, #0
 8004c82:	f000 f815 	bl	8004cb0 <UART_WaitOnFlagUntilTimeout>
 8004c86:	1e03      	subs	r3, r0, #0
 8004c88:	d001      	beq.n	8004c8e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e00a      	b.n	8004ca4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2270      	movs	r2, #112	; 0x70
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b004      	add	sp, #16
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	01ffffff 	.word	0x01ffffff

08004cb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	1dfb      	adds	r3, r7, #7
 8004cbe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc0:	e029      	b.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	d026      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc8:	f7fd fdca 	bl	8002860 <HAL_GetTick>
 8004ccc:	0002      	movs	r2, r0
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d302      	bcc.n	8004cde <UART_WaitOnFlagUntilTimeout+0x2e>
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d11b      	bne.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4915      	ldr	r1, [pc, #84]	; (8004d40 <UART_WaitOnFlagUntilTimeout+0x90>)
 8004cea:	400a      	ands	r2, r1
 8004cec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	438a      	bics	r2, r1
 8004cfc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2220      	movs	r2, #32
 8004d02:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2270      	movs	r2, #112	; 0x70
 8004d0e:	2100      	movs	r1, #0
 8004d10:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e00f      	b.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	425a      	negs	r2, r3
 8004d26:	4153      	adcs	r3, r2
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	001a      	movs	r2, r3
 8004d2c:	1dfb      	adds	r3, r7, #7
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d0c6      	beq.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	0018      	movs	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b004      	add	sp, #16
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	fffffe5f 	.word	0xfffffe5f

08004d44 <__libc_init_array>:
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	2600      	movs	r6, #0
 8004d48:	4d0c      	ldr	r5, [pc, #48]	; (8004d7c <__libc_init_array+0x38>)
 8004d4a:	4c0d      	ldr	r4, [pc, #52]	; (8004d80 <__libc_init_array+0x3c>)
 8004d4c:	1b64      	subs	r4, r4, r5
 8004d4e:	10a4      	asrs	r4, r4, #2
 8004d50:	42a6      	cmp	r6, r4
 8004d52:	d109      	bne.n	8004d68 <__libc_init_array+0x24>
 8004d54:	2600      	movs	r6, #0
 8004d56:	f000 f82b 	bl	8004db0 <_init>
 8004d5a:	4d0a      	ldr	r5, [pc, #40]	; (8004d84 <__libc_init_array+0x40>)
 8004d5c:	4c0a      	ldr	r4, [pc, #40]	; (8004d88 <__libc_init_array+0x44>)
 8004d5e:	1b64      	subs	r4, r4, r5
 8004d60:	10a4      	asrs	r4, r4, #2
 8004d62:	42a6      	cmp	r6, r4
 8004d64:	d105      	bne.n	8004d72 <__libc_init_array+0x2e>
 8004d66:	bd70      	pop	{r4, r5, r6, pc}
 8004d68:	00b3      	lsls	r3, r6, #2
 8004d6a:	58eb      	ldr	r3, [r5, r3]
 8004d6c:	4798      	blx	r3
 8004d6e:	3601      	adds	r6, #1
 8004d70:	e7ee      	b.n	8004d50 <__libc_init_array+0xc>
 8004d72:	00b3      	lsls	r3, r6, #2
 8004d74:	58eb      	ldr	r3, [r5, r3]
 8004d76:	4798      	blx	r3
 8004d78:	3601      	adds	r6, #1
 8004d7a:	e7f2      	b.n	8004d62 <__libc_init_array+0x1e>
 8004d7c:	08004fd8 	.word	0x08004fd8
 8004d80:	08004fd8 	.word	0x08004fd8
 8004d84:	08004fd8 	.word	0x08004fd8
 8004d88:	08004fdc 	.word	0x08004fdc

08004d8c <memcpy>:
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	b510      	push	{r4, lr}
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d100      	bne.n	8004d96 <memcpy+0xa>
 8004d94:	bd10      	pop	{r4, pc}
 8004d96:	5ccc      	ldrb	r4, [r1, r3]
 8004d98:	54c4      	strb	r4, [r0, r3]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	e7f8      	b.n	8004d90 <memcpy+0x4>

08004d9e <memset>:
 8004d9e:	0003      	movs	r3, r0
 8004da0:	1812      	adds	r2, r2, r0
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d100      	bne.n	8004da8 <memset+0xa>
 8004da6:	4770      	bx	lr
 8004da8:	7019      	strb	r1, [r3, #0]
 8004daa:	3301      	adds	r3, #1
 8004dac:	e7f9      	b.n	8004da2 <memset+0x4>
	...

08004db0 <_init>:
 8004db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db6:	bc08      	pop	{r3}
 8004db8:	469e      	mov	lr, r3
 8004dba:	4770      	bx	lr

08004dbc <_fini>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr
