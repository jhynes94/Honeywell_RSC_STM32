
Honeywell_RSC_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003180  08003180  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003188  08003188  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003188  08003188  00013188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800318c  0800318c  0001318c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000004  08003194  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003194  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ec2  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015c7  00000000  00000000  00027eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000840  00000000  00000000  000294b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000778  00000000  00000000  00029cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010ca4  00000000  00000000  0002a470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000072ea  00000000  00000000  0003b114  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00066478  00000000  00000000  000423fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a8876  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cb4  00000000  00000000  000a88f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800309c 	.word	0x0800309c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	0800309c 	.word	0x0800309c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <DrvSPIInit>:
//#include "vfu.h"

#include "DrvSPI.h"
#include "RegMap.h"

void DrvSPIInit() {
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
  // read and store constants from EEPROM
  get_catalog_listing();
 800043e:	f000 f931 	bl	80006a4 <get_catalog_listing>
  get_serial_number();
 8000442:	f000 f921 	bl	8000688 <get_serial_number>
  get_pressure_range();
 8000446:	f000 f909 	bl	800065c <get_pressure_range>
  get_pressure_minimum();
 800044a:	f000 f8f1 	bl	8000630 <get_pressure_minimum>
  get_pressure_unit();
 800044e:	f000 f879 	bl	8000544 <get_pressure_unit>
  get_pressure_type();
 8000452:	f000 f83b 	bl	80004cc <get_pressure_type>

  // setup ADC
  uint8_t adc_init_values[4];
  get_initial_adc_values(adc_init_values);
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	0018      	movs	r0, r3
 800045a:	f000 f807 	bl	800046c <get_initial_adc_values>
//
//  get_coefficients();
//
//  set_data_rate(N_DR_20_SPS);
//  set_mode(NORMAL_MODE);
  HAL_Delay(5);
 800045e:	2005      	movs	r0, #5
 8000460:	f000 fc78 	bl	8000d54 <HAL_Delay>

}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <get_initial_adc_values>:
  uint8_t command[5] = {RSC_ADC_RESET_COMMAND, adc_init_values[0], adc_init_values[1], adc_init_values[2], adc_init_values[3]};
  adc_write(0, 5, command);
  HAL_Delay(5);
}

void get_initial_adc_values(uint8_t* adc_init_values) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  eeprom_read(RSC_ADC_CONFIG_00, 1, &adc_init_values[0]);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	001a      	movs	r2, r3
 8000478:	2101      	movs	r1, #1
 800047a:	203d      	movs	r0, #61	; 0x3d
 800047c:	f000 f920 	bl	80006c0 <eeprom_read>
  HAL_Delay(2);
 8000480:	2002      	movs	r0, #2
 8000482:	f000 fc67 	bl	8000d54 <HAL_Delay>
  eeprom_read(RSC_ADC_CONFIG_01, 1, &adc_init_values[1]);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	3301      	adds	r3, #1
 800048a:	001a      	movs	r2, r3
 800048c:	2101      	movs	r1, #1
 800048e:	203f      	movs	r0, #63	; 0x3f
 8000490:	f000 f916 	bl	80006c0 <eeprom_read>
  HAL_Delay(2);
 8000494:	2002      	movs	r0, #2
 8000496:	f000 fc5d 	bl	8000d54 <HAL_Delay>
  eeprom_read(RSC_ADC_CONFIG_02, 1, &adc_init_values[2]);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	3302      	adds	r3, #2
 800049e:	001a      	movs	r2, r3
 80004a0:	2101      	movs	r1, #1
 80004a2:	2041      	movs	r0, #65	; 0x41
 80004a4:	f000 f90c 	bl	80006c0 <eeprom_read>
  HAL_Delay(2);
 80004a8:	2002      	movs	r0, #2
 80004aa:	f000 fc53 	bl	8000d54 <HAL_Delay>
  eeprom_read(RSC_ADC_CONFIG_03, 1, &adc_init_values[3]);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	3303      	adds	r3, #3
 80004b2:	001a      	movs	r2, r3
 80004b4:	2101      	movs	r1, #1
 80004b6:	2043      	movs	r0, #67	; 0x43
 80004b8:	f000 f902 	bl	80006c0 <eeprom_read>
  HAL_Delay(2);
 80004bc:	2002      	movs	r0, #2
 80004be:	f000 fc49 	bl	8000d54 <HAL_Delay>
}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b002      	add	sp, #8
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <get_pressure_type>:

void get_pressure_type() {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  char buf[RSC_SENSOR_TYPE_LEN];
  eeprom_read(RSC_PRESSURE_REFERENCE, RSC_SENSOR_TYPE_LEN, buf);
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	001a      	movs	r2, r3
 80004d6:	2101      	movs	r1, #1
 80004d8:	2028      	movs	r0, #40	; 0x28
 80004da:	f000 f8f1 	bl	80006c0 <eeprom_read>
  switch (buf[0]) {
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b44      	cmp	r3, #68	; 0x44
 80004e4:	d004      	beq.n	80004f0 <get_pressure_type+0x24>
 80004e6:	2b47      	cmp	r3, #71	; 0x47
 80004e8:	d010      	beq.n	800050c <get_pressure_type+0x40>
 80004ea:	2b41      	cmp	r3, #65	; 0x41
 80004ec:	d007      	beq.n	80004fe <get_pressure_type+0x32>
 80004ee:	e014      	b.n	800051a <get_pressure_type+0x4e>
    case 'D':
      _pressure_type = DIFFERENTIAL;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <get_pressure_type+0x64>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
      _pressure_type_name = "differential";
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <get_pressure_type+0x68>)
 80004f8:	4a0f      	ldr	r2, [pc, #60]	; (8000538 <get_pressure_type+0x6c>)
 80004fa:	601a      	str	r2, [r3, #0]
      break;
 80004fc:	e013      	b.n	8000526 <get_pressure_type+0x5a>
    case 'A':
      _pressure_type = ABSOLUTE;
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <get_pressure_type+0x64>)
 8000500:	2201      	movs	r2, #1
 8000502:	701a      	strb	r2, [r3, #0]
      _pressure_type_name = "absolute";
 8000504:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <get_pressure_type+0x68>)
 8000506:	4a0d      	ldr	r2, [pc, #52]	; (800053c <get_pressure_type+0x70>)
 8000508:	601a      	str	r2, [r3, #0]
      break;
 800050a:	e00c      	b.n	8000526 <get_pressure_type+0x5a>
    case 'G':
      _pressure_type = GAUGE;
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <get_pressure_type+0x64>)
 800050e:	2202      	movs	r2, #2
 8000510:	701a      	strb	r2, [r3, #0]
      _pressure_type_name = "gauge";
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <get_pressure_type+0x68>)
 8000514:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <get_pressure_type+0x74>)
 8000516:	601a      	str	r2, [r3, #0]
      break;
 8000518:	e005      	b.n	8000526 <get_pressure_type+0x5a>
    default:
      _pressure_type = DIFFERENTIAL;
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <get_pressure_type+0x64>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
      _pressure_type_name = "differential";
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <get_pressure_type+0x68>)
 8000522:	4a05      	ldr	r2, [pc, #20]	; (8000538 <get_pressure_type+0x6c>)
 8000524:	601a      	str	r2, [r3, #0]
  }
}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	b002      	add	sp, #8
 800052c:	bd80      	pop	{r7, pc}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	20000060 	.word	0x20000060
 8000534:	2000007c 	.word	0x2000007c
 8000538:	080030b4 	.word	0x080030b4
 800053c:	080030c4 	.word	0x080030c4
 8000540:	080030d0 	.word	0x080030d0

08000544 <get_pressure_unit>:

void get_pressure_unit() {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
  char buf[RSC_PRESSURE_UNIT_LEN] = {0};
 800054a:	003b      	movs	r3, r7
 800054c:	0018      	movs	r0, r3
 800054e:	2306      	movs	r3, #6
 8000550:	001a      	movs	r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	f002 fd99 	bl	800308a <memset>
  eeprom_read(RSC_PRESSURE_UNIT_MSB, RSC_PRESSURE_UNIT_LEN, buf);
 8000558:	003b      	movs	r3, r7
 800055a:	001a      	movs	r2, r3
 800055c:	2106      	movs	r1, #6
 800055e:	2023      	movs	r0, #35	; 0x23
 8000560:	f000 f8ae 	bl	80006c0 <eeprom_read>
  buf[RSC_PRESSURE_UNIT_LEN - 1] = '\0';
 8000564:	003b      	movs	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	715a      	strb	r2, [r3, #5]
  if (buf[RSC_PRESSURE_UNIT_LEN - 2] == 'O') {
 800056a:	003b      	movs	r3, r7
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	2b4f      	cmp	r3, #79	; 0x4f
 8000570:	d106      	bne.n	8000580 <get_pressure_unit+0x3c>
    _pressure_unit = INH2O;
 8000572:	4b26      	ldr	r3, [pc, #152]	; (800060c <get_pressure_unit+0xc8>)
 8000574:	2204      	movs	r2, #4
 8000576:	701a      	strb	r2, [r3, #0]
    _pressure_unit_name = "inH2O";
 8000578:	4b25      	ldr	r3, [pc, #148]	; (8000610 <get_pressure_unit+0xcc>)
 800057a:	4a26      	ldr	r2, [pc, #152]	; (8000614 <get_pressure_unit+0xd0>)
 800057c:	601a      	str	r2, [r3, #0]
    }
  } else if (buf[RSC_PRESSURE_UNIT_LEN - 2] == 'i') {
    _pressure_unit = PSI;
    _pressure_unit_name = "psi";
  }
}
 800057e:	e040      	b.n	8000602 <get_pressure_unit+0xbe>
  } else if (buf[RSC_PRESSURE_UNIT_LEN - 2] == 'a') {
 8000580:	003b      	movs	r3, r7
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	2b61      	cmp	r3, #97	; 0x61
 8000586:	d11c      	bne.n	80005c2 <get_pressure_unit+0x7e>
    if (buf[RSC_PRESSURE_UNIT_LEN - 4] == 'K') {
 8000588:	003b      	movs	r3, r7
 800058a:	789b      	ldrb	r3, [r3, #2]
 800058c:	2b4b      	cmp	r3, #75	; 0x4b
 800058e:	d106      	bne.n	800059e <get_pressure_unit+0x5a>
      _pressure_unit = KPASCAL;
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <get_pressure_unit+0xc8>)
 8000592:	2201      	movs	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
      _pressure_unit_name = "kilopascal";
 8000596:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <get_pressure_unit+0xcc>)
 8000598:	4a1f      	ldr	r2, [pc, #124]	; (8000618 <get_pressure_unit+0xd4>)
 800059a:	601a      	str	r2, [r3, #0]
}
 800059c:	e031      	b.n	8000602 <get_pressure_unit+0xbe>
    } else if (buf[RSC_PRESSURE_UNIT_LEN - 4] == 'M') {
 800059e:	003b      	movs	r3, r7
 80005a0:	789b      	ldrb	r3, [r3, #2]
 80005a2:	2b4d      	cmp	r3, #77	; 0x4d
 80005a4:	d106      	bne.n	80005b4 <get_pressure_unit+0x70>
      _pressure_unit = MPASCAL;
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <get_pressure_unit+0xc8>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	701a      	strb	r2, [r3, #0]
      _pressure_unit_name = "megapascal";
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <get_pressure_unit+0xcc>)
 80005ae:	4a1b      	ldr	r2, [pc, #108]	; (800061c <get_pressure_unit+0xd8>)
 80005b0:	601a      	str	r2, [r3, #0]
}
 80005b2:	e026      	b.n	8000602 <get_pressure_unit+0xbe>
      _pressure_unit = PASCAL;
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <get_pressure_unit+0xc8>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
      _pressure_unit_name = "pascal";
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <get_pressure_unit+0xcc>)
 80005bc:	4a18      	ldr	r2, [pc, #96]	; (8000620 <get_pressure_unit+0xdc>)
 80005be:	601a      	str	r2, [r3, #0]
}
 80005c0:	e01f      	b.n	8000602 <get_pressure_unit+0xbe>
  } else if (buf[RSC_PRESSURE_UNIT_LEN - 2] == 'r') {
 80005c2:	003b      	movs	r3, r7
 80005c4:	791b      	ldrb	r3, [r3, #4]
 80005c6:	2b72      	cmp	r3, #114	; 0x72
 80005c8:	d111      	bne.n	80005ee <get_pressure_unit+0xaa>
    if (buf[RSC_PRESSURE_UNIT_LEN - 5] == 'm') {
 80005ca:	003b      	movs	r3, r7
 80005cc:	785b      	ldrb	r3, [r3, #1]
 80005ce:	2b6d      	cmp	r3, #109	; 0x6d
 80005d0:	d106      	bne.n	80005e0 <get_pressure_unit+0x9c>
      _pressure_unit = mBAR;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <get_pressure_unit+0xc8>)
 80005d4:	2206      	movs	r2, #6
 80005d6:	701a      	strb	r2, [r3, #0]
      _pressure_unit_name = "millibar";
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <get_pressure_unit+0xcc>)
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <get_pressure_unit+0xe0>)
 80005dc:	601a      	str	r2, [r3, #0]
}
 80005de:	e010      	b.n	8000602 <get_pressure_unit+0xbe>
      _pressure_unit = BAR;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <get_pressure_unit+0xc8>)
 80005e2:	2205      	movs	r2, #5
 80005e4:	701a      	strb	r2, [r3, #0]
      _pressure_unit_name = "bar";
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <get_pressure_unit+0xcc>)
 80005e8:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <get_pressure_unit+0xe4>)
 80005ea:	601a      	str	r2, [r3, #0]
}
 80005ec:	e009      	b.n	8000602 <get_pressure_unit+0xbe>
  } else if (buf[RSC_PRESSURE_UNIT_LEN - 2] == 'i') {
 80005ee:	003b      	movs	r3, r7
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	2b69      	cmp	r3, #105	; 0x69
 80005f4:	d105      	bne.n	8000602 <get_pressure_unit+0xbe>
    _pressure_unit = PSI;
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <get_pressure_unit+0xc8>)
 80005f8:	2203      	movs	r2, #3
 80005fa:	701a      	strb	r2, [r3, #0]
    _pressure_unit_name = "psi";
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <get_pressure_unit+0xcc>)
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <get_pressure_unit+0xe8>)
 8000600:	601a      	str	r2, [r3, #0]
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b002      	add	sp, #8
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	20000020 	.word	0x20000020
 8000610:	20000084 	.word	0x20000084
 8000614:	080030d8 	.word	0x080030d8
 8000618:	080030e0 	.word	0x080030e0
 800061c:	080030ec 	.word	0x080030ec
 8000620:	080030f8 	.word	0x080030f8
 8000624:	08003100 	.word	0x08003100
 8000628:	0800310c 	.word	0x0800310c
 800062c:	08003110 	.word	0x08003110

08000630 <get_pressure_minimum>:

void get_pressure_minimum() {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  uint8_t buf[RSC_PRESSURE_MINIMUM_LEN];
  eeprom_read(RSC_PRESSURE_MINIMUM_LSB, RSC_PRESSURE_MINIMUM_LEN, buf);
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	001a      	movs	r2, r3
 800063a:	2104      	movs	r1, #4
 800063c:	201f      	movs	r0, #31
 800063e:	f000 f83f 	bl	80006c0 <eeprom_read>
  // convert byte array to float (buf[0] is LSB)
  memcpy(&_pressure_minimum, &buf, sizeof(_pressure_minimum));
 8000642:	1d39      	adds	r1, r7, #4
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <get_pressure_minimum+0x28>)
 8000646:	2204      	movs	r2, #4
 8000648:	0018      	movs	r0, r3
 800064a:	f002 fd15 	bl	8003078 <memcpy>
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	20000078 	.word	0x20000078

0800065c <get_pressure_range>:

void get_pressure_range() {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
  uint8_t buf[RSC_PRESSURE_RANGE_LEN];
  eeprom_read(RSC_PRESSURE_RANGE_LSB, RSC_PRESSURE_RANGE_LEN, buf);
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	001a      	movs	r2, r3
 8000666:	2104      	movs	r1, #4
 8000668:	201b      	movs	r0, #27
 800066a:	f000 f829 	bl	80006c0 <eeprom_read>
  // convert byte array to float (buf[0] is LSB)
  memcpy(&_pressure_range, &buf, sizeof(_pressure_range));
 800066e:	1d39      	adds	r1, r7, #4
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <get_pressure_range+0x28>)
 8000672:	2204      	movs	r2, #4
 8000674:	0018      	movs	r0, r3
 8000676:	f002 fcff 	bl	8003078 <memcpy>
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b002      	add	sp, #8
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	2000008c 	.word	0x2000008c

08000688 <get_serial_number>:

void get_serial_number() {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  eeprom_read(RSC_SERIAL_NO_YYYY_MSB, RSC_SENSOR_NUMBER_LEN, _serial_number);
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <get_serial_number+0x18>)
 800068e:	001a      	movs	r2, r3
 8000690:	210c      	movs	r1, #12
 8000692:	2010      	movs	r0, #16
 8000694:	f000 f814 	bl	80006c0 <eeprom_read>
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	20000024 	.word	0x20000024

080006a4 <get_catalog_listing>:

void get_catalog_listing() {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  eeprom_read(RSC_CATALOG_LISTING_MSB, RSC_SENSOR_NAME_LEN, _catalog_listing);
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <get_catalog_listing+0x18>)
 80006aa:	001a      	movs	r2, r3
 80006ac:	2110      	movs	r1, #16
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 f806 	bl	80006c0 <eeprom_read>
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	20000064 	.word	0x20000064

080006c0 <eeprom_read>:

void eeprom_read(uint16_t address, uint8_t num_bytes, uint8_t *data) {
 80006c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	603a      	str	r2, [r7, #0]
 80006c8:	1dbb      	adds	r3, r7, #6
 80006ca:	1c02      	adds	r2, r0, #0
 80006cc:	801a      	strh	r2, [r3, #0]
 80006ce:	1d7b      	adds	r3, r7, #5
 80006d0:	1c0a      	adds	r2, r1, #0
 80006d2:	701a      	strb	r2, [r3, #0]
  // generate command (refer to sensor datasheet section 2.2)
  uint8_t command[2] = {0};
 80006d4:	2110      	movs	r1, #16
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	801a      	strh	r2, [r3, #0]
  command[0] = RSC_READ_EEPROM_INSTRUCTION | ((address & RSC_EEPROM_ADDRESS_9TH_BIT_MASK) >> 5);
 80006dc:	1dbb      	adds	r3, r7, #6
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	115b      	asrs	r3, r3, #5
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	2208      	movs	r2, #8
 80006e6:	4013      	ands	r3, r2
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	2203      	movs	r2, #3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	701a      	strb	r2, [r3, #0]
  command[1] = address & 0xFF;
 80006f6:	1dbb      	adds	r3, r7, #6
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	000d      	movs	r5, r1
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	705a      	strb	r2, [r3, #1]

  // send command
  // select EEPROM
  select_eeprom();
 8000702:	f000 f83f 	bl	8000784 <select_eeprom>
  HAL_StatusTypeDef SPI_Status;
  SPI_Status = HAL_SPI_Transmit(&hspi1, &command[0], 1, HAL_MAX_DELAY); //SPI.transfer(command[0]);
 8000706:	2613      	movs	r6, #19
 8000708:	19bc      	adds	r4, r7, r6
 800070a:	2301      	movs	r3, #1
 800070c:	425b      	negs	r3, r3
 800070e:	0029      	movs	r1, r5
 8000710:	000d      	movs	r5, r1
 8000712:	1879      	adds	r1, r7, r1
 8000714:	481a      	ldr	r0, [pc, #104]	; (8000780 <eeprom_read+0xc0>)
 8000716:	2201      	movs	r2, #1
 8000718:	f001 fc5f 	bl	8001fda <HAL_SPI_Transmit>
 800071c:	0003      	movs	r3, r0
 800071e:	7023      	strb	r3, [r4, #0]
  SPI_Status = HAL_SPI_Transmit(&hspi1, &command[1], 1, HAL_MAX_DELAY); //SPI.transfer(command[1]);
 8000720:	19bc      	adds	r4, r7, r6
 8000722:	2301      	movs	r3, #1
 8000724:	425a      	negs	r2, r3
 8000726:	197b      	adds	r3, r7, r5
 8000728:	1c59      	adds	r1, r3, #1
 800072a:	4815      	ldr	r0, [pc, #84]	; (8000780 <eeprom_read+0xc0>)
 800072c:	0013      	movs	r3, r2
 800072e:	2201      	movs	r2, #1
 8000730:	f001 fc53 	bl	8001fda <HAL_SPI_Transmit>
 8000734:	0003      	movs	r3, r0
 8000736:	7023      	strb	r3, [r4, #0]

  // receive results
  // - results are transmitted back after the last bit of the command is sent
  // - to get results, just transfer dummy data, as subsequent bytes will not used by sensor
  for (int i = 0; i < num_bytes; i++) {
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	e015      	b.n	800076a <eeprom_read+0xaa>
	  uint8_t a = 0x00;
 800073e:	210f      	movs	r1, #15
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
	  SPI_Status = HAL_SPI_TransmitReceive(&hspi1, &a, &data[i], 1, HAL_MAX_DELAY); //data[i] = SPI.transfer(0x00);
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	18d2      	adds	r2, r2, r3
 800074c:	2313      	movs	r3, #19
 800074e:	18fc      	adds	r4, r7, r3
 8000750:	1879      	adds	r1, r7, r1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <eeprom_read+0xc0>)
 8000754:	2301      	movs	r3, #1
 8000756:	425b      	negs	r3, r3
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2301      	movs	r3, #1
 800075c:	f001 fd8b 	bl	8002276 <HAL_SPI_TransmitReceive>
 8000760:	0003      	movs	r3, r0
 8000762:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < num_bytes; i++) {
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	1d7b      	adds	r3, r7, #5
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	429a      	cmp	r2, r3
 8000772:	dbe4      	blt.n	800073e <eeprom_read+0x7e>
  // deselect EEPROM
  // - after command is sent, the sensor will keep sending bytes from EEPROM,
  //   in ascending order of address. Resetting the CS_EE pin at the end of
  //   the function means that when reading from EEPROM next time, the result
  //   would start at the correct address.
  deselect_eeprom();
 8000774:	f000 f81a 	bl	80007ac <deselect_eeprom>
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b007      	add	sp, #28
 800077e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000780:	20000090 	.word	0x20000090

08000784 <select_eeprom>:


void select_eeprom() {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  // enable CS_EE
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_EE_Pin, GPIO_PIN_RESET);
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <select_eeprom+0x24>)
 800078a:	2200      	movs	r2, #0
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	0018      	movs	r0, r3
 8000790:	f000 fd20 	bl	80011d4 <HAL_GPIO_WritePin>

  // make sure CS_ADC is not active
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_ADC_Pin, GPIO_PIN_SET);
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <select_eeprom+0x24>)
 8000796:	2201      	movs	r2, #1
 8000798:	2140      	movs	r1, #64	; 0x40
 800079a:	0018      	movs	r0, r3
 800079c:	f000 fd1a 	bl	80011d4 <HAL_GPIO_WritePin>

  // the EEPROM interface operates in SPI mode 0 (CPOL = 0, CPHA = 0) or mode 3 (CPOL = 1, CPHA = 1)
//  SPI.beginTransaction(SPISettings(1250000, MSBFIRST, SPI_MODE0));
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	50000400 	.word	0x50000400

080007ac <deselect_eeprom>:

void deselect_eeprom() {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
//  SPI.endTransaction();
	  HAL_GPIO_WritePin(GPIOB, SPI1_CS_EE_Pin, GPIO_PIN_SET);
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <deselect_eeprom+0x18>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fd0c 	bl	80011d4 <HAL_GPIO_WritePin>
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	50000400 	.word	0x50000400

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007cc:	f000 fa62 	bl	8000c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d0:	f000 f80a 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d4:	f000 f8e2 	bl	800099c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d8:	f000 f8b0 	bl	800093c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80007dc:	f000 f876 	bl	80008cc <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

	DrvSPIInit();
 80007e0:	f7ff fe2a 	bl	8000438 <DrvSPIInit>
	{
 80007e4:	e7fc      	b.n	80007e0 <main+0x18>
	...

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b099      	sub	sp, #100	; 0x64
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	242c      	movs	r4, #44	; 0x2c
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	0018      	movs	r0, r3
 80007f4:	2334      	movs	r3, #52	; 0x34
 80007f6:	001a      	movs	r2, r3
 80007f8:	2100      	movs	r1, #0
 80007fa:	f002 fc46 	bl	800308a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fe:	2318      	movs	r3, #24
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	0018      	movs	r0, r3
 8000804:	2314      	movs	r3, #20
 8000806:	001a      	movs	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	f002 fc3e 	bl	800308a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080e:	003b      	movs	r3, r7
 8000810:	0018      	movs	r0, r3
 8000812:	2318      	movs	r3, #24
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f002 fc37 	bl	800308a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800081c:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <SystemClock_Config+0xdc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a29      	ldr	r2, [pc, #164]	; (80008c8 <SystemClock_Config+0xe0>)
 8000822:	401a      	ands	r2, r3
 8000824:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <SystemClock_Config+0xdc>)
 8000826:	2180      	movs	r1, #128	; 0x80
 8000828:	0109      	lsls	r1, r1, #4
 800082a:	430a      	orrs	r2, r1
 800082c:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082e:	0021      	movs	r1, r4
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2202      	movs	r2, #2
 8000834:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2201      	movs	r2, #1
 800083a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2210      	movs	r2, #16
 8000840:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2202      	movs	r2, #2
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2280      	movs	r2, #128	; 0x80
 8000852:	02d2      	lsls	r2, r2, #11
 8000854:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2280      	movs	r2, #128	; 0x80
 800085a:	03d2      	lsls	r2, r2, #15
 800085c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	187b      	adds	r3, r7, r1
 8000860:	0018      	movs	r0, r3
 8000862:	f000 fcd5 	bl	8001210 <HAL_RCC_OscConfig>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800086a:	f000 f8ed 	bl	8000a48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086e:	2118      	movs	r1, #24
 8000870:	187b      	adds	r3, r7, r1
 8000872:	220f      	movs	r2, #15
 8000874:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2203      	movs	r2, #3
 800087a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2101      	movs	r1, #1
 8000892:	0018      	movs	r0, r3
 8000894:	f001 f836 	bl	8001904 <HAL_RCC_ClockConfig>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800089c:	f000 f8d4 	bl	8000a48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008a0:	003b      	movs	r3, r7
 80008a2:	2202      	movs	r2, #2
 80008a4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008a6:	003b      	movs	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ac:	003b      	movs	r3, r7
 80008ae:	0018      	movs	r0, r3
 80008b0:	f001 fa0c 	bl	8001ccc <HAL_RCCEx_PeriphCLKConfig>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008b8:	f000 f8c6 	bl	8000a48 <Error_Handler>
  }
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b019      	add	sp, #100	; 0x64
 80008c2:	bd90      	pop	{r4, r7, pc}
 80008c4:	40007000 	.word	0x40007000
 80008c8:	ffffe7ff 	.word	0xffffe7ff

080008cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_SPI1_Init+0x68>)
 80008d2:	4a19      	ldr	r2, [pc, #100]	; (8000938 <MX_SPI1_Init+0x6c>)
 80008d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_SPI1_Init+0x68>)
 80008d8:	2282      	movs	r2, #130	; 0x82
 80008da:	0052      	lsls	r2, r2, #1
 80008dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_SPI1_Init+0x68>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_SPI1_Init+0x68>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_SPI1_Init+0x68>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f0:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_SPI1_Init+0x68>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_SPI1_Init+0x68>)
 80008f8:	2280      	movs	r2, #128	; 0x80
 80008fa:	0092      	lsls	r2, r2, #2
 80008fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <MX_SPI1_Init+0x68>)
 8000900:	2238      	movs	r2, #56	; 0x38
 8000902:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_SPI1_Init+0x68>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_SPI1_Init+0x68>)
 800090c:	2200      	movs	r2, #0
 800090e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_SPI1_Init+0x68>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MX_SPI1_Init+0x68>)
 8000918:	2207      	movs	r2, #7
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <MX_SPI1_Init+0x68>)
 800091e:	0018      	movs	r0, r3
 8000920:	f001 fafc 	bl	8001f1c <HAL_SPI_Init>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000928:	f000 f88e 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	20000090 	.word	0x20000090
 8000938:	40013000 	.word	0x40013000

0800093c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_USART2_UART_Init+0x58>)
 8000942:	4a15      	ldr	r2, [pc, #84]	; (8000998 <MX_USART2_UART_Init+0x5c>)
 8000944:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_USART2_UART_Init+0x58>)
 8000948:	22e1      	movs	r2, #225	; 0xe1
 800094a:	0252      	lsls	r2, r2, #9
 800094c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_USART2_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_USART2_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_USART2_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_USART2_UART_Init+0x58>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_USART2_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_USART2_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_USART2_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_USART2_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <MX_USART2_UART_Init+0x58>)
 8000980:	0018      	movs	r0, r3
 8000982:	f001 fee3 	bl	800274c <HAL_UART_Init>
 8000986:	1e03      	subs	r3, r0, #0
 8000988:	d001      	beq.n	800098e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800098a:	f000 f85d 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200000e8 	.word	0x200000e8
 8000998:	40004400 	.word	0x40004400

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	240c      	movs	r4, #12
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	0018      	movs	r0, r3
 80009a8:	2314      	movs	r3, #20
 80009aa:	001a      	movs	r2, r3
 80009ac:	2100      	movs	r1, #0
 80009ae:	f002 fb6c 	bl	800308a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <MX_GPIO_Init+0xa4>)
 80009b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009b6:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <MX_GPIO_Init+0xa4>)
 80009b8:	2101      	movs	r1, #1
 80009ba:	430a      	orrs	r2, r1
 80009bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <MX_GPIO_Init+0xa4>)
 80009c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c2:	2201      	movs	r2, #1
 80009c4:	4013      	ands	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <MX_GPIO_Init+0xa4>)
 80009cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MX_GPIO_Init+0xa4>)
 80009d0:	2102      	movs	r1, #2
 80009d2:	430a      	orrs	r2, r1
 80009d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_GPIO_Init+0xa4>)
 80009d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009da:	2202      	movs	r2, #2
 80009dc:	4013      	ands	r3, r2
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_ADC_Pin|SPI1_CS_EE_Pin, GPIO_PIN_RESET);
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_GPIO_Init+0xa8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	21c0      	movs	r1, #192	; 0xc0
 80009e8:	0018      	movs	r0, r3
 80009ea:	f000 fbf3 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_DRDY_Pin */
  GPIO_InitStruct.Pin = SPI1_DRDY_Pin;
 80009ee:	0021      	movs	r1, r4
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2202      	movs	r2, #2
 80009f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI1_DRDY_GPIO_Port, &GPIO_InitStruct);
 8000a02:	000c      	movs	r4, r1
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <MX_GPIO_Init+0xa8>)
 8000a08:	0019      	movs	r1, r3
 8000a0a:	0010      	movs	r0, r2
 8000a0c:	f000 fa74 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_ADC_Pin SPI1_CS_EE_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_ADC_Pin|SPI1_CS_EE_Pin;
 8000a10:	0021      	movs	r1, r4
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	22c0      	movs	r2, #192	; 0xc0
 8000a16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <MX_GPIO_Init+0xa8>)
 8000a2e:	0019      	movs	r1, r3
 8000a30:	0010      	movs	r0, r2
 8000a32:	f000 fa61 	bl	8000ef8 <HAL_GPIO_Init>

}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b009      	add	sp, #36	; 0x24
 8000a3c:	bd90      	pop	{r4, r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	40021000 	.word	0x40021000
 8000a44:	50000400 	.word	0x50000400

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <HAL_MspInit+0x24>)
 8000a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x24>)
 8000a5e:	2101      	movs	r1, #1
 8000a60:	430a      	orrs	r2, r1
 8000a62:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <HAL_MspInit+0x24>)
 8000a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <HAL_MspInit+0x24>)
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	0549      	lsls	r1, r1, #21
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	230c      	movs	r3, #12
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	0018      	movs	r0, r3
 8000a8a:	2314      	movs	r3, #20
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f002 fafb 	bl	800308a <memset>
  if(hspi->Instance==SPI1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <HAL_SPI_MspInit+0x7c>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d128      	bne.n	8000af0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_SPI_MspInit+0x80>)
 8000aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <HAL_SPI_MspInit+0x80>)
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	0149      	lsls	r1, r1, #5
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <HAL_SPI_MspInit+0x80>)
 8000aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_SPI_MspInit+0x80>)
 8000ab2:	2102      	movs	r1, #2
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <HAL_SPI_MspInit+0x80>)
 8000aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abc:	2202      	movs	r2, #2
 8000abe:	4013      	ands	r3, r2
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ac4:	210c      	movs	r1, #12
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2238      	movs	r2, #56	; 0x38
 8000aca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2202      	movs	r2, #2
 8000ad0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2203      	movs	r2, #3
 8000adc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_SPI_MspInit+0x84>)
 8000ae8:	0019      	movs	r1, r3
 8000aea:	0010      	movs	r0, r2
 8000aec:	f000 fa04 	bl	8000ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b008      	add	sp, #32
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40013000 	.word	0x40013000
 8000afc:	40021000 	.word	0x40021000
 8000b00:	50000400 	.word	0x50000400

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	230c      	movs	r3, #12
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	0018      	movs	r0, r3
 8000b12:	2314      	movs	r3, #20
 8000b14:	001a      	movs	r2, r3
 8000b16:	2100      	movs	r1, #0
 8000b18:	f002 fab7 	bl	800308a <memset>
  if(huart->Instance==USART2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a18      	ldr	r2, [pc, #96]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d129      	bne.n	8000b7a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_UART_MspInit+0x84>)
 8000b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_UART_MspInit+0x84>)
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	0289      	lsls	r1, r1, #10
 8000b30:	430a      	orrs	r2, r1
 8000b32:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_UART_MspInit+0x84>)
 8000b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <HAL_UART_MspInit+0x84>)
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_UART_MspInit+0x84>)
 8000b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b44:	2201      	movs	r2, #1
 8000b46:	4013      	ands	r3, r2
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000b4c:	210c      	movs	r1, #12
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2202      	movs	r2, #2
 8000b58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2203      	movs	r2, #3
 8000b64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2204      	movs	r2, #4
 8000b6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	187a      	adds	r2, r7, r1
 8000b6e:	23a0      	movs	r3, #160	; 0xa0
 8000b70:	05db      	lsls	r3, r3, #23
 8000b72:	0011      	movs	r1, r2
 8000b74:	0018      	movs	r0, r3
 8000b76:	f000 f9bf 	bl	8000ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b008      	add	sp, #32
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	40004400 	.word	0x40004400
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	00008004 	.word	0x00008004

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler+0x4>

08000ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb8:	f000 f8b6 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <SystemInit+0x64>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <SystemInit+0x64>)
 8000bce:	2180      	movs	r1, #128	; 0x80
 8000bd0:	0049      	lsls	r1, r1, #1
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <SystemInit+0x64>)
 8000bd8:	68da      	ldr	r2, [r3, #12]
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <SystemInit+0x64>)
 8000bdc:	4913      	ldr	r1, [pc, #76]	; (8000c2c <SystemInit+0x68>)
 8000bde:	400a      	ands	r2, r1
 8000be0:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <SystemInit+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <SystemInit+0x64>)
 8000be8:	4911      	ldr	r1, [pc, #68]	; (8000c30 <SystemInit+0x6c>)
 8000bea:	400a      	ands	r2, r1
 8000bec:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <SystemInit+0x64>)
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <SystemInit+0x64>)
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	438a      	bics	r2, r1
 8000bf8:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <SystemInit+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <SystemInit+0x64>)
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <SystemInit+0x70>)
 8000c02:	400a      	ands	r2, r1
 8000c04:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <SystemInit+0x64>)
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <SystemInit+0x64>)
 8000c0c:	490a      	ldr	r1, [pc, #40]	; (8000c38 <SystemInit+0x74>)
 8000c0e:	400a      	ands	r2, r1
 8000c10:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <SystemInit+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <SystemInit+0x78>)
 8000c1a:	2280      	movs	r2, #128	; 0x80
 8000c1c:	0512      	lsls	r2, r2, #20
 8000c1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	88ff400c 	.word	0x88ff400c
 8000c30:	fef6fff6 	.word	0xfef6fff6
 8000c34:	fffbffff 	.word	0xfffbffff
 8000c38:	ff02ffff 	.word	0xff02ffff
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000c44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c46:	e003      	b.n	8000c50 <LoopCopyDataInit>

08000c48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000c4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c4e:	3104      	adds	r1, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c50:	480b      	ldr	r0, [pc, #44]	; (8000c80 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000c54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c58:	d3f6      	bcc.n	8000c48 <CopyDataInit>
  ldr  r2, =_sbss
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000c5c:	e002      	b.n	8000c64 <LoopFillZerobss>

08000c5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000c5e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000c60:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c62:	3204      	adds	r2, #4

08000c64 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <LoopForever+0x16>)
  cmp  r2, r3
 8000c66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c68:	d3f9      	bcc.n	8000c5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c6a:	f7ff ffab 	bl	8000bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f002 f9df 	bl	8003030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c72:	f7ff fda9 	bl	80007c8 <main>

08000c76 <LoopForever>:

LoopForever:
    b LoopForever
 8000c76:	e7fe      	b.n	8000c76 <LoopForever>
   ldr   r0, =_estack
 8000c78:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8000c7c:	08003190 	.word	0x08003190
  ldr  r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c84:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000c88:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000c8c:	2000016c 	.word	0x2000016c

08000c90 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC1_COMP_IRQHandler>
	...

08000c94 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_Init+0x3c>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_Init+0x3c>)
 8000ca6:	2140      	movs	r1, #64	; 0x40
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cac:	2000      	movs	r0, #0
 8000cae:	f000 f811 	bl	8000cd4 <HAL_InitTick>
 8000cb2:	1e03      	subs	r3, r0, #0
 8000cb4:	d003      	beq.n	8000cbe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	e001      	b.n	8000cc2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cbe:	f7ff fec9 	bl	8000a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
}
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b002      	add	sp, #8
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	40022000 	.word	0x40022000

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cdc:	230f      	movs	r3, #15
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_InitTick+0x50>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	23fa      	movs	r3, #250	; 0xfa
 8000cea:	0099      	lsls	r1, r3, #2
 8000cec:	0010      	movs	r0, r2
 8000cee:	f7ff fa0b 	bl	8000108 <__udivsi3>
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f000 f8f2 	bl	8000ede <HAL_SYSTICK_Config>
 8000cfa:	1e03      	subs	r3, r0, #0
 8000cfc:	d004      	beq.n	8000d08 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000cfe:	230f      	movs	r3, #15
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	e006      	b.n	8000d16 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	425b      	negs	r3, r3
 8000d0e:	2200      	movs	r2, #0
 8000d10:	0018      	movs	r0, r3
 8000d12:	f000 f8cf 	bl	8000eb4 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000d16:	230f      	movs	r3, #15
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	781b      	ldrb	r3, [r3, #0]
}
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b004      	add	sp, #16
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick++;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_IncTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	1c5a      	adds	r2, r3, #1
 8000d32:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <HAL_IncTick+0x14>)
 8000d34:	601a      	str	r2, [r3, #0]
}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000168 	.word	0x20000168

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b02      	ldr	r3, [pc, #8]	; (8000d50 <HAL_GetTick+0x10>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	20000168 	.word	0x20000168

08000d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	f7ff fff0 	bl	8000d40 <HAL_GetTick>
 8000d60:	0003      	movs	r3, r0
 8000d62:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	d002      	beq.n	8000d74 <HAL_Delay+0x20>
  {
    wait++;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	f7ff ffe3 	bl	8000d40 <HAL_GetTick>
 8000d7a:	0002      	movs	r2, r0
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d8f7      	bhi.n	8000d76 <HAL_Delay+0x22>
  {
  }
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b004      	add	sp, #16
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	0002      	movs	r2, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b7f      	cmp	r3, #127	; 0x7f
 8000da4:	d932      	bls.n	8000e0c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da6:	4a2f      	ldr	r2, [pc, #188]	; (8000e64 <NVIC_SetPriority+0xd4>)
 8000da8:	1dfb      	adds	r3, r7, #7
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	0019      	movs	r1, r3
 8000dae:	230f      	movs	r3, #15
 8000db0:	400b      	ands	r3, r1
 8000db2:	3b08      	subs	r3, #8
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	3306      	adds	r3, #6
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	18d3      	adds	r3, r2, r3
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	1dfa      	adds	r2, r7, #7
 8000dc2:	7812      	ldrb	r2, [r2, #0]
 8000dc4:	0011      	movs	r1, r2
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	400a      	ands	r2, r1
 8000dca:	00d2      	lsls	r2, r2, #3
 8000dcc:	21ff      	movs	r1, #255	; 0xff
 8000dce:	4091      	lsls	r1, r2
 8000dd0:	000a      	movs	r2, r1
 8000dd2:	43d2      	mvns	r2, r2
 8000dd4:	401a      	ands	r2, r3
 8000dd6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	019b      	lsls	r3, r3, #6
 8000ddc:	22ff      	movs	r2, #255	; 0xff
 8000dde:	401a      	ands	r2, r3
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	0018      	movs	r0, r3
 8000de6:	2303      	movs	r3, #3
 8000de8:	4003      	ands	r3, r0
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dee:	481d      	ldr	r0, [pc, #116]	; (8000e64 <NVIC_SetPriority+0xd4>)
 8000df0:	1dfb      	adds	r3, r7, #7
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	001c      	movs	r4, r3
 8000df6:	230f      	movs	r3, #15
 8000df8:	4023      	ands	r3, r4
 8000dfa:	3b08      	subs	r3, #8
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	3306      	adds	r3, #6
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	18c3      	adds	r3, r0, r3
 8000e06:	3304      	adds	r3, #4
 8000e08:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e0a:	e027      	b.n	8000e5c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e0c:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <NVIC_SetPriority+0xd8>)
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b25b      	sxtb	r3, r3
 8000e14:	089b      	lsrs	r3, r3, #2
 8000e16:	33c0      	adds	r3, #192	; 0xc0
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	589b      	ldr	r3, [r3, r2]
 8000e1c:	1dfa      	adds	r2, r7, #7
 8000e1e:	7812      	ldrb	r2, [r2, #0]
 8000e20:	0011      	movs	r1, r2
 8000e22:	2203      	movs	r2, #3
 8000e24:	400a      	ands	r2, r1
 8000e26:	00d2      	lsls	r2, r2, #3
 8000e28:	21ff      	movs	r1, #255	; 0xff
 8000e2a:	4091      	lsls	r1, r2
 8000e2c:	000a      	movs	r2, r1
 8000e2e:	43d2      	mvns	r2, r2
 8000e30:	401a      	ands	r2, r3
 8000e32:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	019b      	lsls	r3, r3, #6
 8000e38:	22ff      	movs	r2, #255	; 0xff
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	0018      	movs	r0, r3
 8000e42:	2303      	movs	r3, #3
 8000e44:	4003      	ands	r3, r0
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e4a:	4807      	ldr	r0, [pc, #28]	; (8000e68 <NVIC_SetPriority+0xd8>)
 8000e4c:	1dfb      	adds	r3, r7, #7
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	430a      	orrs	r2, r1
 8000e56:	33c0      	adds	r3, #192	; 0xc0
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	501a      	str	r2, [r3, r0]
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b003      	add	sp, #12
 8000e62:	bd90      	pop	{r4, r7, pc}
 8000e64:	e000ed00 	.word	0xe000ed00
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	4a0c      	ldr	r2, [pc, #48]	; (8000eac <SysTick_Config+0x40>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d901      	bls.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e010      	b.n	8000ea4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <SysTick_Config+0x44>)
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	3a01      	subs	r2, #1
 8000e88:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	425b      	negs	r3, r3
 8000e8e:	2103      	movs	r1, #3
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff ff7d 	bl	8000d90 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <SysTick_Config+0x44>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <SysTick_Config+0x44>)
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b002      	add	sp, #8
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	00ffffff 	.word	0x00ffffff
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	1c02      	adds	r2, r0, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f7ff ff5d 	bl	8000d90 <NVIC_SetPriority>
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b004      	add	sp, #16
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f7ff ffbf 	bl	8000e6c <SysTick_Config>
 8000eee:	0003      	movs	r3, r0
}
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b002      	add	sp, #8
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f0e:	e149      	b.n	80011a4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2101      	movs	r1, #1
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4091      	lsls	r1, r2
 8000f1a:	000a      	movs	r2, r1
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d100      	bne.n	8000f28 <HAL_GPIO_Init+0x30>
 8000f26:	e13a      	b.n	800119e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x40>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b12      	cmp	r3, #18
 8000f36:	d123      	bne.n	8000f80 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	58d3      	ldr	r3, [r2, r3]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	2207      	movs	r2, #7
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	409a      	lsls	r2, r3
 8000f52:	0013      	movs	r3, r2
 8000f54:	43da      	mvns	r2, r3
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	2107      	movs	r1, #7
 8000f64:	400b      	ands	r3, r1
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	0013      	movs	r3, r2
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	0092      	lsls	r2, r2, #2
 8000f7c:	6939      	ldr	r1, [r7, #16]
 8000f7e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d00b      	beq.n	8000fa0 <HAL_GPIO_Init+0xa8>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d007      	beq.n	8000fa0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f94:	2b11      	cmp	r3, #17
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b12      	cmp	r3, #18
 8000f9e:	d130      	bne.n	8001002 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	409a      	lsls	r2, r3
 8000fae:	0013      	movs	r3, r2
 8000fb0:	43da      	mvns	r2, r3
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	409a      	lsls	r2, r3
 8000fc2:	0013      	movs	r3, r2
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	0013      	movs	r3, r2
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	2201      	movs	r2, #1
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	409a      	lsls	r2, r3
 8001010:	0013      	movs	r3, r2
 8001012:	43da      	mvns	r2, r3
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2203      	movs	r2, #3
 8001020:	401a      	ands	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	409a      	lsls	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	409a      	lsls	r2, r3
 8001044:	0013      	movs	r3, r2
 8001046:	43da      	mvns	r2, r3
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	055b      	lsls	r3, r3, #21
 800106e:	4013      	ands	r3, r2
 8001070:	d100      	bne.n	8001074 <HAL_GPIO_Init+0x17c>
 8001072:	e094      	b.n	800119e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001074:	4b51      	ldr	r3, [pc, #324]	; (80011bc <HAL_GPIO_Init+0x2c4>)
 8001076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001078:	4b50      	ldr	r3, [pc, #320]	; (80011bc <HAL_GPIO_Init+0x2c4>)
 800107a:	2101      	movs	r1, #1
 800107c:	430a      	orrs	r2, r1
 800107e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001080:	4a4f      	ldr	r2, [pc, #316]	; (80011c0 <HAL_GPIO_Init+0x2c8>)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	589b      	ldr	r3, [r3, r2]
 800108c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2203      	movs	r2, #3
 8001092:	4013      	ands	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	409a      	lsls	r2, r3
 800109a:	0013      	movs	r3, r2
 800109c:	43da      	mvns	r2, r3
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	23a0      	movs	r3, #160	; 0xa0
 80010a8:	05db      	lsls	r3, r3, #23
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0x1de>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a44      	ldr	r2, [pc, #272]	; (80011c4 <HAL_GPIO_Init+0x2cc>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <HAL_GPIO_Init+0x1da>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a43      	ldr	r2, [pc, #268]	; (80011c8 <HAL_GPIO_Init+0x2d0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x1d6>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a42      	ldr	r2, [pc, #264]	; (80011cc <HAL_GPIO_Init+0x2d4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_GPIO_Init+0x1d2>
 80010c6:	2305      	movs	r3, #5
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x1e0>
 80010ca:	2306      	movs	r3, #6
 80010cc:	e004      	b.n	80010d8 <HAL_GPIO_Init+0x1e0>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e002      	b.n	80010d8 <HAL_GPIO_Init+0x1e0>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <HAL_GPIO_Init+0x1e0>
 80010d6:	2300      	movs	r3, #0
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	2103      	movs	r1, #3
 80010dc:	400a      	ands	r2, r1
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	4093      	lsls	r3, r2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e8:	4935      	ldr	r1, [pc, #212]	; (80011c0 <HAL_GPIO_Init+0x2c8>)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	3302      	adds	r3, #2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f6:	4b36      	ldr	r3, [pc, #216]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43da      	mvns	r2, r3
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	025b      	lsls	r3, r3, #9
 800110e:	4013      	ands	r3, r2
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800111a:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43da      	mvns	r2, r3
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	029b      	lsls	r3, r3, #10
 8001138:	4013      	ands	r3, r2
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43da      	mvns	r2, r3
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	035b      	lsls	r3, r3, #13
 8001162:	4013      	ands	r3, r2
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43da      	mvns	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	039b      	lsls	r3, r3, #14
 800118c:	4013      	ands	r3, r2
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	40da      	lsrs	r2, r3
 80011ac:	1e13      	subs	r3, r2, #0
 80011ae:	d000      	beq.n	80011b2 <HAL_GPIO_Init+0x2ba>
 80011b0:	e6ae      	b.n	8000f10 <HAL_GPIO_Init+0x18>
  }
}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b006      	add	sp, #24
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010000 	.word	0x40010000
 80011c4:	50000400 	.word	0x50000400
 80011c8:	50000800 	.word	0x50000800
 80011cc:	50001c00 	.word	0x50001c00
 80011d0:	40010400 	.word	0x40010400

080011d4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	0008      	movs	r0, r1
 80011de:	0011      	movs	r1, r2
 80011e0:	1cbb      	adds	r3, r7, #2
 80011e2:	1c02      	adds	r2, r0, #0
 80011e4:	801a      	strh	r2, [r3, #0]
 80011e6:	1c7b      	adds	r3, r7, #1
 80011e8:	1c0a      	adds	r2, r1, #0
 80011ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80011ec:	1c7b      	adds	r3, r7, #1
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f4:	1cbb      	adds	r3, r7, #2
 80011f6:	881a      	ldrh	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80011fc:	e003      	b.n	8001206 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80011fe:	1cbb      	adds	r3, r7, #2
 8001200:	881a      	ldrh	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d102      	bne.n	8001224 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	f000 fb6a 	bl	80018f8 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001224:	4bc7      	ldr	r3, [pc, #796]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	220c      	movs	r2, #12
 800122a:	4013      	ands	r3, r2
 800122c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800122e:	4bc5      	ldr	r3, [pc, #788]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	025b      	lsls	r3, r3, #9
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2201      	movs	r2, #1
 8001240:	4013      	ands	r3, r2
 8001242:	d100      	bne.n	8001246 <HAL_RCC_OscConfig+0x36>
 8001244:	e07d      	b.n	8001342 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	2b08      	cmp	r3, #8
 800124a:	d007      	beq.n	800125c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	2b0c      	cmp	r3, #12
 8001250:	d112      	bne.n	8001278 <HAL_RCC_OscConfig+0x68>
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	025b      	lsls	r3, r3, #9
 8001258:	429a      	cmp	r2, r3
 800125a:	d10d      	bne.n	8001278 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125c:	4bb9      	ldr	r3, [pc, #740]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	029b      	lsls	r3, r3, #10
 8001264:	4013      	ands	r3, r2
 8001266:	d100      	bne.n	800126a <HAL_RCC_OscConfig+0x5a>
 8001268:	e06a      	b.n	8001340 <HAL_RCC_OscConfig+0x130>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d166      	bne.n	8001340 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	f000 fb40 	bl	80018f8 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	025b      	lsls	r3, r3, #9
 8001280:	429a      	cmp	r2, r3
 8001282:	d107      	bne.n	8001294 <HAL_RCC_OscConfig+0x84>
 8001284:	4baf      	ldr	r3, [pc, #700]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4bae      	ldr	r3, [pc, #696]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 800128a:	2180      	movs	r1, #128	; 0x80
 800128c:	0249      	lsls	r1, r1, #9
 800128e:	430a      	orrs	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e027      	b.n	80012e4 <HAL_RCC_OscConfig+0xd4>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	23a0      	movs	r3, #160	; 0xa0
 800129a:	02db      	lsls	r3, r3, #11
 800129c:	429a      	cmp	r2, r3
 800129e:	d10e      	bne.n	80012be <HAL_RCC_OscConfig+0xae>
 80012a0:	4ba8      	ldr	r3, [pc, #672]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4ba7      	ldr	r3, [pc, #668]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80012a6:	2180      	movs	r1, #128	; 0x80
 80012a8:	02c9      	lsls	r1, r1, #11
 80012aa:	430a      	orrs	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	4ba5      	ldr	r3, [pc, #660]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4ba4      	ldr	r3, [pc, #656]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	0249      	lsls	r1, r1, #9
 80012b8:	430a      	orrs	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	e012      	b.n	80012e4 <HAL_RCC_OscConfig+0xd4>
 80012be:	4ba1      	ldr	r3, [pc, #644]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4ba0      	ldr	r3, [pc, #640]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80012c4:	49a0      	ldr	r1, [pc, #640]	; (8001548 <HAL_RCC_OscConfig+0x338>)
 80012c6:	400a      	ands	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	4b9e      	ldr	r3, [pc, #632]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	025b      	lsls	r3, r3, #9
 80012d2:	4013      	ands	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4b9a      	ldr	r3, [pc, #616]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b99      	ldr	r3, [pc, #612]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80012de:	499b      	ldr	r1, [pc, #620]	; (800154c <HAL_RCC_OscConfig+0x33c>)
 80012e0:	400a      	ands	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d014      	beq.n	8001316 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fd28 	bl	8000d40 <HAL_GetTick>
 80012f0:	0003      	movs	r3, r0
 80012f2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f6:	f7ff fd23 	bl	8000d40 <HAL_GetTick>
 80012fa:	0002      	movs	r2, r0
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b64      	cmp	r3, #100	; 0x64
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e2f7      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001308:	4b8e      	ldr	r3, [pc, #568]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	029b      	lsls	r3, r3, #10
 8001310:	4013      	ands	r3, r2
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0xe6>
 8001314:	e015      	b.n	8001342 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fd13 	bl	8000d40 <HAL_GetTick>
 800131a:	0003      	movs	r3, r0
 800131c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fd0e 	bl	8000d40 <HAL_GetTick>
 8001324:	0002      	movs	r2, r0
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e2e2      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001332:	4b84      	ldr	r3, [pc, #528]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	029b      	lsls	r3, r3, #10
 800133a:	4013      	ands	r3, r2
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x110>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2202      	movs	r2, #2
 8001348:	4013      	ands	r3, r2
 800134a:	d100      	bne.n	800134e <HAL_RCC_OscConfig+0x13e>
 800134c:	e098      	b.n	8001480 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	2220      	movs	r2, #32
 8001358:	4013      	ands	r3, r2
 800135a:	d009      	beq.n	8001370 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800135c:	4b79      	ldr	r3, [pc, #484]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b78      	ldr	r3, [pc, #480]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 8001362:	2120      	movs	r1, #32
 8001364:	430a      	orrs	r2, r1
 8001366:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	2220      	movs	r2, #32
 800136c:	4393      	bics	r3, r2
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	2b04      	cmp	r3, #4
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	2b0c      	cmp	r3, #12
 800137a:	d13d      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1e8>
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d13a      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001382:	4b70      	ldr	r3, [pc, #448]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2204      	movs	r2, #4
 8001388:	4013      	ands	r3, r2
 800138a:	d004      	beq.n	8001396 <HAL_RCC_OscConfig+0x186>
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e2b0      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b6b      	ldr	r3, [pc, #428]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4a6d      	ldr	r2, [pc, #436]	; (8001550 <HAL_RCC_OscConfig+0x340>)
 800139c:	4013      	ands	r3, r2
 800139e:	0019      	movs	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	021a      	lsls	r2, r3, #8
 80013a6:	4b67      	ldr	r3, [pc, #412]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80013a8:	430a      	orrs	r2, r1
 80013aa:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013ac:	4b65      	ldr	r3, [pc, #404]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2209      	movs	r2, #9
 80013b2:	4393      	bics	r3, r2
 80013b4:	0019      	movs	r1, r3
 80013b6:	4b63      	ldr	r3, [pc, #396]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80013b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ba:	430a      	orrs	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013be:	f000 fbcb 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 80013c2:	0001      	movs	r1, r0
 80013c4:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	220f      	movs	r2, #15
 80013cc:	4013      	ands	r3, r2
 80013ce:	4a61      	ldr	r2, [pc, #388]	; (8001554 <HAL_RCC_OscConfig+0x344>)
 80013d0:	5cd3      	ldrb	r3, [r2, r3]
 80013d2:	000a      	movs	r2, r1
 80013d4:	40da      	lsrs	r2, r3
 80013d6:	4b60      	ldr	r3, [pc, #384]	; (8001558 <HAL_RCC_OscConfig+0x348>)
 80013d8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80013da:	2513      	movs	r5, #19
 80013dc:	197c      	adds	r4, r7, r5
 80013de:	2000      	movs	r0, #0
 80013e0:	f7ff fc78 	bl	8000cd4 <HAL_InitTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80013e8:	197b      	adds	r3, r7, r5
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d047      	beq.n	8001480 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 80013f0:	2313      	movs	r3, #19
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	e27f      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d027      	beq.n	800144e <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013fe:	4b51      	ldr	r3, [pc, #324]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2209      	movs	r2, #9
 8001404:	4393      	bics	r3, r2
 8001406:	0019      	movs	r1, r3
 8001408:	4b4e      	ldr	r3, [pc, #312]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 800140a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fc96 	bl	8000d40 <HAL_GetTick>
 8001414:	0003      	movs	r3, r0
 8001416:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141a:	f7ff fc91 	bl	8000d40 <HAL_GetTick>
 800141e:	0002      	movs	r2, r0
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e265      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800142c:	4b45      	ldr	r3, [pc, #276]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2204      	movs	r2, #4
 8001432:	4013      	ands	r3, r2
 8001434:	d0f1      	beq.n	800141a <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001436:	4b43      	ldr	r3, [pc, #268]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4a45      	ldr	r2, [pc, #276]	; (8001550 <HAL_RCC_OscConfig+0x340>)
 800143c:	4013      	ands	r3, r2
 800143e:	0019      	movs	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	021a      	lsls	r2, r3, #8
 8001446:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 8001448:	430a      	orrs	r2, r1
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	e018      	b.n	8001480 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144e:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 8001454:	2101      	movs	r1, #1
 8001456:	438a      	bics	r2, r1
 8001458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145a:	f7ff fc71 	bl	8000d40 <HAL_GetTick>
 800145e:	0003      	movs	r3, r0
 8001460:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fc6c 	bl	8000d40 <HAL_GetTick>
 8001468:	0002      	movs	r2, r0
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e240      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001476:	4b33      	ldr	r3, [pc, #204]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2204      	movs	r2, #4
 800147c:	4013      	ands	r3, r2
 800147e:	d1f1      	bne.n	8001464 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2210      	movs	r2, #16
 8001486:	4013      	ands	r3, r2
 8001488:	d100      	bne.n	800148c <HAL_RCC_OscConfig+0x27c>
 800148a:	e09e      	b.n	80015ca <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d13f      	bne.n	8001512 <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001492:	4b2c      	ldr	r3, [pc, #176]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4013      	ands	r3, r2
 800149c:	d005      	beq.n	80014aa <HAL_RCC_OscConfig+0x29a>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e226      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	4a2b      	ldr	r2, [pc, #172]	; (800155c <HAL_RCC_OscConfig+0x34c>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	0019      	movs	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a1a      	ldr	r2, [r3, #32]
 80014b8:	4b22      	ldr	r3, [pc, #136]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80014ba:	430a      	orrs	r2, r1
 80014bc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	0a19      	lsrs	r1, r3, #8
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	061a      	lsls	r2, r3, #24
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80014ce:	430a      	orrs	r2, r1
 80014d0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	0b5b      	lsrs	r3, r3, #13
 80014d8:	3301      	adds	r3, #1
 80014da:	2280      	movs	r2, #128	; 0x80
 80014dc:	0212      	lsls	r2, r2, #8
 80014de:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	210f      	movs	r1, #15
 80014e8:	400b      	ands	r3, r1
 80014ea:	491a      	ldr	r1, [pc, #104]	; (8001554 <HAL_RCC_OscConfig+0x344>)
 80014ec:	5ccb      	ldrb	r3, [r1, r3]
 80014ee:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_RCC_OscConfig+0x348>)
 80014f2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80014f4:	2513      	movs	r5, #19
 80014f6:	197c      	adds	r4, r7, r5
 80014f8:	2000      	movs	r0, #0
 80014fa:	f7ff fbeb 	bl	8000cd4 <HAL_InitTick>
 80014fe:	0003      	movs	r3, r0
 8001500:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001502:	197b      	adds	r3, r7, r5
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d05f      	beq.n	80015ca <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 800150a:	2313      	movs	r3, #19
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	e1f2      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d03d      	beq.n	8001596 <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	0049      	lsls	r1, r1, #1
 8001524:	430a      	orrs	r2, r1
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fc0a 	bl	8000d40 <HAL_GetTick>
 800152c:	0003      	movs	r3, r0
 800152e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001530:	e016      	b.n	8001560 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001532:	f7ff fc05 	bl	8000d40 <HAL_GetTick>
 8001536:	0002      	movs	r2, r0
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d90f      	bls.n	8001560 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e1d9      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
 8001544:	40021000 	.word	0x40021000
 8001548:	fffeffff 	.word	0xfffeffff
 800154c:	fffbffff 	.word	0xfffbffff
 8001550:	ffffe0ff 	.word	0xffffe0ff
 8001554:	08003114 	.word	0x08003114
 8001558:	20000000 	.word	0x20000000
 800155c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001560:	4bca      	ldr	r3, [pc, #808]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4013      	ands	r3, r2
 800156a:	d0e2      	beq.n	8001532 <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800156c:	4bc7      	ldr	r3, [pc, #796]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	4ac7      	ldr	r2, [pc, #796]	; (8001890 <HAL_RCC_OscConfig+0x680>)
 8001572:	4013      	ands	r3, r2
 8001574:	0019      	movs	r1, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1a      	ldr	r2, [r3, #32]
 800157a:	4bc4      	ldr	r3, [pc, #784]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 800157c:	430a      	orrs	r2, r1
 800157e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001580:	4bc2      	ldr	r3, [pc, #776]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	0a19      	lsrs	r1, r3, #8
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	061a      	lsls	r2, r3, #24
 800158e:	4bbf      	ldr	r3, [pc, #764]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001590:	430a      	orrs	r2, r1
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	e019      	b.n	80015ca <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001596:	4bbd      	ldr	r3, [pc, #756]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4bbc      	ldr	r3, [pc, #752]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 800159c:	49bd      	ldr	r1, [pc, #756]	; (8001894 <HAL_RCC_OscConfig+0x684>)
 800159e:	400a      	ands	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fbcd 	bl	8000d40 <HAL_GetTick>
 80015a6:	0003      	movs	r3, r0
 80015a8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ac:	f7ff fbc8 	bl	8000d40 <HAL_GetTick>
 80015b0:	0002      	movs	r2, r0
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e19c      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015be:	4bb3      	ldr	r3, [pc, #716]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4013      	ands	r3, r2
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2208      	movs	r2, #8
 80015d0:	4013      	ands	r3, r2
 80015d2:	d036      	beq.n	8001642 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d019      	beq.n	8001610 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015dc:	4bab      	ldr	r3, [pc, #684]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 80015de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015e0:	4baa      	ldr	r3, [pc, #680]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 80015e2:	2101      	movs	r1, #1
 80015e4:	430a      	orrs	r2, r1
 80015e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e8:	f7ff fbaa 	bl	8000d40 <HAL_GetTick>
 80015ec:	0003      	movs	r3, r0
 80015ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f2:	f7ff fba5 	bl	8000d40 <HAL_GetTick>
 80015f6:	0002      	movs	r2, r0
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e179      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001604:	4ba1      	ldr	r3, [pc, #644]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001608:	2202      	movs	r2, #2
 800160a:	4013      	ands	r3, r2
 800160c:	d0f1      	beq.n	80015f2 <HAL_RCC_OscConfig+0x3e2>
 800160e:	e018      	b.n	8001642 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001610:	4b9e      	ldr	r3, [pc, #632]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001612:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001614:	4b9d      	ldr	r3, [pc, #628]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001616:	2101      	movs	r1, #1
 8001618:	438a      	bics	r2, r1
 800161a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff fb90 	bl	8000d40 <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001626:	f7ff fb8b 	bl	8000d40 <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e15f      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001638:	4b94      	ldr	r3, [pc, #592]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 800163a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800163c:	2202      	movs	r2, #2
 800163e:	4013      	ands	r3, r2
 8001640:	d1f1      	bne.n	8001626 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2204      	movs	r2, #4
 8001648:	4013      	ands	r3, r2
 800164a:	d100      	bne.n	800164e <HAL_RCC_OscConfig+0x43e>
 800164c:	e0af      	b.n	80017ae <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800164e:	2323      	movs	r3, #35	; 0x23
 8001650:	18fb      	adds	r3, r7, r3
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001656:	4b8d      	ldr	r3, [pc, #564]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	055b      	lsls	r3, r3, #21
 800165e:	4013      	ands	r3, r2
 8001660:	d10a      	bne.n	8001678 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b8a      	ldr	r3, [pc, #552]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001666:	4b89      	ldr	r3, [pc, #548]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001668:	2180      	movs	r1, #128	; 0x80
 800166a:	0549      	lsls	r1, r1, #21
 800166c:	430a      	orrs	r2, r1
 800166e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001670:	2323      	movs	r3, #35	; 0x23
 8001672:	18fb      	adds	r3, r7, r3
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	4b87      	ldr	r3, [pc, #540]	; (8001898 <HAL_RCC_OscConfig+0x688>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4013      	ands	r3, r2
 8001682:	d11a      	bne.n	80016ba <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001684:	4b84      	ldr	r3, [pc, #528]	; (8001898 <HAL_RCC_OscConfig+0x688>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b83      	ldr	r3, [pc, #524]	; (8001898 <HAL_RCC_OscConfig+0x688>)
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	0049      	lsls	r1, r1, #1
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001692:	f7ff fb55 	bl	8000d40 <HAL_GetTick>
 8001696:	0003      	movs	r3, r0
 8001698:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169c:	f7ff fb50 	bl	8000d40 <HAL_GetTick>
 80016a0:	0002      	movs	r2, r0
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e124      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ae:	4b7a      	ldr	r3, [pc, #488]	; (8001898 <HAL_RCC_OscConfig+0x688>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4013      	ands	r3, r2
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_OscConfig+0x4c6>
 80016c6:	4b71      	ldr	r3, [pc, #452]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 80016c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ca:	4b70      	ldr	r3, [pc, #448]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 80016cc:	2180      	movs	r1, #128	; 0x80
 80016ce:	0049      	lsls	r1, r1, #1
 80016d0:	430a      	orrs	r2, r1
 80016d2:	651a      	str	r2, [r3, #80]	; 0x50
 80016d4:	e031      	b.n	800173a <HAL_RCC_OscConfig+0x52a>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4e8>
 80016de:	4b6b      	ldr	r3, [pc, #428]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 80016e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e2:	4b6a      	ldr	r3, [pc, #424]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 80016e4:	496b      	ldr	r1, [pc, #428]	; (8001894 <HAL_RCC_OscConfig+0x684>)
 80016e6:	400a      	ands	r2, r1
 80016e8:	651a      	str	r2, [r3, #80]	; 0x50
 80016ea:	4b68      	ldr	r3, [pc, #416]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 80016ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ee:	4b67      	ldr	r3, [pc, #412]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 80016f0:	496a      	ldr	r1, [pc, #424]	; (800189c <HAL_RCC_OscConfig+0x68c>)
 80016f2:	400a      	ands	r2, r1
 80016f4:	651a      	str	r2, [r3, #80]	; 0x50
 80016f6:	e020      	b.n	800173a <HAL_RCC_OscConfig+0x52a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	23a0      	movs	r3, #160	; 0xa0
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	429a      	cmp	r2, r3
 8001702:	d10e      	bne.n	8001722 <HAL_RCC_OscConfig+0x512>
 8001704:	4b61      	ldr	r3, [pc, #388]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001706:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001708:	4b60      	ldr	r3, [pc, #384]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 800170a:	2180      	movs	r1, #128	; 0x80
 800170c:	00c9      	lsls	r1, r1, #3
 800170e:	430a      	orrs	r2, r1
 8001710:	651a      	str	r2, [r3, #80]	; 0x50
 8001712:	4b5e      	ldr	r3, [pc, #376]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001716:	4b5d      	ldr	r3, [pc, #372]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001718:	2180      	movs	r1, #128	; 0x80
 800171a:	0049      	lsls	r1, r1, #1
 800171c:	430a      	orrs	r2, r1
 800171e:	651a      	str	r2, [r3, #80]	; 0x50
 8001720:	e00b      	b.n	800173a <HAL_RCC_OscConfig+0x52a>
 8001722:	4b5a      	ldr	r3, [pc, #360]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001724:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001726:	4b59      	ldr	r3, [pc, #356]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001728:	495a      	ldr	r1, [pc, #360]	; (8001894 <HAL_RCC_OscConfig+0x684>)
 800172a:	400a      	ands	r2, r1
 800172c:	651a      	str	r2, [r3, #80]	; 0x50
 800172e:	4b57      	ldr	r3, [pc, #348]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001730:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001732:	4b56      	ldr	r3, [pc, #344]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001734:	4959      	ldr	r1, [pc, #356]	; (800189c <HAL_RCC_OscConfig+0x68c>)
 8001736:	400a      	ands	r2, r1
 8001738:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d015      	beq.n	800176e <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff fafd 	bl	8000d40 <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800174a:	e009      	b.n	8001760 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f7ff faf8 	bl	8000d40 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	4a52      	ldr	r2, [pc, #328]	; (80018a0 <HAL_RCC_OscConfig+0x690>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e0cb      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001760:	4b4a      	ldr	r3, [pc, #296]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001762:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4013      	ands	r3, r2
 800176a:	d0ef      	beq.n	800174c <HAL_RCC_OscConfig+0x53c>
 800176c:	e014      	b.n	8001798 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176e:	f7ff fae7 	bl	8000d40 <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001776:	e009      	b.n	800178c <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001778:	f7ff fae2 	bl	8000d40 <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	4a47      	ldr	r2, [pc, #284]	; (80018a0 <HAL_RCC_OscConfig+0x690>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e0b5      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800178c:	4b3f      	ldr	r3, [pc, #252]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 800178e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4013      	ands	r3, r2
 8001796:	d1ef      	bne.n	8001778 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001798:	2323      	movs	r3, #35	; 0x23
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d105      	bne.n	80017ae <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a2:	4b3a      	ldr	r3, [pc, #232]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 80017a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017a6:	4b39      	ldr	r3, [pc, #228]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 80017a8:	493e      	ldr	r1, [pc, #248]	; (80018a4 <HAL_RCC_OscConfig+0x694>)
 80017aa:	400a      	ands	r2, r1
 80017ac:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d100      	bne.n	80017b8 <HAL_RCC_OscConfig+0x5a8>
 80017b6:	e09e      	b.n	80018f6 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	2b0c      	cmp	r3, #12
 80017bc:	d100      	bne.n	80017c0 <HAL_RCC_OscConfig+0x5b0>
 80017be:	e077      	b.n	80018b0 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d145      	bne.n	8001854 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b2f      	ldr	r3, [pc, #188]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 80017ce:	4936      	ldr	r1, [pc, #216]	; (80018a8 <HAL_RCC_OscConfig+0x698>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fab4 	bl	8000d40 <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017de:	f7ff faaf 	bl	8000d40 <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e083      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017f0:	4b26      	ldr	r3, [pc, #152]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	049b      	lsls	r3, r3, #18
 80017f8:	4013      	ands	r3, r2
 80017fa:	d1f0      	bne.n	80017de <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fc:	4b23      	ldr	r3, [pc, #140]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4a2a      	ldr	r2, [pc, #168]	; (80018ac <HAL_RCC_OscConfig+0x69c>)
 8001802:	4013      	ands	r3, r2
 8001804:	0019      	movs	r1, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	431a      	orrs	r2, r3
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001818:	430a      	orrs	r2, r1
 800181a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	0449      	lsls	r1, r1, #17
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fa89 	bl	8000d40 <HAL_GetTick>
 800182e:	0003      	movs	r3, r0
 8001830:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff fa84 	bl	8000d40 <HAL_GetTick>
 8001838:	0002      	movs	r2, r0
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e058      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	049b      	lsls	r3, r3, #18
 800184e:	4013      	ands	r3, r2
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x624>
 8001852:	e050      	b.n	80018f6 <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 800185a:	4913      	ldr	r1, [pc, #76]	; (80018a8 <HAL_RCC_OscConfig+0x698>)
 800185c:	400a      	ands	r2, r1
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fa6e 	bl	8000d40 <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff fa69 	bl	8000d40 <HAL_GetTick>
 800186e:	0002      	movs	r2, r0
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e03d      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <HAL_RCC_OscConfig+0x67c>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	049b      	lsls	r3, r3, #18
 8001884:	4013      	ands	r3, r2
 8001886:	d1f0      	bne.n	800186a <HAL_RCC_OscConfig+0x65a>
 8001888:	e035      	b.n	80018f6 <HAL_RCC_OscConfig+0x6e6>
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	40021000 	.word	0x40021000
 8001890:	ffff1fff 	.word	0xffff1fff
 8001894:	fffffeff 	.word	0xfffffeff
 8001898:	40007000 	.word	0x40007000
 800189c:	fffffbff 	.word	0xfffffbff
 80018a0:	00001388 	.word	0x00001388
 80018a4:	efffffff 	.word	0xefffffff
 80018a8:	feffffff 	.word	0xfeffffff
 80018ac:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e01d      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_RCC_OscConfig+0x6f0>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	025b      	lsls	r3, r3, #9
 80018c8:	401a      	ands	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d10f      	bne.n	80018f2 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	23f0      	movs	r3, #240	; 0xf0
 80018d6:	039b      	lsls	r3, r3, #14
 80018d8:	401a      	ands	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	23c0      	movs	r3, #192	; 0xc0
 80018e6:	041b      	lsls	r3, r3, #16
 80018e8:	401a      	ands	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d001      	beq.n	80018f6 <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	0018      	movs	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b00a      	add	sp, #40	; 0x28
 80018fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001900:	40021000 	.word	0x40021000

08001904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e10d      	b.n	8001b34 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001918:	4b88      	ldr	r3, [pc, #544]	; (8001b3c <HAL_RCC_ClockConfig+0x238>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2201      	movs	r2, #1
 800191e:	4013      	ands	r3, r2
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d911      	bls.n	800194a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b85      	ldr	r3, [pc, #532]	; (8001b3c <HAL_RCC_ClockConfig+0x238>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	4393      	bics	r3, r2
 800192e:	0019      	movs	r1, r3
 8001930:	4b82      	ldr	r3, [pc, #520]	; (8001b3c <HAL_RCC_ClockConfig+0x238>)
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001938:	4b80      	ldr	r3, [pc, #512]	; (8001b3c <HAL_RCC_ClockConfig+0x238>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2201      	movs	r2, #1
 800193e:	4013      	ands	r3, r2
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d001      	beq.n	800194a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e0f4      	b.n	8001b34 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2202      	movs	r2, #2
 8001950:	4013      	ands	r3, r2
 8001952:	d009      	beq.n	8001968 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001954:	4b7a      	ldr	r3, [pc, #488]	; (8001b40 <HAL_RCC_ClockConfig+0x23c>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	22f0      	movs	r2, #240	; 0xf0
 800195a:	4393      	bics	r3, r2
 800195c:	0019      	movs	r1, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	4b77      	ldr	r3, [pc, #476]	; (8001b40 <HAL_RCC_ClockConfig+0x23c>)
 8001964:	430a      	orrs	r2, r1
 8001966:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2201      	movs	r2, #1
 800196e:	4013      	ands	r3, r2
 8001970:	d100      	bne.n	8001974 <HAL_RCC_ClockConfig+0x70>
 8001972:	e089      	b.n	8001a88 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d107      	bne.n	800198c <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800197c:	4b70      	ldr	r3, [pc, #448]	; (8001b40 <HAL_RCC_ClockConfig+0x23c>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	029b      	lsls	r3, r3, #10
 8001984:	4013      	ands	r3, r2
 8001986:	d120      	bne.n	80019ca <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0d3      	b.n	8001b34 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b03      	cmp	r3, #3
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001994:	4b6a      	ldr	r3, [pc, #424]	; (8001b40 <HAL_RCC_ClockConfig+0x23c>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	049b      	lsls	r3, r3, #18
 800199c:	4013      	ands	r3, r2
 800199e:	d114      	bne.n	80019ca <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0c7      	b.n	8001b34 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ac:	4b64      	ldr	r3, [pc, #400]	; (8001b40 <HAL_RCC_ClockConfig+0x23c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2204      	movs	r2, #4
 80019b2:	4013      	ands	r3, r2
 80019b4:	d109      	bne.n	80019ca <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e0bc      	b.n	8001b34 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019ba:	4b61      	ldr	r3, [pc, #388]	; (8001b40 <HAL_RCC_ClockConfig+0x23c>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4013      	ands	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e0b4      	b.n	8001b34 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ca:	4b5d      	ldr	r3, [pc, #372]	; (8001b40 <HAL_RCC_ClockConfig+0x23c>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2203      	movs	r2, #3
 80019d0:	4393      	bics	r3, r2
 80019d2:	0019      	movs	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <HAL_RCC_ClockConfig+0x23c>)
 80019da:	430a      	orrs	r2, r1
 80019dc:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019de:	f7ff f9af 	bl	8000d40 <HAL_GetTick>
 80019e2:	0003      	movs	r3, r0
 80019e4:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d111      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ee:	e009      	b.n	8001a04 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f0:	f7ff f9a6 	bl	8000d40 <HAL_GetTick>
 80019f4:	0002      	movs	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	4a52      	ldr	r2, [pc, #328]	; (8001b44 <HAL_RCC_ClockConfig+0x240>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e097      	b.n	8001b34 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a04:	4b4e      	ldr	r3, [pc, #312]	; (8001b40 <HAL_RCC_ClockConfig+0x23c>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	220c      	movs	r2, #12
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d1ef      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xec>
 8001a10:	e03a      	b.n	8001a88 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d111      	bne.n	8001a3e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a1a:	e009      	b.n	8001a30 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1c:	f7ff f990 	bl	8000d40 <HAL_GetTick>
 8001a20:	0002      	movs	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	4a47      	ldr	r2, [pc, #284]	; (8001b44 <HAL_RCC_ClockConfig+0x240>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e081      	b.n	8001b34 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a30:	4b43      	ldr	r3, [pc, #268]	; (8001b40 <HAL_RCC_ClockConfig+0x23c>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	220c      	movs	r2, #12
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b0c      	cmp	r3, #12
 8001a3a:	d1ef      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x118>
 8001a3c:	e024      	b.n	8001a88 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d11b      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a46:	e009      	b.n	8001a5c <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f7ff f97a 	bl	8000d40 <HAL_GetTick>
 8001a4c:	0002      	movs	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	4a3c      	ldr	r2, [pc, #240]	; (8001b44 <HAL_RCC_ClockConfig+0x240>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e06b      	b.n	8001b34 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a5c:	4b38      	ldr	r3, [pc, #224]	; (8001b40 <HAL_RCC_ClockConfig+0x23c>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	220c      	movs	r2, #12
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d1ef      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x144>
 8001a68:	e00e      	b.n	8001a88 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6a:	f7ff f969 	bl	8000d40 <HAL_GetTick>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	4a33      	ldr	r2, [pc, #204]	; (8001b44 <HAL_RCC_ClockConfig+0x240>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e05a      	b.n	8001b34 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a7e:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <HAL_RCC_ClockConfig+0x23c>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	220c      	movs	r2, #12
 8001a84:	4013      	ands	r3, r2
 8001a86:	d1f0      	bne.n	8001a6a <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a88:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <HAL_RCC_ClockConfig+0x238>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4013      	ands	r3, r2
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d211      	bcs.n	8001aba <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <HAL_RCC_ClockConfig+0x238>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4393      	bics	r3, r2
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_RCC_ClockConfig+0x238>)
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_RCC_ClockConfig+0x238>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2201      	movs	r2, #1
 8001aae:	4013      	ands	r3, r2
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e03c      	b.n	8001b34 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2204      	movs	r2, #4
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d009      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <HAL_RCC_ClockConfig+0x23c>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4a1f      	ldr	r2, [pc, #124]	; (8001b48 <HAL_RCC_ClockConfig+0x244>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_RCC_ClockConfig+0x23c>)
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2208      	movs	r2, #8
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d00a      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_RCC_ClockConfig+0x23c>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	4a19      	ldr	r2, [pc, #100]	; (8001b4c <HAL_RCC_ClockConfig+0x248>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	0019      	movs	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	00da      	lsls	r2, r3, #3
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_RCC_ClockConfig+0x23c>)
 8001af4:	430a      	orrs	r2, r1
 8001af6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001af8:	f000 f82e 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8001afc:	0001      	movs	r1, r0
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_RCC_ClockConfig+0x23c>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	091b      	lsrs	r3, r3, #4
 8001b04:	220f      	movs	r2, #15
 8001b06:	4013      	ands	r3, r2
 8001b08:	4a11      	ldr	r2, [pc, #68]	; (8001b50 <HAL_RCC_ClockConfig+0x24c>)
 8001b0a:	5cd3      	ldrb	r3, [r2, r3]
 8001b0c:	000a      	movs	r2, r1
 8001b0e:	40da      	lsrs	r2, r3
 8001b10:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <HAL_RCC_ClockConfig+0x250>)
 8001b12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001b14:	250b      	movs	r5, #11
 8001b16:	197c      	adds	r4, r7, r5
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f7ff f8db 	bl	8000cd4 <HAL_InitTick>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001b22:	197b      	adds	r3, r7, r5
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001b2a:	230b      	movs	r3, #11
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	e000      	b.n	8001b34 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b004      	add	sp, #16
 8001b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3c:	40022000 	.word	0x40022000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	00001388 	.word	0x00001388
 8001b48:	fffff8ff 	.word	0xfffff8ff
 8001b4c:	ffffc7ff 	.word	0xffffc7ff
 8001b50:	08003114 	.word	0x08003114
 8001b54:	20000000 	.word	0x20000000

08001b58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	220c      	movs	r2, #12
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d00e      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x34>
 8001b6e:	2b0c      	cmp	r3, #12
 8001b70:	d00f      	beq.n	8001b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d157      	bne.n	8001c26 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b76:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2210      	movs	r2, #16
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d002      	beq.n	8001b86 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b80:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b82:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b84:	e05d      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001b86:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b88:	613b      	str	r3, [r7, #16]
      break;
 8001b8a:	e05a      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b8c:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b8e:	613b      	str	r3, [r7, #16]
      break;
 8001b90:	e057      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	0c9b      	lsrs	r3, r3, #18
 8001b96:	220f      	movs	r2, #15
 8001b98:	4013      	ands	r3, r2
 8001b9a:	4a30      	ldr	r2, [pc, #192]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001b9c:	5cd3      	ldrb	r3, [r2, r3]
 8001b9e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	0d9b      	lsrs	r3, r3, #22
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	3301      	adds	r3, #1
 8001baa:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	025b      	lsls	r3, r3, #9
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d00f      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	000a      	movs	r2, r1
 8001bbc:	0152      	lsls	r2, r2, #5
 8001bbe:	1a52      	subs	r2, r2, r1
 8001bc0:	0193      	lsls	r3, r2, #6
 8001bc2:	1a9b      	subs	r3, r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	185b      	adds	r3, r3, r1
 8001bc8:	025b      	lsls	r3, r3, #9
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7fe fa9b 	bl	8000108 <__udivsi3>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e023      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2210      	movs	r2, #16
 8001bde:	4013      	ands	r3, r2
 8001be0:	d00f      	beq.n	8001c02 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	000a      	movs	r2, r1
 8001be6:	0152      	lsls	r2, r2, #5
 8001be8:	1a52      	subs	r2, r2, r1
 8001bea:	0193      	lsls	r3, r2, #6
 8001bec:	1a9b      	subs	r3, r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	185b      	adds	r3, r3, r1
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f7fe fa86 	bl	8000108 <__udivsi3>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	e00e      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	000a      	movs	r2, r1
 8001c06:	0152      	lsls	r2, r2, #5
 8001c08:	1a52      	subs	r2, r2, r1
 8001c0a:	0193      	lsls	r3, r2, #6
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	185b      	adds	r3, r3, r1
 8001c12:	029b      	lsls	r3, r3, #10
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	0018      	movs	r0, r3
 8001c18:	f7fe fa76 	bl	8000108 <__udivsi3>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	613b      	str	r3, [r7, #16]
      break;
 8001c24:	e00d      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	0b5b      	lsrs	r3, r3, #13
 8001c2c:	2207      	movs	r2, #7
 8001c2e:	4013      	ands	r3, r2
 8001c30:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	0212      	lsls	r2, r2, #8
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	0013      	movs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
      break;
 8001c40:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c42:	693b      	ldr	r3, [r7, #16]
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b006      	add	sp, #24
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	003d0900 	.word	0x003d0900
 8001c54:	00f42400 	.word	0x00f42400
 8001c58:	007a1200 	.word	0x007a1200
 8001c5c:	0800312c 	.word	0x0800312c

08001c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c64:	4b02      	ldr	r3, [pc, #8]	; (8001c70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	20000000 	.word	0x20000000

08001c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c78:	f7ff fff2 	bl	8001c60 <HAL_RCC_GetHCLKFreq>
 8001c7c:	0001      	movs	r1, r0
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	2207      	movs	r2, #7
 8001c86:	4013      	ands	r3, r2
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c8a:	5cd3      	ldrb	r3, [r2, r3]
 8001c8c:	40d9      	lsrs	r1, r3
 8001c8e:	000b      	movs	r3, r1
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	08003124 	.word	0x08003124

08001ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ca4:	f7ff ffdc 	bl	8001c60 <HAL_RCC_GetHCLKFreq>
 8001ca8:	0001      	movs	r1, r0
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	0adb      	lsrs	r3, r3, #11
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
 8001cb8:	40d9      	lsrs	r1, r3
 8001cba:	000b      	movs	r3, r1
}
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	08003124 	.word	0x08003124

08001ccc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8001cde:	e0c7      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001ce0:	2317      	movs	r3, #23
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce8:	4b82      	ldr	r3, [pc, #520]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	055b      	lsls	r3, r3, #21
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d10a      	bne.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf4:	4b7f      	ldr	r3, [pc, #508]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cf8:	4b7e      	ldr	r3, [pc, #504]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001cfa:	2180      	movs	r1, #128	; 0x80
 8001cfc:	0549      	lsls	r1, r1, #21
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d02:	2317      	movs	r3, #23
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0a:	4b7b      	ldr	r3, [pc, #492]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4013      	ands	r3, r2
 8001d14:	d11a      	bne.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d16:	4b78      	ldr	r3, [pc, #480]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4b77      	ldr	r3, [pc, #476]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	0049      	lsls	r1, r1, #1
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d24:	f7ff f80c 	bl	8000d40 <HAL_GetTick>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	e008      	b.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2e:	f7ff f807 	bl	8000d40 <HAL_GetTick>
 8001d32:	0002      	movs	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b64      	cmp	r3, #100	; 0x64
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e0d4      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	4b6d      	ldr	r3, [pc, #436]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d4c:	4b69      	ldr	r3, [pc, #420]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	23c0      	movs	r3, #192	; 0xc0
 8001d52:	039b      	lsls	r3, r3, #14
 8001d54:	4013      	ands	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	23c0      	movs	r3, #192	; 0xc0
 8001d5e:	039b      	lsls	r3, r3, #14
 8001d60:	4013      	ands	r3, r2
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d013      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	23c0      	movs	r3, #192	; 0xc0
 8001d6e:	029b      	lsls	r3, r3, #10
 8001d70:	401a      	ands	r2, r3
 8001d72:	23c0      	movs	r3, #192	; 0xc0
 8001d74:	029b      	lsls	r3, r3, #10
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d10a      	bne.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001d7a:	4b5e      	ldr	r3, [pc, #376]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	029b      	lsls	r3, r3, #10
 8001d82:	401a      	ands	r2, r3
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	029b      	lsls	r3, r3, #10
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0ac      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001d90:	4b58      	ldr	r3, [pc, #352]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d94:	23c0      	movs	r3, #192	; 0xc0
 8001d96:	029b      	lsls	r3, r3, #10
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d03b      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	23c0      	movs	r3, #192	; 0xc0
 8001da8:	029b      	lsls	r3, r3, #10
 8001daa:	4013      	ands	r3, r2
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d033      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2220      	movs	r2, #32
 8001db8:	4013      	ands	r3, r2
 8001dba:	d02e      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001dbc:	4b4d      	ldr	r3, [pc, #308]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc0:	4a4e      	ldr	r2, [pc, #312]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dc6:	4b4b      	ldr	r3, [pc, #300]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001dc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dca:	4b4a      	ldr	r3, [pc, #296]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	0309      	lsls	r1, r1, #12
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dd4:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001dd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dd8:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001dda:	4949      	ldr	r1, [pc, #292]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001ddc:	400a      	ands	r2, r1
 8001dde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001de0:	4b44      	ldr	r3, [pc, #272]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4013      	ands	r3, r2
 8001dee:	d014      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7fe ffa6 	bl	8000d40 <HAL_GetTick>
 8001df4:	0003      	movs	r3, r0
 8001df6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001df8:	e009      	b.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfa:	f7fe ffa1 	bl	8000d40 <HAL_GetTick>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	4a3f      	ldr	r2, [pc, #252]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e06d      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e0e:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4013      	ands	r3, r2
 8001e18:	d0ef      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	23c0      	movs	r3, #192	; 0xc0
 8001e20:	029b      	lsls	r3, r3, #10
 8001e22:	401a      	ands	r2, r3
 8001e24:	23c0      	movs	r3, #192	; 0xc0
 8001e26:	029b      	lsls	r3, r3, #10
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d10c      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8001e2c:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a35      	ldr	r2, [pc, #212]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	0019      	movs	r1, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	23c0      	movs	r3, #192	; 0xc0
 8001e3c:	039b      	lsls	r3, r3, #14
 8001e3e:	401a      	ands	r2, r3
 8001e40:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e48:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	23c0      	movs	r3, #192	; 0xc0
 8001e50:	029b      	lsls	r3, r3, #10
 8001e52:	401a      	ands	r2, r3
 8001e54:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e56:	430a      	orrs	r2, r1
 8001e58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e5a:	2317      	movs	r3, #23
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e64:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e6a:	4928      	ldr	r1, [pc, #160]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2202      	movs	r2, #2
 8001e76:	4013      	ands	r3, r2
 8001e78:	d009      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	220c      	movs	r2, #12
 8001e80:	4393      	bics	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2204      	movs	r2, #4
 8001e94:	4013      	ands	r3, r2
 8001e96:	d009      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e98:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9c:	4a1c      	ldr	r2, [pc, #112]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d009      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	4a16      	ldr	r2, [pc, #88]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed8:	4a0f      	ldr	r2, [pc, #60]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695a      	ldr	r2, [r3, #20]
 8001ee2:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b006      	add	sp, #24
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40007000 	.word	0x40007000
 8001efc:	fffcffff 	.word	0xfffcffff
 8001f00:	fff7ffff 	.word	0xfff7ffff
 8001f04:	00001388 	.word	0x00001388
 8001f08:	ffcfffff 	.word	0xffcfffff
 8001f0c:	efffffff 	.word	0xefffffff
 8001f10:	fffff3ff 	.word	0xfffff3ff
 8001f14:	ffffcfff 	.word	0xffffcfff
 8001f18:	fff3ffff 	.word	0xfff3ffff

08001f1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e051      	b.n	8001fd2 <HAL_SPI_Init+0xb6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2251      	movs	r2, #81	; 0x51
 8001f38:	5c9b      	ldrb	r3, [r3, r2]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2250      	movs	r2, #80	; 0x50
 8001f44:	2100      	movs	r1, #0
 8001f46:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f7fe fd96 	bl	8000a7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2251      	movs	r2, #81	; 0x51
 8001f54:	2102      	movs	r1, #2
 8001f56:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2140      	movs	r1, #64	; 0x40
 8001f64:	438a      	bics	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6999      	ldr	r1, [r3, #24]
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	400b      	ands	r3, r1
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	0011      	movs	r1, r2
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	0c1b      	lsrs	r3, r3, #16
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2251      	movs	r2, #81	; 0x51
 8001fcc:	2101      	movs	r1, #1
 8001fce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b002      	add	sp, #8
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b088      	sub	sp, #32
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	1dbb      	adds	r3, r7, #6
 8001fe8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fea:	231f      	movs	r3, #31
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2250      	movs	r2, #80	; 0x50
 8001ff6:	5c9b      	ldrb	r3, [r3, r2]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_SPI_Transmit+0x26>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e136      	b.n	800226e <HAL_SPI_Transmit+0x294>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2250      	movs	r2, #80	; 0x50
 8002004:	2101      	movs	r1, #1
 8002006:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002008:	f7fe fe9a 	bl	8000d40 <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002010:	2316      	movs	r3, #22
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	1dba      	adds	r2, r7, #6
 8002016:	8812      	ldrh	r2, [r2, #0]
 8002018:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2251      	movs	r2, #81	; 0x51
 800201e:	5c9b      	ldrb	r3, [r3, r2]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b01      	cmp	r3, #1
 8002024:	d004      	beq.n	8002030 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002026:	231f      	movs	r3, #31
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	2202      	movs	r2, #2
 800202c:	701a      	strb	r2, [r3, #0]
    goto error;
 800202e:	e113      	b.n	8002258 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_SPI_Transmit+0x64>
 8002036:	1dbb      	adds	r3, r7, #6
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d104      	bne.n	8002048 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800203e:	231f      	movs	r3, #31
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
    goto error;
 8002046:	e107      	b.n	8002258 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2251      	movs	r2, #81	; 0x51
 800204c:	2103      	movs	r1, #3
 800204e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1dba      	adds	r2, r7, #6
 8002060:	8812      	ldrh	r2, [r2, #0]
 8002062:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1dba      	adds	r2, r7, #6
 8002068:	8812      	ldrh	r2, [r2, #0]
 800206a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	429a      	cmp	r2, r3
 8002094:	d108      	bne.n	80020a8 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2180      	movs	r1, #128	; 0x80
 80020a2:	01c9      	lsls	r1, r1, #7
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2240      	movs	r2, #64	; 0x40
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b40      	cmp	r3, #64	; 0x40
 80020b4:	d007      	beq.n	80020c6 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2140      	movs	r1, #64	; 0x40
 80020c2:	430a      	orrs	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d14e      	bne.n	8002170 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d004      	beq.n	80020e4 <HAL_SPI_Transmit+0x10a>
 80020da:	2316      	movs	r3, #22
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d13f      	bne.n	8002164 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	881a      	ldrh	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	1c9a      	adds	r2, r3, #2
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3b01      	subs	r3, #1
 8002102:	b29a      	uxth	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002108:	e02c      	b.n	8002164 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2202      	movs	r2, #2
 8002112:	4013      	ands	r3, r2
 8002114:	2b02      	cmp	r3, #2
 8002116:	d112      	bne.n	800213e <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	881a      	ldrh	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	1c9a      	adds	r2, r3, #2
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	86da      	strh	r2, [r3, #54]	; 0x36
 800213c:	e012      	b.n	8002164 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800213e:	f7fe fdff 	bl	8000d40 <HAL_GetTick>
 8002142:	0002      	movs	r2, r0
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d802      	bhi.n	8002154 <HAL_SPI_Transmit+0x17a>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	d102      	bne.n	800215a <HAL_SPI_Transmit+0x180>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d104      	bne.n	8002164 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 800215a:	231f      	movs	r3, #31
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	2203      	movs	r2, #3
 8002160:	701a      	strb	r2, [r3, #0]
          goto error;
 8002162:	e079      	b.n	8002258 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1cd      	bne.n	800210a <HAL_SPI_Transmit+0x130>
 800216e:	e04f      	b.n	8002210 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d004      	beq.n	8002182 <HAL_SPI_Transmit+0x1a8>
 8002178:	2316      	movs	r3, #22
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d141      	bne.n	8002206 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	330c      	adds	r3, #12
 800218c:	7812      	ldrb	r2, [r2, #0]
 800218e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021a8:	e02d      	b.n	8002206 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2202      	movs	r2, #2
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d113      	bne.n	80021e0 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	330c      	adds	r3, #12
 80021c2:	7812      	ldrb	r2, [r2, #0]
 80021c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80021de:	e012      	b.n	8002206 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021e0:	f7fe fdae 	bl	8000d40 <HAL_GetTick>
 80021e4:	0002      	movs	r2, r0
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d802      	bhi.n	80021f6 <HAL_SPI_Transmit+0x21c>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	3301      	adds	r3, #1
 80021f4:	d102      	bne.n	80021fc <HAL_SPI_Transmit+0x222>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d104      	bne.n	8002206 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80021fc:	231f      	movs	r3, #31
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	2203      	movs	r2, #3
 8002202:	701a      	strb	r2, [r3, #0]
          goto error;
 8002204:	e028      	b.n	8002258 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800220a:	b29b      	uxth	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1cc      	bne.n	80021aa <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	6839      	ldr	r1, [r7, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	0018      	movs	r0, r3
 8002218:	f000 fa5a 	bl	80026d0 <SPI_EndRxTxTransaction>
 800221c:	1e03      	subs	r3, r0, #0
 800221e:	d002      	beq.n	8002226 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2220      	movs	r2, #32
 8002224:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10a      	bne.n	8002244 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002248:	2b00      	cmp	r3, #0
 800224a:	d004      	beq.n	8002256 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800224c:	231f      	movs	r3, #31
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	e000      	b.n	8002258 <HAL_SPI_Transmit+0x27e>
  }

error:
 8002256:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2251      	movs	r2, #81	; 0x51
 800225c:	2101      	movs	r1, #1
 800225e:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2250      	movs	r2, #80	; 0x50
 8002264:	2100      	movs	r1, #0
 8002266:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002268:	231f      	movs	r3, #31
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	781b      	ldrb	r3, [r3, #0]
}
 800226e:	0018      	movs	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	b008      	add	sp, #32
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b08c      	sub	sp, #48	; 0x30
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	001a      	movs	r2, r3
 8002284:	1cbb      	adds	r3, r7, #2
 8002286:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002288:	2301      	movs	r3, #1
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800228c:	232b      	movs	r3, #43	; 0x2b
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2250      	movs	r2, #80	; 0x50
 8002298:	5c9b      	ldrb	r3, [r3, r2]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_SPI_TransmitReceive+0x2c>
 800229e:	2302      	movs	r3, #2
 80022a0:	e1a1      	b.n	80025e6 <HAL_SPI_TransmitReceive+0x370>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2250      	movs	r2, #80	; 0x50
 80022a6:	2101      	movs	r1, #1
 80022a8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022aa:	f7fe fd49 	bl	8000d40 <HAL_GetTick>
 80022ae:	0003      	movs	r3, r0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022b2:	2023      	movs	r0, #35	; 0x23
 80022b4:	183b      	adds	r3, r7, r0
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	2151      	movs	r1, #81	; 0x51
 80022ba:	5c52      	ldrb	r2, [r2, r1]
 80022bc:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022c4:	231a      	movs	r3, #26
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	1cba      	adds	r2, r7, #2
 80022ca:	8812      	ldrh	r2, [r2, #0]
 80022cc:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022ce:	183b      	adds	r3, r7, r0
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d012      	beq.n	80022fc <HAL_SPI_TransmitReceive+0x86>
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	2382      	movs	r3, #130	; 0x82
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	429a      	cmp	r2, r3
 80022de:	d108      	bne.n	80022f2 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d104      	bne.n	80022f2 <HAL_SPI_TransmitReceive+0x7c>
 80022e8:	2323      	movs	r3, #35	; 0x23
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d004      	beq.n	80022fc <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 80022f2:	232b      	movs	r3, #43	; 0x2b
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	2202      	movs	r2, #2
 80022f8:	701a      	strb	r2, [r3, #0]
    goto error;
 80022fa:	e169      	b.n	80025d0 <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d006      	beq.n	8002310 <HAL_SPI_TransmitReceive+0x9a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_SPI_TransmitReceive+0x9a>
 8002308:	1cbb      	adds	r3, r7, #2
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d104      	bne.n	800231a <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8002310:	232b      	movs	r3, #43	; 0x2b
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	2201      	movs	r2, #1
 8002316:	701a      	strb	r2, [r3, #0]
    goto error;
 8002318:	e15a      	b.n	80025d0 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2251      	movs	r2, #81	; 0x51
 800231e:	5c9b      	ldrb	r3, [r3, r2]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b04      	cmp	r3, #4
 8002324:	d003      	beq.n	800232e <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2251      	movs	r2, #81	; 0x51
 800232a:	2105      	movs	r1, #5
 800232c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1cba      	adds	r2, r7, #2
 800233e:	8812      	ldrh	r2, [r2, #0]
 8002340:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	1cba      	adds	r2, r7, #2
 8002346:	8812      	ldrh	r2, [r2, #0]
 8002348:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1cba      	adds	r2, r7, #2
 8002354:	8812      	ldrh	r2, [r2, #0]
 8002356:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1cba      	adds	r2, r7, #2
 800235c:	8812      	ldrh	r2, [r2, #0]
 800235e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2240      	movs	r2, #64	; 0x40
 8002374:	4013      	ands	r3, r2
 8002376:	2b40      	cmp	r3, #64	; 0x40
 8002378:	d007      	beq.n	800238a <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2140      	movs	r1, #64	; 0x40
 8002386:	430a      	orrs	r2, r1
 8002388:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	429a      	cmp	r2, r3
 8002394:	d000      	beq.n	8002398 <HAL_SPI_TransmitReceive+0x122>
 8002396:	e07a      	b.n	800248e <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d004      	beq.n	80023aa <HAL_SPI_TransmitReceive+0x134>
 80023a0:	231a      	movs	r3, #26
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d166      	bne.n	8002478 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	881a      	ldrh	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	1c9a      	adds	r2, r3, #2
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023ce:	e053      	b.n	8002478 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2202      	movs	r2, #2
 80023d8:	4013      	ands	r3, r2
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d11b      	bne.n	8002416 <HAL_SPI_TransmitReceive+0x1a0>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d016      	beq.n	8002416 <HAL_SPI_TransmitReceive+0x1a0>
 80023e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d113      	bne.n	8002416 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	881a      	ldrh	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	1c9a      	adds	r2, r3, #2
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2201      	movs	r2, #1
 800241e:	4013      	ands	r3, r2
 8002420:	2b01      	cmp	r3, #1
 8002422:	d119      	bne.n	8002458 <HAL_SPI_TransmitReceive+0x1e2>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d014      	beq.n	8002458 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002438:	b292      	uxth	r2, r2
 800243a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002440:	1c9a      	adds	r2, r3, #2
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002454:	2301      	movs	r3, #1
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002458:	f7fe fc72 	bl	8000d40 <HAL_GetTick>
 800245c:	0002      	movs	r2, r0
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002464:	429a      	cmp	r2, r3
 8002466:	d807      	bhi.n	8002478 <HAL_SPI_TransmitReceive+0x202>
 8002468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246a:	3301      	adds	r3, #1
 800246c:	d004      	beq.n	8002478 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 800246e:	232b      	movs	r3, #43	; 0x2b
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	2203      	movs	r2, #3
 8002474:	701a      	strb	r2, [r3, #0]
        goto error;
 8002476:	e0ab      	b.n	80025d0 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800247c:	b29b      	uxth	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1a6      	bne.n	80023d0 <HAL_SPI_TransmitReceive+0x15a>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1a1      	bne.n	80023d0 <HAL_SPI_TransmitReceive+0x15a>
 800248c:	e07f      	b.n	800258e <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_SPI_TransmitReceive+0x22c>
 8002496:	231a      	movs	r3, #26
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d000      	beq.n	80024a2 <HAL_SPI_TransmitReceive+0x22c>
 80024a0:	e06b      	b.n	800257a <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	330c      	adds	r3, #12
 80024ac:	7812      	ldrb	r2, [r2, #0]
 80024ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024be:	b29b      	uxth	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024c8:	e057      	b.n	800257a <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2202      	movs	r2, #2
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d11c      	bne.n	8002512 <HAL_SPI_TransmitReceive+0x29c>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d017      	beq.n	8002512 <HAL_SPI_TransmitReceive+0x29c>
 80024e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d114      	bne.n	8002512 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	330c      	adds	r3, #12
 80024f2:	7812      	ldrb	r2, [r2, #0]
 80024f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2201      	movs	r2, #1
 800251a:	4013      	ands	r3, r2
 800251c:	2b01      	cmp	r3, #1
 800251e:	d119      	bne.n	8002554 <HAL_SPI_TransmitReceive+0x2de>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d014      	beq.n	8002554 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002550:	2301      	movs	r3, #1
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002554:	f7fe fbf4 	bl	8000d40 <HAL_GetTick>
 8002558:	0002      	movs	r2, r0
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002560:	429a      	cmp	r2, r3
 8002562:	d802      	bhi.n	800256a <HAL_SPI_TransmitReceive+0x2f4>
 8002564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002566:	3301      	adds	r3, #1
 8002568:	d102      	bne.n	8002570 <HAL_SPI_TransmitReceive+0x2fa>
 800256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256c:	2b00      	cmp	r3, #0
 800256e:	d104      	bne.n	800257a <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 8002570:	232b      	movs	r3, #43	; 0x2b
 8002572:	18fb      	adds	r3, r7, r3
 8002574:	2203      	movs	r2, #3
 8002576:	701a      	strb	r2, [r3, #0]
        goto error;
 8002578:	e02a      	b.n	80025d0 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1a2      	bne.n	80024ca <HAL_SPI_TransmitReceive+0x254>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d19d      	bne.n	80024ca <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800258e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002590:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	0018      	movs	r0, r3
 8002596:	f000 f89b 	bl	80026d0 <SPI_EndRxTxTransaction>
 800259a:	1e03      	subs	r3, r0, #0
 800259c:	d007      	beq.n	80025ae <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 800259e:	232b      	movs	r3, #43	; 0x2b
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80025ac:	e010      	b.n	80025d0 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10b      	bne.n	80025ce <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	e000      	b.n	80025d0 <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 80025ce:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2251      	movs	r2, #81	; 0x51
 80025d4:	2101      	movs	r1, #1
 80025d6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2250      	movs	r2, #80	; 0x50
 80025dc:	2100      	movs	r1, #0
 80025de:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80025e0:	232b      	movs	r3, #43	; 0x2b
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	781b      	ldrb	r3, [r3, #0]
}
 80025e6:	0018      	movs	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b00c      	add	sp, #48	; 0x30
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	1dfb      	adds	r3, r7, #7
 80025fe:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002600:	e050      	b.n	80026a4 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	3301      	adds	r3, #1
 8002606:	d04d      	beq.n	80026a4 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002608:	f7fe fb9a 	bl	8000d40 <HAL_GetTick>
 800260c:	0002      	movs	r2, r0
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d902      	bls.n	800261e <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d142      	bne.n	80026a4 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	21e0      	movs	r1, #224	; 0xe0
 800262a:	438a      	bics	r2, r1
 800262c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	2382      	movs	r3, #130	; 0x82
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	429a      	cmp	r2, r3
 8002638:	d113      	bne.n	8002662 <SPI_WaitFlagStateUntilTimeout+0x72>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	429a      	cmp	r2, r3
 8002644:	d005      	beq.n	8002652 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	429a      	cmp	r2, r3
 8002650:	d107      	bne.n	8002662 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2140      	movs	r1, #64	; 0x40
 800265e:	438a      	bics	r2, r1
 8002660:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	019b      	lsls	r3, r3, #6
 800266a:	429a      	cmp	r2, r3
 800266c:	d110      	bne.n	8002690 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4914      	ldr	r1, [pc, #80]	; (80026cc <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800267a:	400a      	ands	r2, r1
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2180      	movs	r1, #128	; 0x80
 800268a:	0189      	lsls	r1, r1, #6
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2251      	movs	r2, #81	; 0x51
 8002694:	2101      	movs	r1, #1
 8002696:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2250      	movs	r2, #80	; 0x50
 800269c:	2100      	movs	r1, #0
 800269e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e00f      	b.n	80026c4 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	4013      	ands	r3, r2
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	425a      	negs	r2, r3
 80026b4:	4153      	adcs	r3, r2
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	001a      	movs	r2, r3
 80026ba:	1dfb      	adds	r3, r7, #7
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d19f      	bne.n	8002602 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	0018      	movs	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b004      	add	sp, #16
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	ffffdfff 	.word	0xffffdfff

080026d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	2382      	movs	r3, #130	; 0x82
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d112      	bne.n	800270e <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	0013      	movs	r3, r2
 80026f2:	2200      	movs	r2, #0
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	f7ff ff7b 	bl	80025f0 <SPI_WaitFlagStateUntilTimeout>
 80026fa:	1e03      	subs	r3, r0, #0
 80026fc:	d020      	beq.n	8002740 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	2220      	movs	r2, #32
 8002704:	431a      	orrs	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e019      	b.n	8002742 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2251      	movs	r2, #81	; 0x51
 8002712:	5c9b      	ldrb	r3, [r3, r2]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b05      	cmp	r3, #5
 8002718:	d112      	bne.n	8002740 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	0013      	movs	r3, r2
 8002724:	2200      	movs	r2, #0
 8002726:	2101      	movs	r1, #1
 8002728:	f7ff ff62 	bl	80025f0 <SPI_WaitFlagStateUntilTimeout>
 800272c:	1e03      	subs	r3, r0, #0
 800272e:	d007      	beq.n	8002740 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	2220      	movs	r2, #32
 8002736:	431a      	orrs	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e000      	b.n	8002742 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	0018      	movs	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	b004      	add	sp, #16
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e044      	b.n	80027e8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002762:	2b00      	cmp	r3, #0
 8002764:	d107      	bne.n	8002776 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2270      	movs	r2, #112	; 0x70
 800276a:	2100      	movs	r1, #0
 800276c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	0018      	movs	r0, r3
 8002772:	f7fe f9c7 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2224      	movs	r2, #36	; 0x24
 800277a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2101      	movs	r1, #1
 8002788:	438a      	bics	r2, r1
 800278a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	0018      	movs	r0, r3
 8002790:	f000 f830 	bl	80027f4 <UART_SetConfig>
 8002794:	0003      	movs	r3, r0
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e024      	b.n	80027e8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 fafd 	bl	8002da8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	490d      	ldr	r1, [pc, #52]	; (80027f0 <HAL_UART_Init+0xa4>)
 80027ba:	400a      	ands	r2, r1
 80027bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	212a      	movs	r1, #42	; 0x2a
 80027ca:	438a      	bics	r2, r1
 80027cc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2101      	movs	r1, #1
 80027da:	430a      	orrs	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 fb95 	bl	8002f10 <UART_CheckIdleState>
 80027e6:	0003      	movs	r3, r0
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	ffffb7ff 	.word	0xffffb7ff

080027f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027f4:	b5b0      	push	{r4, r5, r7, lr}
 80027f6:	b08e      	sub	sp, #56	; 0x38
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80027fc:	231b      	movs	r3, #27
 80027fe:	2218      	movs	r2, #24
 8002800:	4694      	mov	ip, r2
 8002802:	44bc      	add	ip, r7
 8002804:	4463      	add	r3, ip
 8002806:	2210      	movs	r2, #16
 8002808:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800280a:	2300      	movs	r3, #0
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800280e:	2313      	movs	r3, #19
 8002810:	2218      	movs	r2, #24
 8002812:	4694      	mov	ip, r2
 8002814:	44bc      	add	ip, r7
 8002816:	4463      	add	r3, ip
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800281c:	2300      	movs	r3, #0
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	431a      	orrs	r2, r3
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	431a      	orrs	r2, r3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	4313      	orrs	r3, r2
 8002836:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4ace      	ldr	r2, [pc, #824]	; (8002b78 <UART_SetConfig+0x384>)
 8002840:	4013      	ands	r3, r2
 8002842:	0019      	movs	r1, r3
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800284a:	430a      	orrs	r2, r1
 800284c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4ac9      	ldr	r2, [pc, #804]	; (8002b7c <UART_SetConfig+0x388>)
 8002856:	4013      	ands	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4ac3      	ldr	r2, [pc, #780]	; (8002b80 <UART_SetConfig+0x38c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d004      	beq.n	8002880 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800287c:	4313      	orrs	r3, r2
 800287e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	4abf      	ldr	r2, [pc, #764]	; (8002b84 <UART_SetConfig+0x390>)
 8002888:	4013      	ands	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002892:	430a      	orrs	r2, r1
 8002894:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4abb      	ldr	r2, [pc, #748]	; (8002b88 <UART_SetConfig+0x394>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d137      	bne.n	8002910 <UART_SetConfig+0x11c>
 80028a0:	4bba      	ldr	r3, [pc, #744]	; (8002b8c <UART_SetConfig+0x398>)
 80028a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a4:	220c      	movs	r2, #12
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d018      	beq.n	80028de <UART_SetConfig+0xea>
 80028ac:	d802      	bhi.n	80028b4 <UART_SetConfig+0xc0>
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <UART_SetConfig+0xca>
 80028b2:	e024      	b.n	80028fe <UART_SetConfig+0x10a>
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d00a      	beq.n	80028ce <UART_SetConfig+0xda>
 80028b8:	2b0c      	cmp	r3, #12
 80028ba:	d018      	beq.n	80028ee <UART_SetConfig+0xfa>
 80028bc:	e01f      	b.n	80028fe <UART_SetConfig+0x10a>
 80028be:	231b      	movs	r3, #27
 80028c0:	2218      	movs	r2, #24
 80028c2:	4694      	mov	ip, r2
 80028c4:	44bc      	add	ip, r7
 80028c6:	4463      	add	r3, ip
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
 80028cc:	e06e      	b.n	80029ac <UART_SetConfig+0x1b8>
 80028ce:	231b      	movs	r3, #27
 80028d0:	2218      	movs	r2, #24
 80028d2:	4694      	mov	ip, r2
 80028d4:	44bc      	add	ip, r7
 80028d6:	4463      	add	r3, ip
 80028d8:	2202      	movs	r2, #2
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e066      	b.n	80029ac <UART_SetConfig+0x1b8>
 80028de:	231b      	movs	r3, #27
 80028e0:	2218      	movs	r2, #24
 80028e2:	4694      	mov	ip, r2
 80028e4:	44bc      	add	ip, r7
 80028e6:	4463      	add	r3, ip
 80028e8:	2204      	movs	r2, #4
 80028ea:	701a      	strb	r2, [r3, #0]
 80028ec:	e05e      	b.n	80029ac <UART_SetConfig+0x1b8>
 80028ee:	231b      	movs	r3, #27
 80028f0:	2218      	movs	r2, #24
 80028f2:	4694      	mov	ip, r2
 80028f4:	44bc      	add	ip, r7
 80028f6:	4463      	add	r3, ip
 80028f8:	2208      	movs	r2, #8
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	e056      	b.n	80029ac <UART_SetConfig+0x1b8>
 80028fe:	231b      	movs	r3, #27
 8002900:	2218      	movs	r2, #24
 8002902:	4694      	mov	ip, r2
 8002904:	44bc      	add	ip, r7
 8002906:	4463      	add	r3, ip
 8002908:	2210      	movs	r2, #16
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	e04d      	b.n	80029ac <UART_SetConfig+0x1b8>
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a9a      	ldr	r2, [pc, #616]	; (8002b80 <UART_SetConfig+0x38c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d141      	bne.n	800299e <UART_SetConfig+0x1aa>
 800291a:	4b9c      	ldr	r3, [pc, #624]	; (8002b8c <UART_SetConfig+0x398>)
 800291c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800291e:	23c0      	movs	r3, #192	; 0xc0
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	4013      	ands	r3, r2
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	00d2      	lsls	r2, r2, #3
 8002928:	4293      	cmp	r3, r2
 800292a:	d01f      	beq.n	800296c <UART_SetConfig+0x178>
 800292c:	2280      	movs	r2, #128	; 0x80
 800292e:	00d2      	lsls	r2, r2, #3
 8002930:	4293      	cmp	r3, r2
 8002932:	d802      	bhi.n	800293a <UART_SetConfig+0x146>
 8002934:	2b00      	cmp	r3, #0
 8002936:	d009      	beq.n	800294c <UART_SetConfig+0x158>
 8002938:	e028      	b.n	800298c <UART_SetConfig+0x198>
 800293a:	2280      	movs	r2, #128	; 0x80
 800293c:	0112      	lsls	r2, r2, #4
 800293e:	4293      	cmp	r3, r2
 8002940:	d00c      	beq.n	800295c <UART_SetConfig+0x168>
 8002942:	22c0      	movs	r2, #192	; 0xc0
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	4293      	cmp	r3, r2
 8002948:	d018      	beq.n	800297c <UART_SetConfig+0x188>
 800294a:	e01f      	b.n	800298c <UART_SetConfig+0x198>
 800294c:	231b      	movs	r3, #27
 800294e:	2218      	movs	r2, #24
 8002950:	4694      	mov	ip, r2
 8002952:	44bc      	add	ip, r7
 8002954:	4463      	add	r3, ip
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	e027      	b.n	80029ac <UART_SetConfig+0x1b8>
 800295c:	231b      	movs	r3, #27
 800295e:	2218      	movs	r2, #24
 8002960:	4694      	mov	ip, r2
 8002962:	44bc      	add	ip, r7
 8002964:	4463      	add	r3, ip
 8002966:	2202      	movs	r2, #2
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e01f      	b.n	80029ac <UART_SetConfig+0x1b8>
 800296c:	231b      	movs	r3, #27
 800296e:	2218      	movs	r2, #24
 8002970:	4694      	mov	ip, r2
 8002972:	44bc      	add	ip, r7
 8002974:	4463      	add	r3, ip
 8002976:	2204      	movs	r2, #4
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	e017      	b.n	80029ac <UART_SetConfig+0x1b8>
 800297c:	231b      	movs	r3, #27
 800297e:	2218      	movs	r2, #24
 8002980:	4694      	mov	ip, r2
 8002982:	44bc      	add	ip, r7
 8002984:	4463      	add	r3, ip
 8002986:	2208      	movs	r2, #8
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	e00f      	b.n	80029ac <UART_SetConfig+0x1b8>
 800298c:	231b      	movs	r3, #27
 800298e:	2218      	movs	r2, #24
 8002990:	4694      	mov	ip, r2
 8002992:	44bc      	add	ip, r7
 8002994:	4463      	add	r3, ip
 8002996:	2210      	movs	r2, #16
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	e006      	b.n	80029ac <UART_SetConfig+0x1b8>
 800299e:	231b      	movs	r3, #27
 80029a0:	2218      	movs	r2, #24
 80029a2:	4694      	mov	ip, r2
 80029a4:	44bc      	add	ip, r7
 80029a6:	4463      	add	r3, ip
 80029a8:	2210      	movs	r2, #16
 80029aa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a73      	ldr	r2, [pc, #460]	; (8002b80 <UART_SetConfig+0x38c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d000      	beq.n	80029b8 <UART_SetConfig+0x1c4>
 80029b6:	e083      	b.n	8002ac0 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80029b8:	231b      	movs	r3, #27
 80029ba:	2218      	movs	r2, #24
 80029bc:	4694      	mov	ip, r2
 80029be:	44bc      	add	ip, r7
 80029c0:	4463      	add	r3, ip
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d00d      	beq.n	80029e4 <UART_SetConfig+0x1f0>
 80029c8:	dc02      	bgt.n	80029d0 <UART_SetConfig+0x1dc>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <UART_SetConfig+0x1e6>
 80029ce:	e01d      	b.n	8002a0c <UART_SetConfig+0x218>
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d012      	beq.n	80029fa <UART_SetConfig+0x206>
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d015      	beq.n	8002a04 <UART_SetConfig+0x210>
 80029d8:	e018      	b.n	8002a0c <UART_SetConfig+0x218>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80029da:	f7ff f94b 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 80029de:	0003      	movs	r3, r0
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80029e2:	e01b      	b.n	8002a1c <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029e4:	4b69      	ldr	r3, [pc, #420]	; (8002b8c <UART_SetConfig+0x398>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2210      	movs	r2, #16
 80029ea:	4013      	ands	r3, r2
 80029ec:	d002      	beq.n	80029f4 <UART_SetConfig+0x200>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80029ee:	4b68      	ldr	r3, [pc, #416]	; (8002b90 <UART_SetConfig+0x39c>)
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 80029f2:	e013      	b.n	8002a1c <UART_SetConfig+0x228>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80029f4:	4b67      	ldr	r3, [pc, #412]	; (8002b94 <UART_SetConfig+0x3a0>)
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80029f8:	e010      	b.n	8002a1c <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80029fa:	f7ff f8ad 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 80029fe:	0003      	movs	r3, r0
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a02:	e00b      	b.n	8002a1c <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a0a:	e007      	b.n	8002a1c <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002a0c:	2313      	movs	r3, #19
 8002a0e:	2218      	movs	r2, #24
 8002a10:	4694      	mov	ip, r2
 8002a12:	44bc      	add	ip, r7
 8002a14:	4463      	add	r3, ip
 8002a16:	2201      	movs	r2, #1
 8002a18:	701a      	strb	r2, [r3, #0]
        break;
 8002a1a:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d100      	bne.n	8002a24 <UART_SetConfig+0x230>
 8002a22:	e1a7      	b.n	8002d74 <UART_SetConfig+0x580>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	0013      	movs	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	189b      	adds	r3, r3, r2
 8002a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d305      	bcc.n	8002a40 <UART_SetConfig+0x24c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d907      	bls.n	8002a50 <UART_SetConfig+0x25c>
      {
        ret = HAL_ERROR;
 8002a40:	2313      	movs	r3, #19
 8002a42:	2218      	movs	r2, #24
 8002a44:	4694      	mov	ip, r2
 8002a46:	44bc      	add	ip, r7
 8002a48:	4463      	add	r3, ip
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	e191      	b.n	8002d74 <UART_SetConfig+0x580>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	6939      	ldr	r1, [r7, #16]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	000b      	movs	r3, r1
 8002a5e:	0e1b      	lsrs	r3, r3, #24
 8002a60:	0010      	movs	r0, r2
 8002a62:	0205      	lsls	r5, r0, #8
 8002a64:	431d      	orrs	r5, r3
 8002a66:	000b      	movs	r3, r1
 8002a68:	021c      	lsls	r4, r3, #8
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68b8      	ldr	r0, [r7, #8]
 8002a78:	68f9      	ldr	r1, [r7, #12]
 8002a7a:	1900      	adds	r0, r0, r4
 8002a7c:	4169      	adcs	r1, r5
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	2300      	movs	r3, #0
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f7fd fbc8 	bl	8000220 <__aeabi_uldivmod>
 8002a90:	0003      	movs	r3, r0
 8002a92:	000c      	movs	r4, r1
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	4a3f      	ldr	r2, [pc, #252]	; (8002b98 <UART_SetConfig+0x3a4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d908      	bls.n	8002ab0 <UART_SetConfig+0x2bc>
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	4a3e      	ldr	r2, [pc, #248]	; (8002b9c <UART_SetConfig+0x3a8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d804      	bhi.n	8002ab0 <UART_SetConfig+0x2bc>
        {
          huart->Instance->BRR = usartdiv;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	e161      	b.n	8002d74 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 8002ab0:	2313      	movs	r3, #19
 8002ab2:	2218      	movs	r2, #24
 8002ab4:	4694      	mov	ip, r2
 8002ab6:	44bc      	add	ip, r7
 8002ab8:	4463      	add	r3, ip
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e159      	b.n	8002d74 <UART_SetConfig+0x580>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	69da      	ldr	r2, [r3, #28]
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d000      	beq.n	8002ace <UART_SetConfig+0x2da>
 8002acc:	e0c4      	b.n	8002c58 <UART_SetConfig+0x464>
  {
    switch (clocksource)
 8002ace:	231b      	movs	r3, #27
 8002ad0:	2218      	movs	r2, #24
 8002ad2:	4694      	mov	ip, r2
 8002ad4:	44bc      	add	ip, r7
 8002ad6:	4463      	add	r3, ip
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d900      	bls.n	8002ae0 <UART_SetConfig+0x2ec>
 8002ade:	e087      	b.n	8002bf0 <UART_SetConfig+0x3fc>
 8002ae0:	009a      	lsls	r2, r3, #2
 8002ae2:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <UART_SetConfig+0x3ac>)
 8002ae4:	18d3      	adds	r3, r2, r3
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002aea:	f7ff f8c3 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 8002aee:	0003      	movs	r3, r0
 8002af0:	005a      	lsls	r2, r3, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	18d2      	adds	r2, r2, r3
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	0019      	movs	r1, r3
 8002b00:	0010      	movs	r0, r2
 8002b02:	f7fd fb01 	bl	8000108 <__udivsi3>
 8002b06:	0003      	movs	r3, r0
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b0c:	e078      	b.n	8002c00 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002b0e:	f7ff f8c7 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 8002b12:	0003      	movs	r3, r0
 8002b14:	005a      	lsls	r2, r3, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	085b      	lsrs	r3, r3, #1
 8002b1c:	18d2      	adds	r2, r2, r3
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	0019      	movs	r1, r3
 8002b24:	0010      	movs	r0, r2
 8002b26:	f7fd faef 	bl	8000108 <__udivsi3>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b30:	e066      	b.n	8002c00 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b32:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <UART_SetConfig+0x398>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2210      	movs	r2, #16
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d00e      	beq.n	8002b5a <UART_SetConfig+0x366>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	085b      	lsrs	r3, r3, #1
 8002b42:	4a18      	ldr	r2, [pc, #96]	; (8002ba4 <UART_SetConfig+0x3b0>)
 8002b44:	189a      	adds	r2, r3, r2
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	0010      	movs	r0, r2
 8002b4e:	f7fd fadb 	bl	8000108 <__udivsi3>
 8002b52:	0003      	movs	r3, r0
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002b58:	e052      	b.n	8002c00 <UART_SetConfig+0x40c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	085b      	lsrs	r3, r3, #1
 8002b60:	4a11      	ldr	r2, [pc, #68]	; (8002ba8 <UART_SetConfig+0x3b4>)
 8002b62:	189a      	adds	r2, r3, r2
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	0019      	movs	r1, r3
 8002b6a:	0010      	movs	r0, r2
 8002b6c:	f7fd facc 	bl	8000108 <__udivsi3>
 8002b70:	0003      	movs	r3, r0
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b76:	e043      	b.n	8002c00 <UART_SetConfig+0x40c>
 8002b78:	efff69f3 	.word	0xefff69f3
 8002b7c:	ffffcfff 	.word	0xffffcfff
 8002b80:	40004800 	.word	0x40004800
 8002b84:	fffff4ff 	.word	0xfffff4ff
 8002b88:	40004400 	.word	0x40004400
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	003d0900 	.word	0x003d0900
 8002b94:	00f42400 	.word	0x00f42400
 8002b98:	000002ff 	.word	0x000002ff
 8002b9c:	000fffff 	.word	0x000fffff
 8002ba0:	08003138 	.word	0x08003138
 8002ba4:	007a1200 	.word	0x007a1200
 8002ba8:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002bac:	f7fe ffd4 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	005a      	lsls	r2, r3, #1
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	085b      	lsrs	r3, r3, #1
 8002bba:	18d2      	adds	r2, r2, r3
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	0010      	movs	r0, r2
 8002bc4:	f7fd faa0 	bl	8000108 <__udivsi3>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bce:	e017      	b.n	8002c00 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	085b      	lsrs	r3, r3, #1
 8002bd6:	2280      	movs	r2, #128	; 0x80
 8002bd8:	0252      	lsls	r2, r2, #9
 8002bda:	189a      	adds	r2, r3, r2
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	0019      	movs	r1, r3
 8002be2:	0010      	movs	r0, r2
 8002be4:	f7fd fa90 	bl	8000108 <__udivsi3>
 8002be8:	0003      	movs	r3, r0
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bee:	e007      	b.n	8002c00 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002bf0:	2313      	movs	r3, #19
 8002bf2:	2218      	movs	r2, #24
 8002bf4:	4694      	mov	ip, r2
 8002bf6:	44bc      	add	ip, r7
 8002bf8:	4463      	add	r3, ip
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
        break;
 8002bfe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	d920      	bls.n	8002c48 <UART_SetConfig+0x454>
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	4a62      	ldr	r2, [pc, #392]	; (8002d94 <UART_SetConfig+0x5a0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d81c      	bhi.n	8002c48 <UART_SetConfig+0x454>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	200a      	movs	r0, #10
 8002c14:	2418      	movs	r4, #24
 8002c16:	193b      	adds	r3, r7, r4
 8002c18:	181b      	adds	r3, r3, r0
 8002c1a:	210f      	movs	r1, #15
 8002c1c:	438a      	bics	r2, r1
 8002c1e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c22:	085b      	lsrs	r3, r3, #1
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2207      	movs	r2, #7
 8002c28:	4013      	ands	r3, r2
 8002c2a:	b299      	uxth	r1, r3
 8002c2c:	193b      	adds	r3, r7, r4
 8002c2e:	181b      	adds	r3, r3, r0
 8002c30:	193a      	adds	r2, r7, r4
 8002c32:	1812      	adds	r2, r2, r0
 8002c34:	8812      	ldrh	r2, [r2, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	193a      	adds	r2, r7, r4
 8002c40:	1812      	adds	r2, r2, r0
 8002c42:	8812      	ldrh	r2, [r2, #0]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	e095      	b.n	8002d74 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 8002c48:	2313      	movs	r3, #19
 8002c4a:	2218      	movs	r2, #24
 8002c4c:	4694      	mov	ip, r2
 8002c4e:	44bc      	add	ip, r7
 8002c50:	4463      	add	r3, ip
 8002c52:	2201      	movs	r2, #1
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	e08d      	b.n	8002d74 <UART_SetConfig+0x580>
    }
  }
  else
  {
    switch (clocksource)
 8002c58:	231b      	movs	r3, #27
 8002c5a:	2218      	movs	r2, #24
 8002c5c:	4694      	mov	ip, r2
 8002c5e:	44bc      	add	ip, r7
 8002c60:	4463      	add	r3, ip
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d86a      	bhi.n	8002d3e <UART_SetConfig+0x54a>
 8002c68:	009a      	lsls	r2, r3, #2
 8002c6a:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <UART_SetConfig+0x5a4>)
 8002c6c:	18d3      	adds	r3, r2, r3
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c72:	f7fe ffff 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 8002c76:	0002      	movs	r2, r0
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	085b      	lsrs	r3, r3, #1
 8002c7e:	18d2      	adds	r2, r2, r3
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	0019      	movs	r1, r3
 8002c86:	0010      	movs	r0, r2
 8002c88:	f7fd fa3e 	bl	8000108 <__udivsi3>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c92:	e05c      	b.n	8002d4e <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c94:	f7ff f804 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 8002c98:	0002      	movs	r2, r0
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	18d2      	adds	r2, r2, r3
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	0010      	movs	r0, r2
 8002caa:	f7fd fa2d 	bl	8000108 <__udivsi3>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cb4:	e04b      	b.n	8002d4e <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cb6:	4b39      	ldr	r3, [pc, #228]	; (8002d9c <UART_SetConfig+0x5a8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2210      	movs	r2, #16
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d00e      	beq.n	8002cde <UART_SetConfig+0x4ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	4a36      	ldr	r2, [pc, #216]	; (8002da0 <UART_SetConfig+0x5ac>)
 8002cc8:	189a      	adds	r2, r3, r2
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	0019      	movs	r1, r3
 8002cd0:	0010      	movs	r0, r2
 8002cd2:	f7fd fa19 	bl	8000108 <__udivsi3>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002cdc:	e037      	b.n	8002d4e <UART_SetConfig+0x55a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	085b      	lsrs	r3, r3, #1
 8002ce4:	4a2f      	ldr	r2, [pc, #188]	; (8002da4 <UART_SetConfig+0x5b0>)
 8002ce6:	189a      	adds	r2, r3, r2
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	0019      	movs	r1, r3
 8002cee:	0010      	movs	r0, r2
 8002cf0:	f7fd fa0a 	bl	8000108 <__udivsi3>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cfa:	e028      	b.n	8002d4e <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002cfc:	f7fe ff2c 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8002d00:	0002      	movs	r2, r0
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	18d2      	adds	r2, r2, r3
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	0019      	movs	r1, r3
 8002d10:	0010      	movs	r0, r2
 8002d12:	f7fd f9f9 	bl	8000108 <__udivsi3>
 8002d16:	0003      	movs	r3, r0
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d1c:	e017      	b.n	8002d4e <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	085b      	lsrs	r3, r3, #1
 8002d24:	2280      	movs	r2, #128	; 0x80
 8002d26:	0212      	lsls	r2, r2, #8
 8002d28:	189a      	adds	r2, r3, r2
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	0019      	movs	r1, r3
 8002d30:	0010      	movs	r0, r2
 8002d32:	f7fd f9e9 	bl	8000108 <__udivsi3>
 8002d36:	0003      	movs	r3, r0
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d3c:	e007      	b.n	8002d4e <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002d3e:	2313      	movs	r3, #19
 8002d40:	2218      	movs	r2, #24
 8002d42:	4694      	mov	ip, r2
 8002d44:	44bc      	add	ip, r7
 8002d46:	4463      	add	r3, ip
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
        break;
 8002d4c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d50:	2b0f      	cmp	r3, #15
 8002d52:	d908      	bls.n	8002d66 <UART_SetConfig+0x572>
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	4a0f      	ldr	r2, [pc, #60]	; (8002d94 <UART_SetConfig+0x5a0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d804      	bhi.n	8002d66 <UART_SetConfig+0x572>
    {
      huart->Instance->BRR = usartdiv;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d62:	60da      	str	r2, [r3, #12]
 8002d64:	e006      	b.n	8002d74 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 8002d66:	2313      	movs	r3, #19
 8002d68:	2218      	movs	r2, #24
 8002d6a:	4694      	mov	ip, r2
 8002d6c:	44bc      	add	ip, r7
 8002d6e:	4463      	add	r3, ip
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2200      	movs	r2, #0
 8002d78:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002d80:	2313      	movs	r3, #19
 8002d82:	2218      	movs	r2, #24
 8002d84:	4694      	mov	ip, r2
 8002d86:	44bc      	add	ip, r7
 8002d88:	4463      	add	r3, ip
 8002d8a:	781b      	ldrb	r3, [r3, #0]
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b00e      	add	sp, #56	; 0x38
 8002d92:	bdb0      	pop	{r4, r5, r7, pc}
 8002d94:	0000ffff 	.word	0x0000ffff
 8002d98:	0800315c 	.word	0x0800315c
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	003d0900 	.word	0x003d0900
 8002da4:	00f42400 	.word	0x00f42400

08002da8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	2201      	movs	r2, #1
 8002db6:	4013      	ands	r3, r2
 8002db8:	d00b      	beq.n	8002dd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4a4a      	ldr	r2, [pc, #296]	; (8002eec <UART_AdvFeatureConfig+0x144>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d00b      	beq.n	8002df4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4a43      	ldr	r2, [pc, #268]	; (8002ef0 <UART_AdvFeatureConfig+0x148>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	0019      	movs	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	2204      	movs	r2, #4
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d00b      	beq.n	8002e16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4a3b      	ldr	r2, [pc, #236]	; (8002ef4 <UART_AdvFeatureConfig+0x14c>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	0019      	movs	r1, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d00b      	beq.n	8002e38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4a34      	ldr	r2, [pc, #208]	; (8002ef8 <UART_AdvFeatureConfig+0x150>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	2210      	movs	r2, #16
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d00b      	beq.n	8002e5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	4a2c      	ldr	r2, [pc, #176]	; (8002efc <UART_AdvFeatureConfig+0x154>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	2220      	movs	r2, #32
 8002e60:	4013      	ands	r3, r2
 8002e62:	d00b      	beq.n	8002e7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4a25      	ldr	r2, [pc, #148]	; (8002f00 <UART_AdvFeatureConfig+0x158>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	0019      	movs	r1, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	2240      	movs	r2, #64	; 0x40
 8002e82:	4013      	ands	r3, r2
 8002e84:	d01d      	beq.n	8002ec2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <UART_AdvFeatureConfig+0x15c>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	0019      	movs	r1, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	035b      	lsls	r3, r3, #13
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d10b      	bne.n	8002ec2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4a15      	ldr	r2, [pc, #84]	; (8002f08 <UART_AdvFeatureConfig+0x160>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	2280      	movs	r2, #128	; 0x80
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d00b      	beq.n	8002ee4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <UART_AdvFeatureConfig+0x164>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]
  }
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b002      	add	sp, #8
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	fffdffff 	.word	0xfffdffff
 8002ef0:	fffeffff 	.word	0xfffeffff
 8002ef4:	fffbffff 	.word	0xfffbffff
 8002ef8:	ffff7fff 	.word	0xffff7fff
 8002efc:	ffffefff 	.word	0xffffefff
 8002f00:	ffffdfff 	.word	0xffffdfff
 8002f04:	ffefffff 	.word	0xffefffff
 8002f08:	ff9fffff 	.word	0xff9fffff
 8002f0c:	fff7ffff 	.word	0xfff7ffff

08002f10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002f1e:	f7fd ff0f 	bl	8000d40 <HAL_GetTick>
 8002f22:	0003      	movs	r3, r0
 8002f24:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d10d      	bne.n	8002f50 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	0399      	lsls	r1, r3, #14
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <UART_CheckIdleState+0x88>)
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	0013      	movs	r3, r2
 8002f42:	2200      	movs	r2, #0
 8002f44:	f000 f82a 	bl	8002f9c <UART_WaitOnFlagUntilTimeout>
 8002f48:	1e03      	subs	r3, r0, #0
 8002f4a:	d001      	beq.n	8002f50 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e01f      	b.n	8002f90 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2204      	movs	r2, #4
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d10d      	bne.n	8002f7a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	03d9      	lsls	r1, r3, #15
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <UART_CheckIdleState+0x88>)
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	0013      	movs	r3, r2
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f000 f815 	bl	8002f9c <UART_WaitOnFlagUntilTimeout>
 8002f72:	1e03      	subs	r3, r0, #0
 8002f74:	d001      	beq.n	8002f7a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e00a      	b.n	8002f90 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2270      	movs	r2, #112	; 0x70
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	0018      	movs	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b004      	add	sp, #16
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	01ffffff 	.word	0x01ffffff

08002f9c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	1dfb      	adds	r3, r7, #7
 8002faa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fac:	e029      	b.n	8003002 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	d026      	beq.n	8003002 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb4:	f7fd fec4 	bl	8000d40 <HAL_GetTick>
 8002fb8:	0002      	movs	r2, r0
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d302      	bcc.n	8002fca <UART_WaitOnFlagUntilTimeout+0x2e>
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d11b      	bne.n	8003002 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4915      	ldr	r1, [pc, #84]	; (800302c <UART_WaitOnFlagUntilTimeout+0x90>)
 8002fd6:	400a      	ands	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	438a      	bics	r2, r1
 8002fe8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2270      	movs	r2, #112	; 0x70
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e00f      	b.n	8003022 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	4013      	ands	r3, r2
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	425a      	negs	r2, r3
 8003012:	4153      	adcs	r3, r2
 8003014:	b2db      	uxtb	r3, r3
 8003016:	001a      	movs	r2, r3
 8003018:	1dfb      	adds	r3, r7, #7
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d0c6      	beq.n	8002fae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	0018      	movs	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	b004      	add	sp, #16
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	fffffe5f 	.word	0xfffffe5f

08003030 <__libc_init_array>:
 8003030:	b570      	push	{r4, r5, r6, lr}
 8003032:	2600      	movs	r6, #0
 8003034:	4d0c      	ldr	r5, [pc, #48]	; (8003068 <__libc_init_array+0x38>)
 8003036:	4c0d      	ldr	r4, [pc, #52]	; (800306c <__libc_init_array+0x3c>)
 8003038:	1b64      	subs	r4, r4, r5
 800303a:	10a4      	asrs	r4, r4, #2
 800303c:	42a6      	cmp	r6, r4
 800303e:	d109      	bne.n	8003054 <__libc_init_array+0x24>
 8003040:	2600      	movs	r6, #0
 8003042:	f000 f82b 	bl	800309c <_init>
 8003046:	4d0a      	ldr	r5, [pc, #40]	; (8003070 <__libc_init_array+0x40>)
 8003048:	4c0a      	ldr	r4, [pc, #40]	; (8003074 <__libc_init_array+0x44>)
 800304a:	1b64      	subs	r4, r4, r5
 800304c:	10a4      	asrs	r4, r4, #2
 800304e:	42a6      	cmp	r6, r4
 8003050:	d105      	bne.n	800305e <__libc_init_array+0x2e>
 8003052:	bd70      	pop	{r4, r5, r6, pc}
 8003054:	00b3      	lsls	r3, r6, #2
 8003056:	58eb      	ldr	r3, [r5, r3]
 8003058:	4798      	blx	r3
 800305a:	3601      	adds	r6, #1
 800305c:	e7ee      	b.n	800303c <__libc_init_array+0xc>
 800305e:	00b3      	lsls	r3, r6, #2
 8003060:	58eb      	ldr	r3, [r5, r3]
 8003062:	4798      	blx	r3
 8003064:	3601      	adds	r6, #1
 8003066:	e7f2      	b.n	800304e <__libc_init_array+0x1e>
 8003068:	08003188 	.word	0x08003188
 800306c:	08003188 	.word	0x08003188
 8003070:	08003188 	.word	0x08003188
 8003074:	0800318c 	.word	0x0800318c

08003078 <memcpy>:
 8003078:	2300      	movs	r3, #0
 800307a:	b510      	push	{r4, lr}
 800307c:	429a      	cmp	r2, r3
 800307e:	d100      	bne.n	8003082 <memcpy+0xa>
 8003080:	bd10      	pop	{r4, pc}
 8003082:	5ccc      	ldrb	r4, [r1, r3]
 8003084:	54c4      	strb	r4, [r0, r3]
 8003086:	3301      	adds	r3, #1
 8003088:	e7f8      	b.n	800307c <memcpy+0x4>

0800308a <memset>:
 800308a:	0003      	movs	r3, r0
 800308c:	1812      	adds	r2, r2, r0
 800308e:	4293      	cmp	r3, r2
 8003090:	d100      	bne.n	8003094 <memset+0xa>
 8003092:	4770      	bx	lr
 8003094:	7019      	strb	r1, [r3, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	e7f9      	b.n	800308e <memset+0x4>
	...

0800309c <_init>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr

080030a8 <_fini>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ae:	bc08      	pop	{r3}
 80030b0:	469e      	mov	lr, r3
 80030b2:	4770      	bx	lr
